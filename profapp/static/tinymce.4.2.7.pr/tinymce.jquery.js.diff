--- tinymce.pr/tinymce.jquery.js	2017-08-14 00:06:35.013404157 +0300
+++ ./tinymce.dev.4.2.7/tinymce.jquery.js	2015-10-27 07:43:58.000000000 +0200
@@ -1,4 +1,4 @@
-/// 4.2.7 (2015-10-27)
+// 4.2.7 (2015-10-27)
 
 /**
  * Compiled inline version. (Library mode)
@@ -7,7 +7,7 @@
 /*jshint smarttabs:true, undef:true, latedef:true, curly:true, bitwise:true, camelcase:true */
 /*globals $code */
 
-(function (exports, undefined) {
+(function(exports, undefined) {
     "use strict";
 
     var modules = {};
@@ -40,7 +40,7 @@
             throw 'invalid module definition, definition function must be specified';
         }
 
-        require(dependencies, function () {
+		require(dependencies, function() {
             modules[id] = definition.apply(null, arguments);
         });
     }
@@ -101,7 +101,7 @@
 
 // Included from: js/tinymce/classes/dom/EventUtils.js
 
-    /**
+/**
      * EventUtils.js
      *
      * Released under LGPL License.
@@ -111,15 +111,15 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /*jshint loopfunc:true*/
-    /*eslint no-loop-func:0 */
+/*jshint loopfunc:true*/
+/*eslint no-loop-func:0 */
 
-    /**
+/**
      * This class wraps the browsers native event logic with more convenient methods.
      *
      * @class tinymce.dom.EventUtils
      */
-    define("tinymce/dom/EventUtils", [], function () {
+define("tinymce/dom/EventUtils", [], function() {
         "use strict";
 
         var eventExpandoPrefix = "mce-data-";
@@ -191,7 +191,7 @@
             }
 
             // Add preventDefault method
-            event.preventDefault = function () {
+		event.preventDefault = function() {
                 event.isDefaultPrevented = returnTrue;
 
                 // Execute preventDefault on the original event object
@@ -205,7 +205,7 @@
             };
 
             // Add stopPropagation
-            event.stopPropagation = function () {
+		event.stopPropagation = function() {
                 event.isPropagationStopped = returnTrue;
 
                 // Execute stopPropagation on the original event object
@@ -219,7 +219,7 @@
             };
 
             // Add stopImmediatePropagation
-            event.stopImmediatePropagation = function () {
+		event.stopImmediatePropagation = function() {
                 event.isImmediatePropagationStopped = returnTrue;
                 event.stopPropagation();
             };
@@ -356,7 +356,7 @@
              * @param {Object} scope Scope to call the callback function on, defaults to target.
              * @return {function} Callback function that got bound.
              */
-            self.bind = function (target, names, callback, scope) {
+		self.bind = function(target, names, callback, scope) {
                 var id, callbackList, i, name, fakeName, nativeHandler, capture, win = window;
 
                 // Native event handler function patches the event and executes the callbacks for the expando
@@ -405,7 +405,7 @@
                         fakeName = mouseEnterLeave[name];
 
                         if (fakeName) {
-                            nativeHandler = function (evt) {
+						nativeHandler = function(evt) {
                                 var current, related;
 
                                 current = evt.currentTarget;
@@ -437,7 +437,7 @@
                     if (!hasFocusIn && (name === "focusin" || name === "focusout")) {
                         capture = true;
                         fakeName = name === "focusin" ? "focus" : "blur";
-                        nativeHandler = function (evt) {
+					nativeHandler = function(evt) {
                             evt = fix(evt || win.event);
                             evt.type = evt.type === 'focus' ? 'focusin' : 'focusout';
                             executeHandlers(evt, id);
@@ -486,7 +486,7 @@
              * @param {function} callback Optional callback function to unbind.
              * @return {EventUtils} Event utils instance.
              */
-            self.unbind = function (target, names, callback) {
+		self.unbind = function(target, names, callback) {
                 var id, callbackList, i, ci, name, eventMap;
 
                 // Don't bind to text nodes or comments
@@ -575,7 +575,7 @@
              * @param {Object} args Optional arguments to send to the observers.
              * @return {EventUtils} Event utils instance.
              */
-            self.fire = function (target, name, args) {
+		self.fire = function(target, name, args) {
                 var id;
 
                 // Don't bind to text nodes or comments
@@ -610,7 +610,7 @@
              * @param {Object} target Target node/window object.
              * @return {EventUtils} Event utils instance.
              */
-            self.clean = function (target) {
+		self.clean = function(target) {
                 var i, children, unbind = self.unbind;
 
                 // Don't bind to text nodes or comments
@@ -649,12 +649,12 @@
             /**
              * Destroys the event object. Call this on IE to remove memory leaks.
              */
-            self.destroy = function () {
+		self.destroy = function() {
                 events = {};
             };
 
             // Legacy function for canceling events
-            self.cancel = function (e) {
+		self.cancel = function(e) {
                 if (e) {
                     e.preventDefault();
                     e.stopImmediatePropagation();
@@ -665,15 +665,14 @@
         }
 
         EventUtils.Event = new EventUtils();
-        EventUtils.Event.bind(window, 'ready', function () {
-        });
+	EventUtils.Event.bind(window, 'ready', function() {});
 
         return EventUtils;
-    });
+});
 
 // Included from: js/tinymce/classes/dom/Sizzle.jQuery.js
 
-    /**
+/**
      * Sizzle.jQuery.js
      *
      * Released under LGPL License.
@@ -683,23 +682,23 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /*global jQuery:true */
+/*global jQuery:true */
 
-    /*
+/*
      * Fake Sizzle using jQuery.
      */
-    define("tinymce/dom/Sizzle", [], function () {
+define("tinymce/dom/Sizzle", [], function() {
         // Detect if jQuery is loaded
         if (!window.jQuery) {
             throw new Error("Load jQuery first");
         }
 
         return jQuery.find;
-    });
+});
 
 // Included from: js/tinymce/classes/Env.js
 
-    /**
+/**
      * Env.js
      *
      * Released under LGPL License.
@@ -709,7 +708,7 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This class contains various environment constants like browser versions etc.
      * Normally you don't want to sniff specific browser versions but sometimes you have
      * to when it's impossible to feature detect. So use this with care.
@@ -717,7 +716,7 @@
      * @class tinymce.Env
      * @static
      */
-    define("tinymce/Env", [], function () {
+define("tinymce/Env", [], function() {
         var nav = navigator, userAgent = nav.userAgent;
         var opera, webkit, ie, ie11, ie12, gecko, mac, iDevice, android, fileApi;
 
@@ -857,11 +856,11 @@
              */
             fileApi: fileApi
         };
-    });
+});
 
 // Included from: js/tinymce/classes/util/Arr.js
 
-    /**
+/**
      * Arr.js
      *
      * Released under LGPL License.
@@ -871,14 +870,14 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * Array utility class.
      *
      * @private
      * @class tinymce.util.Arr
      */
-    define("tinymce/util/Arr", [], function () {
-        var isArray = Array.isArray || function (obj) {
+define("tinymce/util/Arr", [], function() {
+	var isArray = Array.isArray || function(obj) {
                 return Object.prototype.toString.call(obj) === "[object Array]";
             };
 
@@ -928,7 +927,7 @@
         function map(array, callback) {
             var out = [];
 
-            each(array, function (item, index) {
+		each(array, function(item, index) {
                 out.push(callback(item, index, array));
             });
 
@@ -938,7 +937,7 @@
         function filter(a, f) {
             var o = [];
 
-            each(a, function (v) {
+		each(a, function(v) {
                 if (!f || f(v)) {
                     o.push(v);
                 }
@@ -985,11 +984,11 @@
             indexOf: indexOf,
             reduce: reduce
         };
-    });
+});
 
 // Included from: js/tinymce/classes/util/Tools.js
 
-    /**
+/**
      * Tools.js
      *
      * Released under LGPL License.
@@ -999,16 +998,16 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This class contains various utlity functions. These are also exposed
      * directly on the tinymce namespace.
      *
      * @class tinymce.util.Tools
      */
-    define("tinymce/util/Tools", [
+define("tinymce/util/Tools", [
         "tinymce/Env",
         "tinymce/util/Arr"
-    ], function (Env, Arr) {
+], function(Env, Arr) {
         /**
          * Removes whitespace from the beginning and end of a string.
          *
@@ -1145,8 +1144,7 @@
 
             // Create default constructor
             if (!p[cn]) {
-                p[cn] = function () {
-                };
+			p[cn] = function() {};
                 de = 1;
             }
 
@@ -1163,12 +1161,12 @@
                 c = ns[cn];
                 if (de) {
                     // Add passthrough constructor
-                    ns[cn] = function () {
+				ns[cn] = function() {
                         return sp[scn].apply(this, arguments);
                     };
                 } else {
                     // Add inherit constructor
-                    ns[cn] = function () {
+				ns[cn] = function() {
                         this.parent = sp[scn];
                         return c.apply(this, arguments);
                     };
@@ -1176,15 +1174,15 @@
                 ns[cn].prototype[cn] = ns[cn];
 
                 // Add super methods
-                self.each(sp, function (f, n) {
+			self.each(sp, function(f, n) {
                     ns[cn].prototype[n] = sp[n];
                 });
 
                 // Add overridden methods
-                self.each(p, function (f, n) {
+			self.each(p, function(f, n) {
                     // Extend methods if needed
                     if (sp[n]) {
-                        ns[cn].prototype[n] = function () {
+					ns[cn].prototype[n] = function() {
                             this.parent = sp[n];
                             return f.apply(this, arguments);
                         };
@@ -1199,7 +1197,7 @@
             // Add static methods
             /*jshint sub:true*/
             /*eslint dot-notation:0*/
-            self.each(p['static'], function (f, n) {
+		self.each(p['static'], function(f, n) {
                 ns[cn][n] = f;
             });
         }
@@ -1240,7 +1238,7 @@
                     o = o[n];
                 }
 
-                Arr.each(o, function (o, i) {
+			Arr.each(o, function(o, i) {
                     if (f.call(s, o, i, n) === false) {
                         return false;
                     }
@@ -1431,11 +1429,11 @@
             explode: explode,
             _addCacheSuffix: _addCacheSuffix
         };
-    });
+});
 
 // Included from: js/tinymce/classes/dom/DomQuery.js
 
-    /**
+/**
      * DomQuery.js
      *
      * Released under LGPL License.
@@ -1445,7 +1443,7 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This class mimics most of the jQuery API:
      *
      * This is whats currently implemented:
@@ -1466,12 +1464,12 @@
      *
      * @class tinymce.dom.DomQuery
      */
-    define("tinymce/dom/DomQuery", [
+define("tinymce/dom/DomQuery", [
         "tinymce/dom/EventUtils",
         "tinymce/dom/Sizzle",
         "tinymce/util/Tools",
         "tinymce/Env"
-    ], function (EventUtils, Sizzle, Tools, Env) {
+], function(EventUtils, Sizzle, Tools, Env) {
         var doc = document, push = Array.prototype.push, slice = Array.prototype.slice;
         var rquickExpr = /^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/;
         var Event = EventUtils.Event, undef;
@@ -1544,7 +1542,7 @@
 
             wrapper = DomQuery(wrapper)[0];
 
-            elements.each(function () {
+		elements.each(function() {
                 var self = this;
 
                 if (!all || lastParent != self.parentNode) {
@@ -1634,7 +1632,7 @@
         function grep(array, callback) {
             var out = [];
 
-            each(array, function (i, item) {
+		each(array, function(i, item) {
                 if (callback(item, i)) {
                     out.push(item);
                 }
@@ -1690,7 +1688,7 @@
              * @param {String/Array/DomQuery} selector Optional CSS selector/Array or array like object or HTML string.
              * @param {Document/Element} context Optional context to search in.
              */
-            init: function (selector, context) {
+		init: function(selector, context) {
                 var self = this, match, node;
 
                 if (!selector) {
@@ -1761,7 +1759,7 @@
              * @method toArray
              * @param {Array} Array of all nodes in set.
              */
-            toArray: function () {
+		toArray: function() {
                 return Tools.toArray(this);
             },
 
@@ -1772,7 +1770,7 @@
              * @param {Array/tinymce.dom.DomQuery} items Array of all nodes to add to set.
              * @return {tinymce.dom.DomQuery} New instance with nodes added.
              */
-            add: function (items, sort) {
+		add: function(items, sort) {
                 var self = this, nodes, i;
 
                 if (isString(items)) {
@@ -1800,15 +1798,15 @@
              * @param {String} value Optional value to set.
              * @return {tinymce.dom.DomQuery/String} Current set or the specified attribute when only the name is specified.
              */
-            attr: function (name, value) {
+		attr: function(name, value) {
                 var self = this, hook;
 
                 if (typeof name === "object") {
-                    each(name, function (name, value) {
+				each(name, function(name, value) {
                         self.attr(name, value);
                     });
                 } else if (isDefined(value)) {
-                    this.each(function () {
+				this.each(function() {
                         var hook;
 
                         if (this.nodeType === 1) {
@@ -1856,7 +1854,7 @@
              * @param {String/Object} name Name of attribute to remove.
              * @return {tinymce.dom.DomQuery/String} Current set.
              */
-            removeAttr: function (name) {
+		removeAttr: function(name) {
                 return this.attr(name, null);
             },
 
@@ -1868,17 +1866,17 @@
              * @param {String} value Optional value to set.
              * @return {tinymce.dom.DomQuery/String} Current set or the specified property when only the name is specified.
              */
-            prop: function (name, value) {
+		prop: function(name, value) {
                 var self = this;
 
                 name = propFix[name] || name;
 
                 if (typeof name === "object") {
-                    each(name, function (name, value) {
+				each(name, function(name, value) {
                         self.prop(name, value);
                     });
                 } else if (isDefined(value)) {
-                    this.each(function () {
+				this.each(function() {
                         if (this.nodeType == 1) {
                             this[name] = value;
                         }
@@ -1902,23 +1900,23 @@
              * @param {String} value Optional value to set.
              * @return {tinymce.dom.DomQuery/String} Current set or the specified style when only the name is specified.
              */
-            css: function (name, value) {
+		css: function(name, value) {
                 var self = this, elm, hook;
 
                 function camel(name) {
-                    return name.replace(/-(\D)/g, function (a, b) {
+				return name.replace(/-(\D)/g, function(a, b) {
                         return b.toUpperCase();
                     });
                 }
 
                 function dashed(name) {
-                    return name.replace(/[A-Z]/g, function (a) {
+				return name.replace(/[A-Z]/g, function(a) {
                         return '-' + a;
                     });
                 }
 
                 if (typeof name === "object") {
-                    each(name, function (name, value) {
+				each(name, function(name, value) {
                         self.css(name, value);
                     });
                 } else {
@@ -1930,7 +1928,7 @@
                             value += 'px';
                         }
 
-                        self.each(function () {
+					self.each(function() {
                             var style = this.style;
 
                             hook = cssHooks[name];
@@ -1982,7 +1980,7 @@
              * @method remove
              * @return {tinymce.dom.DomQuery} Current set with the removed nodes.
              */
-            remove: function () {
+		remove: function() {
                 var self = this, node, i = this.length;
 
                 while (i--) {
@@ -2003,7 +2001,7 @@
              * @method empty
              * @return {tinymce.dom.DomQuery} Current set with the empty nodes.
              */
-            empty: function () {
+		empty: function() {
                 var self = this, node, i = this.length;
 
                 while (i--) {
@@ -2023,7 +2021,7 @@
              * @param {String} value Optional innerHTML value to set on each element.
              * @return {tinymce.dom.DomQuery/String} Current set or the innerHTML of the first element.
              */
-            html: function (value) {
+		html: function(value) {
                 var self = this, i;
 
                 if (isDefined(value)) {
@@ -2051,7 +2049,7 @@
              * @param {String} value Optional innerText value to set on each element.
              * @return {tinymce.dom.DomQuery/String} Current set or the innerText of the first element.
              */
-            text: function (value) {
+		text: function(value) {
                 var self = this, i;
 
                 if (isDefined(value)) {
@@ -2077,8 +2075,8 @@
              * @param {String/Element/Array/tinymce.dom.DomQuery} content Content to append to each element in set.
              * @return {tinymce.dom.DomQuery} Current set.
              */
-            append: function () {
-                return domManipulate(this, arguments, function (node) {
+		append: function() {
+			return domManipulate(this, arguments, function(node) {
                     if (this.nodeType === 1) {
                         this.appendChild(node);
                     }
@@ -2092,8 +2090,8 @@
              * @param {String/Element/Array/tinymce.dom.DomQuery} content Content to prepend to each element in set.
              * @return {tinymce.dom.DomQuery} Current set.
              */
-            prepend: function () {
-                return domManipulate(this, arguments, function (node) {
+		prepend: function() {
+			return domManipulate(this, arguments, function(node) {
                     if (this.nodeType === 1) {
                         this.insertBefore(node, this.firstChild);
                     }
@@ -2107,11 +2105,11 @@
              * @param {String/Element/Array/tinymce.dom.DomQuery} content Content to add before to each element in set.
              * @return {tinymce.dom.DomQuery} Current set.
              */
-            before: function () {
+		before: function() {
                 var self = this;
 
                 if (self[0] && self[0].parentNode) {
-                    return domManipulate(self, arguments, function (node) {
+				return domManipulate(self, arguments, function(node) {
                         this.parentNode.insertBefore(node, this);
                     });
                 }
@@ -2126,11 +2124,11 @@
              * @param {String/Element/Array/tinymce.dom.DomQuery} content Content to add after to each element in set.
              * @return {tinymce.dom.DomQuery} Current set.
              */
-            after: function () {
+		after: function() {
                 var self = this;
 
                 if (self[0] && self[0].parentNode) {
-                    return domManipulate(self, arguments, function (node) {
+				return domManipulate(self, arguments, function(node) {
                         this.parentNode.insertBefore(node, this.nextSibling);
                     }, true);
                 }
@@ -2145,7 +2143,7 @@
              * @param {String/Element/Array/tinymce.dom.DomQuery} val Item to append the current set to.
              * @return {tinymce.dom.DomQuery} Current set with the appended nodes.
              */
-            appendTo: function (val) {
+		appendTo: function(val) {
                 DomQuery(val).append(this);
 
                 return this;
@@ -2158,7 +2156,7 @@
              * @param {String/Element/Array/tinymce.dom.DomQuery} val Item to prepend the current set to.
              * @return {tinymce.dom.DomQuery} Current set with the prepended nodes.
              */
-            prependTo: function (val) {
+		prependTo: function(val) {
                 DomQuery(val).prepend(this);
 
                 return this;
@@ -2171,7 +2169,7 @@
              * @param {String/Element/Array/tinymce.dom.DomQuery} content Content to replace nodes with.
              * @return {tinymce.dom.DomQuery} Set with replaced nodes.
              */
-            replaceWith: function (content) {
+		replaceWith: function(content) {
                 return this.before(content).remove();
             },
 
@@ -2182,7 +2180,7 @@
              * @param {String/Element/Array/tinymce.dom.DomQuery} content Content to wrap nodes with.
              * @return {tinymce.dom.DomQuery} Set with wrapped nodes.
              */
-            wrap: function (wrapper) {
+		wrap: function(wrapper) {
                 return wrap(this, wrapper);
             },
 
@@ -2194,7 +2192,7 @@
              * @param {String/Element/Array/tinymce.dom.DomQuery} content Content to wrap nodes with.
              * @return {tinymce.dom.DomQuery} Set with wrapped nodes.
              */
-            wrapAll: function (wrapper) {
+		wrapAll: function(wrapper) {
                 return wrap(this, wrapper, true);
             },
 
@@ -2205,8 +2203,8 @@
              * @param {String/Element/Array/tinymce.dom.DomQuery} content Content to wrap nodes with.
              * @return {tinymce.dom.DomQuery} Set with wrapped nodes.
              */
-            wrapInner: function (wrapper) {
-                this.each(function () {
+		wrapInner: function(wrapper) {
+			this.each(function() {
                     DomQuery(this).contents().wrapAll(wrapper);
                 });
 
@@ -2219,8 +2217,8 @@
              * @method unwrap
              * @return {tinymce.dom.DomQuery} Set with unwrapped nodes.
              */
-            unwrap: function () {
-                return this.parent().each(function () {
+		unwrap: function() {
+			return this.parent().each(function() {
                     DomQuery(this).replaceWith(this.childNodes);
                 });
             },
@@ -2231,10 +2229,10 @@
              * @method clone
              * @return {tinymce.dom.DomQuery} Set with cloned nodes.
              */
-            clone: function () {
+		clone: function() {
                 var result = [];
 
-                this.each(function () {
+			this.each(function() {
                     result.push(this.cloneNode(true));
                 });
 
@@ -2248,7 +2246,7 @@
              * @param {String} className Class name to add.
              * @return {tinymce.dom.DomQuery} Current set.
              */
-            addClass: function (className) {
+		addClass: function(className) {
                 return this.toggleClass(className, true);
             },
 
@@ -2259,7 +2257,7 @@
              * @param {String} className Class name to remove.
              * @return {tinymce.dom.DomQuery} Current set.
              */
-            removeClass: function (className) {
+		removeClass: function(className) {
                 return this.toggleClass(className, false);
             },
 
@@ -2271,7 +2269,7 @@
              * @param {Boolean} state Optional state to toggle on/off.
              * @return {tinymce.dom.DomQuery} Current set.
              */
-            toggleClass: function (className, state) {
+		toggleClass: function(className, state) {
                 var self = this;
 
                 // Functions are not supported
@@ -2280,11 +2278,11 @@
                 }
 
                 if (className.indexOf(' ') !== -1) {
-                    each(className.split(' '), function () {
+				each(className.split(' '), function() {
                         self.toggleClass(this, state);
                     });
                 } else {
-                    self.each(function (index, node) {
+				self.each(function(index, node) {
                         var existingClassName, classState;
 
                         classState = hasClass(node, className);
@@ -2310,7 +2308,7 @@
              * @param {String} className Class name to check for.
              * @return {Boolean} True/false if the set has the specified class.
              */
-            hasClass: function (className) {
+		hasClass: function(className) {
                 return hasClass(this[0], className);
             },
 
@@ -2322,7 +2320,7 @@
              * @param {function} callback Callback function to execute for each item.
              * @return {tinymce.dom.DomQuery} Current set.
              */
-            each: function (callback) {
+		each: function(callback) {
                 return each(this, callback);
             },
 
@@ -2334,8 +2332,8 @@
              * @param {function} callback Callback function to execute when the event occurs.
              * @return {tinymce.dom.DomQuery} Current set.
              */
-            on: function (name, callback) {
-                return this.each(function () {
+		on: function(name, callback) {
+			return this.each(function() {
                     Event.bind(this, name, callback);
                 });
             },
@@ -2348,8 +2346,8 @@
              * @param {function} callback Optional callback function to execute when the event occurs.
              * @return {tinymce.dom.DomQuery} Current set.
              */
-            off: function (name, callback) {
-                return this.each(function () {
+		off: function(name, callback) {
+			return this.each(function() {
                     Event.unbind(this, name, callback);
                 });
             },
@@ -2361,8 +2359,8 @@
              * @param {String/Object} name Name of the event to trigger or event object.
              * @return {tinymce.dom.DomQuery} Current set.
              */
-            trigger: function (name) {
-                return this.each(function () {
+		trigger: function(name) {
+			return this.each(function() {
                     if (typeof name == 'object') {
                         Event.fire(this, name.type, name);
                     } else {
@@ -2377,7 +2375,7 @@
              * @method show
              * @return {tinymce.dom.DomQuery} Current set.
              */
-            show: function () {
+		show: function() {
                 return this.css('display', '');
             },
 
@@ -2387,7 +2385,7 @@
              * @method hide
              * @return {tinymce.dom.DomQuery} Current set.
              */
-            hide: function () {
+		hide: function() {
                 return this.css('display', 'none');
             },
 
@@ -2399,7 +2397,7 @@
              * @param {Number} end Optional ened index to end slice at.
              * @return {tinymce.dom.DomQuery} Sliced set.
              */
-            slice: function () {
+		slice: function() {
                 return new DomQuery(slice.apply(this, arguments));
             },
 
@@ -2410,7 +2408,7 @@
              * @param {Number} index Index to set it equal to.
              * @return {tinymce.dom.DomQuery} Single item set.
              */
-            eq: function (index) {
+		eq: function(index) {
                 return index === -1 ? this.slice(index) : this.slice(index, +index + 1);
             },
 
@@ -2420,7 +2418,7 @@
              * @method first
              * @return {tinymce.dom.DomQuery} Single item set.
              */
-            first: function () {
+		first: function() {
                 return this.eq(0);
             },
 
@@ -2430,7 +2428,7 @@
              * @method last
              * @return {tinymce.dom.DomQuery} Single item set.
              */
-            last: function () {
+		last: function() {
                 return this.eq(-1);
             },
 
@@ -2441,7 +2439,7 @@
              * @param {String} selector Selector to find elements by.
              * @return {tinymce.dom.DomQuery} Set with matches elements.
              */
-            find: function (selector) {
+		find: function(selector) {
                 var i, l, ret = [];
 
                 for (i = 0, l = this.length; i < l; i++) {
@@ -2458,9 +2456,9 @@
              * @param {String/function} selector Selector to filter elements by.
              * @return {tinymce.dom.DomQuery} Set with filtered elements.
              */
-            filter: function (selector) {
+		filter: function(selector) {
                 if (typeof selector == 'function') {
-                    return DomQuery(grep(this.toArray(), function (item, i) {
+				return DomQuery(grep(this.toArray(), function(item, i) {
                         return selector(i, item);
                     }));
                 }
@@ -2475,14 +2473,14 @@
              * @param {String/Element/tinymce.dom.DomQuery} selector Selector or element to find.
              * @return {tinymce.dom.DomQuery} Set with closest elements.
              */
-            closest: function (selector) {
+		closest: function(selector) {
                 var result = [];
 
                 if (selector instanceof DomQuery) {
                     selector = selector[0];
                 }
 
-                this.each(function (i, node) {
+			this.each(function(i, node) {
                     while (node) {
                         if (typeof selector == 'string' && DomQuery(node).is(selector)) {
                             result.push(node);
@@ -2506,7 +2504,7 @@
              * @param {Object} offset Optional offset object to set on each item.
              * @return {Object/tinymce.dom.DomQuery} Returns the first element offset or the current set if you specified an offset.
              */
-            offset: function (offset) {
+		offset: function(offset) {
                 var elm, doc, docElm;
                 var x = 0, y = 0, pos;
 
@@ -2559,7 +2557,7 @@
              * @param {Object} object Object to convert to array.
              * @return {Arrau} Array produced from object.
              */
-            makeArray: function (array) {
+		makeArray: function(array) {
                 if (isWindow(array) || array.nodeType) {
                     return [array];
                 }
@@ -2630,7 +2628,7 @@
             unique: Sizzle.uniqueSort,
             text: Sizzle.getText,
             contains: Sizzle.contains,
-            filter: function (expr, elems, not) {
+		filter: function(expr, elems, not) {
                 var i = elems.length;
 
                 if (not) {
@@ -2727,7 +2725,7 @@
              * @param {String} selector Selector to match parents agains.
              * @return {tinymce.dom.DomQuery} New DomQuery instance with all matching parents.
              */
-            parent: function (node) {
+		parent: function(node) {
                 var parent = node.parentNode;
 
                 return parent && parent.nodeType !== 11 ? parent : null;
@@ -2740,7 +2738,7 @@
              * @param {String} selector Selector to match parents agains.
              * @return {tinymce.dom.DomQuery} New DomQuery instance with all matching parents.
              */
-            parents: function (node) {
+		parents: function(node) {
                 return dir(node, "parentNode");
             },
 
@@ -2751,7 +2749,7 @@
              * @param {String} selector Selector to match the next element against.
              * @return {tinymce.dom.DomQuery} New DomQuery instance with all matching elements.
              */
-            next: function (node) {
+		next: function(node) {
                 return firstSibling(node, 'nextSibling', 1);
             },
 
@@ -2762,7 +2760,7 @@
              * @param {String} selector Selector to match the previous element against.
              * @return {tinymce.dom.DomQuery} New DomQuery instance with all matching elements.
              */
-            prev: function (node) {
+		prev: function(node) {
                 return firstSibling(node, 'previousSibling', 1);
             },
 
@@ -2773,7 +2771,7 @@
              * @param {String} selector Selector to match the elements against.
              * @return {tinymce.dom.DomQuery} New DomQuery instance with all matching elements.
              */
-            children: function (node) {
+		children: function(node) {
                 return sibling(node.firstChild, 'nextSibling', 1);
             },
 
@@ -2783,14 +2781,14 @@
              * @method contents
              * @return {tinymce.dom.DomQuery} New DomQuery instance with all matching elements.
              */
-            contents: function (node) {
+		contents: function(node) {
                 return Tools.toArray((node.nodeName === "iframe" ? node.contentDocument || node.contentWindow.document : node).childNodes);
             }
-        }, function (name, fn) {
-            DomQuery.fn[name] = function (selector) {
+	}, function(name, fn) {
+		DomQuery.fn[name] = function(selector) {
                 var self = this, result = [];
 
-                self.each(function () {
+			self.each(function() {
                     var nodes = fn.call(result, this, selector, result);
 
                     if (nodes) {
@@ -2832,7 +2830,7 @@
              * @param {String/Element/tinymce.dom.DomQuery} until Until the matching selector or element.
              * @return {tinymce.dom.DomQuery} New DomQuery instance with all matching parents.
              */
-            parentsUntil: function (node, until) {
+		parentsUntil: function(node, until) {
                 return dir(node, "parentNode", until);
             },
 
@@ -2843,7 +2841,7 @@
              * @param {String/Element/tinymce.dom.DomQuery} until Until the matching selector or element.
              * @return {tinymce.dom.DomQuery} New DomQuery instance with all matching elements.
              */
-            nextUntil: function (node, until) {
+		nextUntil: function(node, until) {
                 return sibling(node, 'nextSibling', 1, until).slice(1);
             },
 
@@ -2854,14 +2852,14 @@
              * @param {String/Element/tinymce.dom.DomQuery} until Until the matching selector or element.
              * @return {tinymce.dom.DomQuery} New DomQuery instance with all matching elements.
              */
-            prevUntil: function (node, until) {
+		prevUntil: function(node, until) {
                 return sibling(node, 'previousSibling', 1, until).slice(1);
             }
-        }, function (name, fn) {
-            DomQuery.fn[name] = function (selector, filter) {
+	}, function(name, fn) {
+		DomQuery.fn[name] = function(selector, filter) {
                 var self = this, result = [];
 
-                self.each(function () {
+			self.each(function() {
                     var nodes = fn.call(result, this, selector, result);
 
                     if (nodes) {
@@ -2899,13 +2897,13 @@
          * @param {String} selector Selector to match the elements against.
          * @return {Boolean} True/false if the current set matches the selector.
          */
-        DomQuery.fn.is = function (selector) {
+	DomQuery.fn.is = function(selector) {
             return !!selector && this.filter(selector).length > 0;
         };
 
         DomQuery.fn.init.prototype = DomQuery.fn;
 
-        DomQuery.overrideDefaults = function (callback) {
+	DomQuery.overrideDefaults = function(callback) {
             var defaults;
 
             function sub(selector, context) {
@@ -2928,7 +2926,7 @@
         };
 
         function appendHooks(targetHooks, prop, hooks) {
-            each(hooks, function (name, func) {
+		each(hooks, function(name, func) {
                 targetHooks[name] = targetHooks[name] || {};
                 targetHooks[name][prop] = func;
             });
@@ -2936,7 +2934,7 @@
 
         if (Env.ie && Env.ie < 8) {
             appendHooks(attrHooks, 'get', {
-                maxlength: function (elm) {
+			maxlength: function(elm) {
                     var value = elm.maxLength;
 
                     if (value === 0x7fffffff) {
@@ -2946,7 +2944,7 @@
                     return value;
                 },
 
-                size: function (elm) {
+			size: function(elm) {
                     var value = elm.size;
 
                     if (value === 20) {
@@ -2956,11 +2954,11 @@
                     return value;
                 },
 
-                'class': function (elm) {
+			'class': function(elm) {
                     return elm.className;
                 },
 
-                style: function (elm) {
+			style: function(elm) {
                     var value = elm.style.cssText;
 
                     if (value.length === 0) {
@@ -2972,11 +2970,11 @@
             });
 
             appendHooks(attrHooks, 'set', {
-                'class': function (elm, value) {
+			'class': function(elm, value) {
                     elm.className = value;
                 },
 
-                style: function (elm, value) {
+			style: function(elm, value) {
                     elm.style.cssText = value;
                 }
             });
@@ -2988,7 +2986,7 @@
             cssFix['float'] = 'styleFloat';
 
             appendHooks(cssHooks, 'set', {
-                opacity: function (elm, value) {
+			opacity: function(elm, value) {
                     var style = elm.style;
 
                     if (value === null || value === '') {
@@ -3005,11 +3003,11 @@
         DomQuery.cssHooks = cssHooks;
 
         return DomQuery;
-    });
+});
 
 // Included from: js/tinymce/classes/html/Styles.js
 
-    /**
+/**
      * Styles.js
      *
      * Released under LGPL License.
@@ -3019,7 +3017,7 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This class is used to parse CSS styles it also compresses styles to reduce the output size.
      *
      * @example
@@ -3037,8 +3035,8 @@
      * @class tinymce.html.Styles
      * @version 3.4
      */
-    define("tinymce/html/Styles", [], function () {
-        return function (settings, schema) {
+define("tinymce/html/Styles", [], function() {
+	return function(settings, schema) {
             /*jshint maxlen:255 */
             /*eslint max-len:0 */
             var rgbRegExp = /rgb\s*\(\s*([0-9]+)\s*,\s*([0-9]+)\s*,\s*([0-9]+)\s*\)/gi,
@@ -3078,7 +3076,7 @@
                  * @param {String} color RGB string value like rgb(1,2,3)
                  * @return {String} Hex version of that RGB value like #FF00FF.
                  */
-                toHex: function (color) {
+			toHex: function(color) {
                     return color.replace(rgbRegExp, toHex);
                 },
 
@@ -3091,7 +3089,7 @@
                  * @param {String} css Style value to parse for example: border:1px solid red;.
                  * @return {Object} Object representation of that style like {border: '1px solid red'}
                  */
-                parse: function (css) {
+			parse: function(css) {
                     var styles = {}, matches, name, value, isEncoded, urlConverter = settings.url_converter;
                     var urlConverterScope = settings.url_converter_scope || this;
 
@@ -3194,7 +3192,7 @@
                     // It will also decode the \" \' if keep_slashes is set to fale or omitted
                     function decode(str, keep_slashes) {
                         if (isEncoded) {
-                            str = str.replace(/\uFEFF[0-9]/g, function (str) {
+						str = str.replace(/\uFEFF[0-9]/g, function(str) {
                                 return encodingLookup[str];
                             });
                         }
@@ -3243,7 +3241,7 @@
                         css = css.replace(/[\u0000-\u001F]/g, '');
 
                         // Encode \" \' % and ; and : inside strings so they don't interfere with the style parsing
-                        css = css.replace(/\\[\"\';:\uFEFF]/g, encode).replace(/\"[^\"]+\"|\'[^\']+\'/g, function (str) {
+					css = css.replace(/\\[\"\';:\uFEFF]/g, encode).replace(/\"[^\"]+\"|\'[^\']+\'/g, function(str) {
                             return str.replace(/[;:]/g, encode);
                         });
 
@@ -3255,7 +3253,7 @@
                             // Decode escaped sequences like \65 -> e
                             /*jshint loopfunc:true*/
                             /*eslint no-loop-func:0 */
-                            value = value.replace(/\\[0-9a-f]+/g, function (e) {
+						value = value.replace(/\\[0-9a-f]+/g, function(e) {
                                 return String.fromCharCode(parseInt(e.substr(1), 16));
                             });
 
@@ -3314,7 +3312,7 @@
                  * @param {String} elementName Optional element name, if specified only the styles that matches the schema will be serialized.
                  * @return {String} String representation of the style object for example: border: 1px solid red.
                  */
-                serialize: function (styles, elementName) {
+			serialize: function(styles, elementName) {
                     var css = '', name, value;
 
                     function serializeStyles(name) {
@@ -3371,11 +3369,11 @@
                 }
             };
         };
-    });
+});
 
 // Included from: js/tinymce/classes/dom/TreeWalker.js
 
-    /**
+/**
      * TreeWalker.js
      *
      * Released under LGPL License.
@@ -3385,7 +3383,7 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * TreeWalker class enables you to walk the DOM in a linear manner.
      *
      * @class tinymce.dom.TreeWalker
@@ -3396,7 +3394,7 @@
  *     console.log(walker.current());
  * } while (walker.next());
      */
-    define("tinymce/dom/TreeWalker", [], function () {
+define("tinymce/dom/TreeWalker", [], function() {
         /**
          * Constructs a new TreeWalker instance.
          *
@@ -3405,7 +3403,7 @@
          * @param {Node} startNode Node to start walking from.
          * @param {node} rootNode Optional root node to never walk out of.
          */
-        return function (startNode, rootNode) {
+	return function(startNode, rootNode) {
             var node = startNode;
 
             function findSibling(node, startName, siblingName, shallow) {
@@ -3441,7 +3439,7 @@
              * @method current
              * @return {Node} Current node where the walker is.
              */
-            this.current = function () {
+		this.current = function() {
                 return node;
             };
 
@@ -3451,7 +3449,7 @@
              * @method next
              * @return {Node} Current node where the walker is after moving to the next node.
              */
-            this.next = function (shallow) {
+		this.next = function(shallow) {
                 node = findSibling(node, 'firstChild', 'nextSibling', shallow);
                 return node;
             };
@@ -3462,16 +3460,16 @@
              * @method prev
              * @return {Node} Current node where the walker is after moving to the previous node.
              */
-            this.prev = function (shallow) {
+		this.prev = function(shallow) {
                 node = findSibling(node, 'lastChild', 'previousSibling', shallow);
                 return node;
             };
         };
-    });
+});
 
 // Included from: js/tinymce/classes/dom/Range.js
 
-    /**
+/**
      * Range.js
      *
      * Released under LGPL License.
@@ -3481,15 +3479,15 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * Old IE Range.
      *
      * @private
      * @class tinymce.dom.Range
      */
-    define("tinymce/dom/Range", [
+define("tinymce/dom/Range", [
         "tinymce/util/Tools"
-    ], function (Tools) {
+], function(Tools) {
         // Range constructor
         function Range(dom) {
             var self = this,
@@ -4248,16 +4246,16 @@
         }
 
         // Older IE versions doesn't let you override toString by it's constructor so we have to stick it in the prototype
-        Range.prototype.toString = function () {
+	Range.prototype.toString = function() {
             return this.toStringIE();
         };
 
         return Range;
-    });
+});
 
 // Included from: js/tinymce/classes/html/Entities.js
 
-    /**
+/**
      * Entities.js
      *
      * Released under LGPL License.
@@ -4267,19 +4265,19 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /*jshint bitwise:false */
-    /*eslint no-bitwise:0 */
+/*jshint bitwise:false */
+/*eslint no-bitwise:0 */
 
-    /**
+/**
      * Entity encoder class.
      *
      * @class tinymce.html.Entities
      * @static
      * @version 3.4
      */
-    define("tinymce/html/Entities", [
+define("tinymce/html/Entities", [
         "tinymce/util/Tools"
-    ], function (Tools) {
+], function(Tools) {
         var makeMap = Tools.makeMap;
 
         var namedEntities, baseEntities, reverseEntities,
@@ -4385,8 +4383,8 @@
              * @param {Boolean} attr Optional flag to specify if the text is attribute contents.
              * @return {String} Entity encoded text.
              */
-            encodeRaw: function (text, attr) {
-                return text.replace(attr ? attrsCharsRegExp : textCharsRegExp, function (chr) {
+		encodeRaw: function(text, attr) {
+			return text.replace(attr ? attrsCharsRegExp : textCharsRegExp, function(chr) {
                     return baseEntities[chr] || chr;
                 });
             },
@@ -4400,8 +4398,8 @@
              * @param {String} text Text to encode.
              * @return {String} Entity encoded text.
              */
-            encodeAllRaw: function (text) {
-                return ('' + text).replace(rawCharsRegExp, function (chr) {
+		encodeAllRaw: function(text) {
+			return ('' + text).replace(rawCharsRegExp, function(chr) {
                     return baseEntities[chr] || chr;
                 });
             },
@@ -4415,8 +4413,8 @@
              * @param {Boolean} attr Optional flag to specify if the text is attribute contents.
              * @return {String} Entity encoded text.
              */
-            encodeNumeric: function (text, attr) {
-                return text.replace(attr ? attrsCharsRegExp : textCharsRegExp, function (chr) {
+		encodeNumeric: function(text, attr) {
+			return text.replace(attr ? attrsCharsRegExp : textCharsRegExp, function(chr) {
                     // Multi byte sequence convert it to a single entity
                     if (chr.length > 1) {
                         return '&#' + (((chr.charCodeAt(0) - 0xD800) * 0x400) + (chr.charCodeAt(1) - 0xDC00) + 0x10000) + ';';
@@ -4436,10 +4434,10 @@
              * @param {Object} entities Optional parameter with entities to use.
              * @return {String} Entity encoded text.
              */
-            encodeNamed: function (text, attr, entities) {
+		encodeNamed: function(text, attr, entities) {
                 entities = entities || namedEntities;
 
-                return text.replace(attr ? attrsCharsRegExp : textCharsRegExp, function (chr) {
+			return text.replace(attr ? attrsCharsRegExp : textCharsRegExp, function(chr) {
                     return baseEntities[chr] || entities[chr] || chr;
                 });
             },
@@ -4452,11 +4450,11 @@
              * @param {String} entities Optional parameter with entities to use instead of the built in set.
              * @return {function} Encode function to be used.
              */
-            getEncodeFunc: function (name, entities) {
+		getEncodeFunc: function(name, entities) {
                 entities = buildEntitiesLookup(entities) || namedEntities;
 
                 function encodeNamedAndNumeric(text, attr) {
-                    return text.replace(attr ? attrsCharsRegExp : textCharsRegExp, function (chr) {
+				return text.replace(attr ? attrsCharsRegExp : textCharsRegExp, function(chr) {
                         return baseEntities[chr] || entities[chr] || '&#' + chr.charCodeAt(0) + ';' || chr;
                     });
                 }
@@ -4499,8 +4497,8 @@
              * @param {String} text Text to entity decode.
              * @return {String} Entity decoded string.
              */
-            decode: function (text) {
-                return text.replace(entityRegExp, function (all, numeric) {
+		decode: function(text) {
+			return text.replace(entityRegExp, function(all, numeric) {
                     if (numeric) {
                         if (numeric.charAt(0).toLowerCase() === 'x') {
                             numeric = parseInt(numeric.substr(1), 16);
@@ -4524,11 +4522,11 @@
         };
 
         return Entities;
-    });
+});
 
 // Included from: js/tinymce/classes/dom/StyleSheetLoader.js
 
-    /**
+/**
      * StyleSheetLoader.js
      *
      * Released under LGPL License.
@@ -4538,18 +4536,18 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This class handles loading of external stylesheets and fires events when these are loaded.
      *
      * @class tinymce.dom.StyleSheetLoader
      * @private
      */
-    define("tinymce/dom/StyleSheetLoader", [
+define("tinymce/dom/StyleSheetLoader", [
         "tinymce/util/Tools"
-    ], function (Tools) {
+], function(Tools) {
         "use strict";
 
-        return function (document, settings) {
+	return function(document, settings) {
             var idCount = 0, loadedStates = {}, maxLoadTime;
 
             settings = settings || {};
@@ -4615,7 +4613,7 @@
                 // Workaround for WebKit that doesn't properly support the onload event for link elements
                 // Or WebKit that fires the onload event before the StyleSheet is added to the document
                 function waitForWebKitLinkLoaded() {
-                    wait(function () {
+				wait(function() {
                         var styleSheets = document.styleSheets, styleSheet, i = styleSheets.length, owner;
 
                         while (i--) {
@@ -4631,7 +4629,7 @@
 
                 // Workaround for older Geckos that doesn't have any onload event for StyleSheets
                 function waitForGeckoLinkLoaded() {
-                    wait(function () {
+				wait(function() {
                         try {
                             // Accessing the cssRules will throw an exception until the CSS file is loaded
                             var cssRules = style.sheet.cssRules;
@@ -4716,11 +4714,11 @@
 
             this.load = load;
         };
-    });
+});
 
 // Included from: js/tinymce/classes/dom/DOMUtils.js
 
-    /**
+/**
      * DOMUtils.js
      *
      * Released under LGPL License.
@@ -4730,7 +4728,7 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * Utility class for various DOM manipulation and retrieval functions.
      *
      * @class tinymce.dom.DOMUtils
@@ -4741,7 +4739,7 @@
      * // Add a class to an element by id inside the editor
      * tinymce.activeEditor.dom.addClass('someid', 'someclass');
      */
-    define("tinymce/dom/DOMUtils", [
+define("tinymce/dom/DOMUtils", [
         "tinymce/dom/Sizzle",
         "tinymce/dom/DomQuery",
         "tinymce/html/Styles",
@@ -4752,7 +4750,7 @@
         "tinymce/Env",
         "tinymce/util/Tools",
         "tinymce/dom/StyleSheetLoader"
-    ], function (Sizzle, $, Styles, EventUtils, TreeWalker, Range, Entities, Env, Tools, StyleSheetLoader) {
+], function(Sizzle, $, Styles, EventUtils, TreeWalker, Range, Entities, Env, Tools, StyleSheetLoader) {
         // Shorten names
         var each = Tools.each, is = Tools.is, grep = Tools.grep, trim = Tools.trim;
         var isIE = Env.ie;
@@ -4763,7 +4761,7 @@
             var attrHooks = {}, keepValues = settings.keep_values, keepUrlHook;
 
             keepUrlHook = {
-                set: function ($elm, value, name) {
+			set: function($elm, value, name) {
                     if (settings.url_converter) {
                         value = settings.url_converter.call(settings.url_converter_scope || domUtils, value, name, $elm[0]);
                     }
@@ -4771,14 +4769,14 @@
                     $elm.attr('data-mce-' + name, value).attr(name, value);
                 },
 
-                get: function ($elm, name) {
+			get: function($elm, name) {
                     return $elm.attr('data-mce-' + name) || $elm.attr(name);
                 }
             };
 
             attrHooks = {
                 style: {
-                    set: function ($elm, value) {
+				set: function($elm, value) {
                         if (value !== null && typeof value === 'object') {
                             $elm.css(value);
                             return;
@@ -4791,7 +4789,7 @@
                         $elm.attr('style', value);
                     },
 
-                    get: function ($elm) {
+				get: function($elm) {
                         var value = $elm.attr('data-mce-style') || $elm.attr('style');
 
                         value = domUtils.serializeStyle(domUtils.parseStyle(value), $elm[0].nodeName);
@@ -4871,7 +4869,7 @@
             self.events = settings.ownEvents ? new EventUtils(settings.proxy) : EventUtils.Event;
             self.attrHooks = setupAttrHooks(self, settings);
             blockElementsMap = settings.schema ? settings.schema.getBlockElements() : {};
-            self.$ = $.overrideDefaults(function () {
+		self.$ = $.overrideDefaults(function() {
                 return {
                     context: doc,
                     element: self.getRoot()
@@ -4885,7 +4883,7 @@
              * @param {Node/String} node Element/Node to check.
              * @return {Boolean} True/False state if the node is a block element or not.
              */
-            self.isBlock = function (node) {
+		self.isBlock = function(node) {
                 // Fix for #5446
                 if (!node) {
                     return false;
@@ -4904,7 +4902,7 @@
         }
 
         DOMUtils.prototype = {
-            $$: function (elm) {
+		$$: function(elm) {
                 if (typeof elm == 'string') {
                     elm = this.get(elm);
                 }
@@ -4914,7 +4912,7 @@
 
             root: null,
 
-            fixDoc: function (doc) {
+		fixDoc: function(doc) {
                 var settings = this.settings, name;
 
                 if (isIE && settings.schema) {
@@ -4923,7 +4921,7 @@
                     'details figcaption figure footer ' +
                     'header hgroup mark menu meter nav ' +
                     'output progress section summary ' +
-                    'time video').replace(/\w+/g, function (name) {
+				'time video').replace(/\w+/g, function(name) {
                             doc.createElement(name);
                         });
 
@@ -4934,7 +4932,7 @@
                 }
             },
 
-            clone: function (node, deep) {
+		clone: function(node, deep) {
                 var self = this, clone, doc;
 
                 // TODO: Add feature detection here in the future
@@ -4949,7 +4947,7 @@
                     clone = doc.createElement(node.nodeName);
 
                     // Copy attribs
-                    each(self.getAttribs(node), function (attr) {
+				each(self.getAttribs(node), function(attr) {
                         self.setAttrib(clone, attr.nodeName, self.getAttrib(node, attr.nodeName));
                     });
 
@@ -4966,7 +4964,7 @@
              * @method getRoot
              * @return {Element} Root element for the utility class.
              */
-            getRoot: function () {
+		getRoot: function() {
                 var self = this;
 
                 return self.settings.root_element || self.doc.body;
@@ -4979,7 +4977,7 @@
              * @param {Window} win Optional window to get viewport of.
              * @return {Object} Viewport object with fields x, y, w and h.
              */
-            getViewPort: function (win) {
+		getViewPort: function(win) {
                 var doc, rootElm;
 
                 win = !win ? this.win : win;
@@ -5002,7 +5000,7 @@
              * @param {Element/String} elm Element object or element ID to get rectangle from.
              * @return {object} Rectangle for specified element object with x, y, w, h fields.
              */
-            getRect: function (elm) {
+		getRect: function(elm) {
                 var self = this, pos, size;
 
                 elm = self.get(elm);
@@ -5022,7 +5020,7 @@
              * @param {Element/String} elm Element object or element ID to get rectangle from.
              * @return {object} Rectangle for specified element object with w, h fields.
              */
-            getSize: function (elm) {
+		getSize: function(elm) {
                 var self = this, w, h;
 
                 elm = self.get(elm);
@@ -5057,7 +5055,7 @@
              * @param {Node} root Optional root element, never go below this point.
              * @return {Node} DOM Node or null if it wasn't found.
              */
-            getParent: function (node, selector, root) {
+		getParent: function(node, selector, root) {
                 return this.getParents(node, selector, root, false);
             },
 
@@ -5071,7 +5069,7 @@
              * @param {Node} root Optional root element, never go below this point.
              * @return {Array} Array of nodes or null if it wasn't found.
              */
-            getParents: function (node, selector, root, collect) {
+		getParents: function(node, selector, root, collect) {
                 var self = this, selectorVal, result = [];
 
                 node = self.get(node);
@@ -5085,11 +5083,11 @@
                     selectorVal = selector;
 
                     if (selector === '*') {
-                        selector = function (node) {
+					selector = function(node) {
                             return node.nodeType == 1;
                         };
                     } else {
-                        selector = function (node) {
+					selector = function(node) {
                             return self.is(node, selectorVal);
                         };
                     }
@@ -5121,7 +5119,7 @@
              * @param {String/Element} n Element id to look for or element to just pass though.
              * @return {Element} Element matching the specified id or null if it wasn't found.
              */
-            get: function (elm) {
+		get: function(elm) {
                 var name;
 
                 if (elm && this.doc && typeof elm == 'string') {
@@ -5145,7 +5143,7 @@
              * @param {String/function} selector Selector CSS expression or function.
              * @return {Node} Next node item matching the selector or null if it wasn't found.
              */
-            getNext: function (node, selector) {
+		getNext: function(node, selector) {
                 return this._findSib(node, selector, 'nextSibling');
             },
 
@@ -5157,7 +5155,7 @@
              * @param {String/function} selector Selector CSS expression or function.
              * @return {Node} Previous node item matching the selector or null if it wasn't found.
              */
-            getPrev: function (node, selector) {
+		getPrev: function(node, selector) {
                 return this._findSib(node, selector, 'previousSibling');
             },
 
@@ -5179,7 +5177,7 @@
              * // Adds a class to all spans that have the test class in the currently active editor
              * tinymce.activeEditor.dom.addClass(tinymce.activeEditor.dom.select('span.test'), 'someclass')
              */
-            select: function (selector, scope) {
+		select: function(selector, scope) {
                 var self = this;
 
                 /*eslint new-cap:0 */
@@ -5193,7 +5191,7 @@
              * @param {Node/NodeList} elm DOM node to match or an array of nodes to match.
              * @param {String} selector CSS pattern to match the element against.
              */
-            is: function (elm, selector) {
+		is: function(elm, selector) {
                 var i;
 
                 // If it isn't an array then try to do some simple selectors instead of Sizzle for to boost performance
@@ -5245,10 +5243,10 @@
              * // Adds a new paragraph to the end of the active editor
              * tinymce.activeEditor.dom.add(tinymce.activeEditor.getBody(), 'p', {title: 'my title'}, 'Some content');
              */
-            add: function (parentElm, name, attrs, html, create) {
+		add: function(parentElm, name, attrs, html, create) {
                 var self = this;
 
-                return this.run(parentElm, function (parentElm) {
+			return this.run(parentElm, function(parentElm) {
                     var newElm;
 
                     newElm = is(name, 'string') ? self.doc.createElement(name) : name;
@@ -5279,7 +5277,7 @@
              * var el = tinymce.activeEditor.dom.create('div', {id: 'test', 'class': 'myclass'}, 'some content');
              * tinymce.activeEditor.selection.setNode(el);
              */
-            create: function (name, attrs, html) {
+		create: function(name, attrs, html) {
                 return this.add(this.doc.createElement(name), name, attrs, html, 1);
             },
 
@@ -5295,7 +5293,7 @@
              * // Creates a html chunk and inserts it at the current selection/caret location
              * tinymce.activeEditor.selection.setContent(tinymce.activeEditor.dom.createHTML('a', {href: 'test.html'}, 'some line'));
              */
-            createHTML: function (name, attrs, html) {
+		createHTML: function(name, attrs, html) {
                 var outHtml = '', key;
 
                 outHtml += '<' + name;
@@ -5321,7 +5319,7 @@
              * @param {String} html Html string to create fragment from.
              * @return {DocumentFragment} Document fragment node.
              */
-            createFragment: function (html) {
+		createFragment: function(html) {
                 var frag, node, doc = this.doc, container;
 
                 container = doc.createElement("div");
@@ -5354,11 +5352,11 @@
              * // Removes an element by id in the document
              * tinymce.DOM.remove('mydiv');
              */
-            remove: function (node, keepChildren) {
+		remove: function(node, keepChildren) {
                 node = this.$$(node);
 
                 if (keepChildren) {
-                    node.each(function () {
+				node.each(function() {
                         var child;
 
                         while ((child = this.firstChild)) {
@@ -5391,7 +5389,7 @@
              * // Sets a style value to an element by id in the current document
              * tinymce.DOM.setStyle('mydiv', 'background-color', 'red');
              */
-            setStyle: function (elm, name, value) {
+		setStyle: function(elm, name, value) {
                 elm = this.$$(elm).css(name, value);
 
                 if (this.settings.update_styles) {
@@ -5408,7 +5406,7 @@
              * @param {Boolean} computed Computed style.
              * @return {String} Current style or computed style value of an element.
              */
-            getStyle: function (elm, name, computed) {
+		getStyle: function(elm, name, computed) {
                 elm = this.$$(elm);
 
                 if (computed) {
@@ -5416,7 +5414,7 @@
                 }
 
                 // Camelcase it, if needed
-                name = name.replace(/-(\D)/g, function (a, b) {
+			name = name.replace(/-(\D)/g, function(a, b) {
                     return b.toUpperCase();
                 });
 
@@ -5440,7 +5438,7 @@
              * // Sets styles to an element by id in the current document
              * tinymce.DOM.setStyles('mydiv', {'background-color': 'red', 'color': 'green'});
              */
-            setStyles: function (elm, styles) {
+		setStyles: function(elm, styles) {
                 elm = this.$$(elm).css(styles);
 
                 if (this.settings.update_styles) {
@@ -5454,8 +5452,8 @@
              * @method removeAllAttribs
              * @param {Element/String/Array} e DOM element, element id string or array of elements/ids to remove attributes from.
              */
-            removeAllAttribs: function (e) {
-                return this.run(e, function (e) {
+		removeAllAttribs: function(e) {
+			return this.run(e, function(e) {
                     var i, attrs = e.attributes;
                     for (i = attrs.length - 1; i >= 0; i--) {
                         e.removeAttributeNode(attrs.item(i));
@@ -5477,7 +5475,7 @@
              * // Sets class attribute on a specific element in the current page
              * tinymce.dom.setAttrib('mydiv', 'class', 'myclass');
              */
-            setAttrib: function (elm, name, value) {
+		setAttrib: function(elm, name, value) {
                 var self = this, originalValue, hook, settings = self.settings;
 
                 if (value === '') {
@@ -5520,11 +5518,11 @@
              * // Sets class and title attributes on a specific element in the current page
              * tinymce.DOM.setAttribs('mydiv', {'class': 'myclass', title: 'some title'});
              */
-            setAttribs: function (elm, attrs) {
+		setAttribs: function(elm, attrs) {
                 var self = this;
 
-                self.$$(elm).each(function (i, node) {
-                    each(attrs, function (value, name) {
+			self.$$(elm).each(function(i, node) {
+				each(attrs, function(value, name) {
                         self.setAttrib(node, name, value);
                     });
                 });
@@ -5539,7 +5537,7 @@
              * @param {String} defaultVal Optional default value to return if the attribute didn't exist.
              * @return {String} Attribute value string, default value or null if the attribute wasn't found.
              */
-            getAttrib: function (elm, name, defaultVal) {
+		getAttrib: function(elm, name, defaultVal) {
                 var self = this, hook, value;
 
                 elm = self.$$(elm);
@@ -5569,7 +5567,7 @@
              * @param {Element} rootElm Optional root element to stop calculations at.
              * @return {object} Absolute position of the specified element object with x, y fields.
              */
-            getPos: function (elm, rootElm) {
+		getPos: function(elm, rootElm) {
                 var self = this, x = 0, y = 0, offsetParent, doc = self.doc, body = doc.body, pos;
 
                 elm = self.get(elm);
@@ -5617,7 +5615,7 @@
              * @param {String} cssText Style value to parse, for example: border:1px solid red;.
              * @return {Object} Object representation of that style, for example: {border: '1px solid red'}
              */
-            parseStyle: function (cssText) {
+		parseStyle: function(cssText) {
                 return this.styles.parse(cssText);
             },
 
@@ -5629,7 +5627,7 @@
              * @param {String} name Optional element name.
              * @return {String} String representation of the style object, for example: border: 1px solid red.
              */
-            serializeStyle: function (styles, name) {
+		serializeStyle: function(styles, name) {
                 return this.styles.serialize(styles, name);
             },
 
@@ -5639,7 +5637,7 @@
              * @method addStyle
              * @param {String} cssText CSS Text style to add to top of head of document.
              */
-            addStyle: function (cssText) {
+		addStyle: function(cssText) {
                 var self = this, doc = self.doc, head, styleElm;
 
                 // Prevent inline from loading the same styles twice
@@ -5696,7 +5694,7 @@
              * // Loads multiple CSS files into the current document
              * tinymce.DOM.loadCSS('somepath/some.css,somepath/someother.css');
              */
-            loadCSS: function (url) {
+		loadCSS: function(url) {
                 var self = this, doc = self.doc, head;
 
                 // Prevent inline from loading the same CSS file twice
@@ -5711,7 +5709,7 @@
 
                 head = doc.getElementsByTagName('head')[0];
 
-                each(url.split(','), function (url) {
+			each(url.split(','), function(url) {
                     var link;
 
                     url = Tools._addCacheSuffix(url);
@@ -5727,7 +5725,7 @@
                     // This fix seems to resolve that issue by recalcing the document once a stylesheet finishes loading
                     // It's ugly but it seems to work fine.
                     if (isIE && doc.documentMode && doc.recalc) {
-                        link.onload = function () {
+					link.onload = function() {
                             if (doc.recalc) {
                                 doc.recalc();
                             }
@@ -5754,7 +5752,7 @@
              * // Adds a class to a specific element in the current page
              * tinymce.DOM.addClass('mydiv', 'myclass');
              */
-            addClass: function (elm, cls) {
+		addClass: function(elm, cls) {
                 this.$$(elm).addClass(cls);
             },
 
@@ -5773,7 +5771,7 @@
              * // Removes a class from a specific element in the current page
              * tinymce.DOM.removeClass('mydiv', 'myclass');
              */
-            removeClass: function (elm, cls) {
+		removeClass: function(elm, cls) {
                 this.toggleClass(elm, cls, false);
             },
 
@@ -5785,7 +5783,7 @@
              * @param {String} c CSS class to check for.
              * @return {Boolean} true/false if the specified element has the specified class.
              */
-            hasClass: function (elm, cls) {
+		hasClass: function(elm, cls) {
                 return this.$$(elm).hasClass(cls);
             },
 
@@ -5797,8 +5795,8 @@
              * @param {[type]} cls Class to toggle on/off.
              * @param {[type]} state Optional state to set.
              */
-            toggleClass: function (elm, cls, state) {
-                this.$$(elm).toggleClass(cls, state).each(function () {
+		toggleClass: function(elm, cls, state) {
+			this.$$(elm).toggleClass(cls, state).each(function() {
                     if (this.className === '') {
                         $(this).attr('class', null);
                     }
@@ -5811,7 +5809,7 @@
              * @method show
              * @param {String/Element/Array} elm ID of DOM element or DOM element or array with elements or IDs to show.
              */
-            show: function (elm) {
+		show: function(elm) {
                 this.$$(elm).show();
             },
 
@@ -5824,7 +5822,7 @@
              * // Hides an element by id in the document
              * tinymce.DOM.hide('myid');
              */
-            hide: function (elm) {
+		hide: function(elm) {
                 this.$$(elm).hide();
             },
 
@@ -5835,7 +5833,7 @@
              * @param {String/Element} e Id or element to check display state on.
              * @return {Boolean} true/false if the element is hidden or not.
              */
-            isHidden: function (elm) {
+		isHidden: function(elm) {
                 return this.$$(elm).css('display') == 'none';
             },
 
@@ -5847,7 +5845,7 @@
              * @param {String} prefix Optional prefix to add in front of all ids - defaults to "mce_".
              * @return {String} Unique id.
              */
-            uniqueId: function (prefix) {
+		uniqueId: function(prefix) {
                 return (!prefix ? 'mce_' : prefix) + (this.counter++);
             },
 
@@ -5865,11 +5863,11 @@
              * // Sets the inner HTML of an element by id in the document
              * tinymce.DOM.setHTML('mydiv', 'some inner html');
              */
-            setHTML: function (elm, html) {
+		setHTML: function(elm, html) {
                 elm = this.$$(elm);
 
                 if (isIE) {
-                    elm.each(function (i, target) {
+				elm.each(function(i, target) {
                         if (target.canHaveHTML === false) {
                             return;
                         }
@@ -5906,7 +5904,7 @@
              * tinymce.DOM.getOuterHTML(editorElement);
              * tinymce.activeEditor.getOuterHTML(tinymce.activeEditor.getBody());
              */
-            getOuterHTML: function (elm) {
+		getOuterHTML: function(elm) {
                 elm = this.get(elm);
 
                 // Older FF doesn't have outerHTML 3.6 is still used by some orgaizations
@@ -5927,10 +5925,10 @@
              * // Sets the outer HTML of an element by id in the document
              * tinymce.DOM.setOuterHTML('mydiv', '<div>some html</div>');
              */
-            setOuterHTML: function (elm, html) {
+		setOuterHTML: function(elm, html) {
                 var self = this;
 
-                self.$$(elm).each(function () {
+			self.$$(elm).each(function() {
                     try {
                         // Older FF doesn't have outerHTML 3.6 is still used by some orgaizations
                         if ("outerHTML" in this) {
@@ -5972,10 +5970,10 @@
              * @param {Element/String/Array} reference_node Reference element, element id or array of elements to insert after.
              * @return {Element/Array} Element that got added or an array with elements.
              */
-            insertAfter: function (node, referenceNode) {
+		insertAfter: function(node, referenceNode) {
                 referenceNode = this.get(referenceNode);
 
-                return this.run(node, function (node) {
+			return this.run(node, function(node) {
                     var parent, nextSibling;
 
                     parent = referenceNode.parentNode;
@@ -6000,16 +5998,16 @@
              * @param {Element/String/Array} oldELm Element DOM node, element id or array of elements or ids to replace.
              * @param {Boolean} k Optional keep children state, if set to true child nodes from the old object will be added to new ones.
              */
-            replace: function (newElm, oldElm, keepChildren) {
+		replace: function(newElm, oldElm, keepChildren) {
                 var self = this;
 
-                return self.run(oldElm, function (oldElm) {
+			return self.run(oldElm, function(oldElm) {
                     if (is(oldElm, 'array')) {
                         newElm = newElm.cloneNode(true);
                     }
 
                     if (keepChildren) {
-                        each(grep(oldElm.childNodes), function (node) {
+					each(grep(oldElm.childNodes), function(node) {
                             newElm.appendChild(node);
                         });
                     }
@@ -6026,7 +6024,7 @@
              * @param {String} name Name of the new element.
              * @return {Element} New element or the old element if it needed renaming.
              */
-            rename: function (elm, name) {
+		rename: function(elm, name) {
                 var self = this, newElm;
 
                 if (elm.nodeName != name.toUpperCase()) {
@@ -6034,7 +6032,7 @@
                     newElm = self.create(name);
 
                     // Copy attribs to new block
-                    each(self.getAttribs(elm), function (attrNode) {
+				each(self.getAttribs(elm), function(attrNode) {
                         self.setAttrib(newElm, attrNode.nodeName, self.getAttrib(elm, attrNode.nodeName));
                     });
 
@@ -6053,7 +6051,7 @@
              * @param {Element} b Element to find common ancestor of.
              * @return {Element} Common ancestor element of the two input elements.
              */
-            findCommonAncestor: function (a, b) {
+		findCommonAncestor: function(a, b) {
                 var ps = a, pe;
 
                 while (ps) {
@@ -6084,7 +6082,7 @@
              * @param {String} rgbVal RGB string value like rgb(1,2,3)
              * @return {String} Hex version of that RGB value like #FF00FF.
              */
-            toHex: function (rgbVal) {
+		toHex: function(rgbVal) {
                 return this.styles.toHex(Tools.trim(rgbVal));
             },
 
@@ -6097,7 +6095,7 @@
              * @param {Object} s Optional scope to execute the function in.
              * @return {Object/Array} Single object, or an array of objects if multiple input elements were passed in.
              */
-            run: function (elm, func, scope) {
+		run: function(elm, func, scope) {
                 var self = this, result;
 
                 if (typeof elm === 'string') {
@@ -6112,7 +6110,7 @@
                 if (!elm.nodeType && (elm.length || elm.length === 0)) {
                     result = [];
 
-                    each(elm, function (elm, i) {
+				each(elm, function(elm, i) {
                         if (elm) {
                             if (typeof elm == 'string') {
                                 elm = self.get(elm);
@@ -6135,7 +6133,7 @@
              * @param {HTMLElement/string} elm Element node or string id to get attributes from.
              * @return {NodeList} NodeList with attributes.
              */
-            getAttribs: function (elm) {
+		getAttribs: function(elm) {
                 var attrs;
 
                 elm = this.get(elm);
@@ -6159,7 +6157,7 @@
 
                     // It's crazy that this is faster in IE but it's because it returns all attributes all the time
                     var attrRegExp = /<\/?[\w:\-]+ ?|=[\"][^\"]+\"|=\'[^\']+\'|=[\w\-]+|>/gi;
-                    elm.cloneNode(false).outerHTML.replace(attrRegExp, '').replace(/[\w:\-]+/gi, function (a) {
+				elm.cloneNode(false).outerHTML.replace(attrRegExp, '').replace(/[\w:\-]+/gi, function(a) {
                         attrs.push({specified: 1, nodeName: a});
                     });
 
@@ -6178,7 +6176,7 @@
              * @param {Object} elements Optional name/value object with elements that are automatically treated as non-empty elements.
              * @return {Boolean} true/false if the node is empty or not.
              */
-            isEmpty: function (node, elements) {
+		isEmpty: function(node, elements) {
                 var self = this, i, attributes, type, walker, name, brCount = 0;
 
                 node = node.firstChild;
@@ -6243,7 +6241,7 @@
              * var rng = tinymce.DOM.createRng();
              * alert(rng.startContainer + "," + rng.startOffset);
              */
-            createRng: function () {
+		createRng: function() {
                 var doc = this.doc;
 
                 return doc.createRange ? doc.createRange() : new Range(this);
@@ -6270,7 +6268,7 @@
              * @param {Element} replacementElm Optional replacement element to replace the split element with.
              * @return {Element} Returns the split element or the replacement element if that is specified.
              */
-            split: function (parentElm, splitElm, replacementElm) {
+		split: function(parentElm, splitElm, replacementElm) {
                 var self = this, r = self.createRng(), bef, aft, pa;
 
                 // W3C valid browsers tend to leave empty nodes to the left/right side of the contents - this makes sense
@@ -6372,7 +6370,7 @@
              * @param {Object} scope Optional scope to execute the function in.
              * @return {function} Function callback handler the same as the one passed in.
              */
-            bind: function (target, name, func, scope) {
+		bind: function(target, name, func, scope) {
                 var self = this;
 
                 if (Tools.isArray(target)) {
@@ -6403,7 +6401,7 @@
              * @return {bool/Array} Bool state of true if the handler was removed, or an array of states if multiple input elements
              * were passed in.
              */
-            unbind: function (target, name, func) {
+		unbind: function(target, name, func) {
                 var self = this, i;
 
                 if (Tools.isArray(target)) {
@@ -6441,12 +6439,12 @@
              * @param {Object} evt Event object to send.
              * @return {Event} Event object.
              */
-            fire: function (target, name, evt) {
+		fire: function(target, name, evt) {
                 return this.events.fire(target, name, evt);
             },
 
             // Returns the content editable state of a node
-            getContentEditable: function (node) {
+		getContentEditable: function(node) {
                 var contentEditable;
 
                 // Check type
@@ -6464,7 +6462,7 @@
                 return node.contentEditable !== "inherit" ? node.contentEditable : null;
             },
 
-            getContentEditableParent: function (node) {
+		getContentEditableParent: function(node) {
                 var root = this.getRoot(), state = null;
 
                 for (; node && node !== root; node = node.parentNode) {
@@ -6483,7 +6481,7 @@
              *
              * @method destroy
              */
-            destroy: function () {
+		destroy: function() {
                 var self = this;
 
                 // Unbind all events bound to window/document by editor instance
@@ -6507,7 +6505,7 @@
                 self.win = self.doc = self.root = self.events = self.frag = null;
             },
 
-            isChildOf: function (node, parent) {
+		isChildOf: function(node, parent) {
                 while (node) {
                     if (parent === node) {
                         return true;
@@ -6521,7 +6519,7 @@
 
             // #ifdef debug
 
-            dumpRng: function (r) {
+		dumpRng: function(r) {
                 return (
                     'startContainer: ' + r.startContainer.nodeName +
                     ', startOffset: ' + r.startOffset +
@@ -6532,13 +6530,13 @@
 
             // #endif
 
-            _findSib: function (node, selector, name) {
+		_findSib: function(node, selector, name) {
                 var self = this, func = selector;
 
                 if (node) {
                     // If expression make a function of it using is
                     if (typeof func == 'string') {
-                        func = function (node) {
+					func = function(node) {
                             return self.is(node, selector);
                         };
                     }
@@ -6569,11 +6567,11 @@
         DOMUtils.nodeIndex = nodeIndex;
 
         return DOMUtils;
-    });
+});
 
 // Included from: js/tinymce/classes/dom/ScriptLoader.js
 
-    /**
+/**
      * ScriptLoader.js
      *
      * Released under LGPL License.
@@ -6583,9 +6581,9 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /*globals console*/
+/*globals console*/
 
-    /**
+/**
      * This class handles asynchronous/synchronous loading of JavaScript files it will execute callbacks
      * when various items gets loaded. This class is useful to load external JavaScript files.
      *
@@ -6610,10 +6608,10 @@
  *    alert('All scripts are now loaded.');
  * });
      */
-    define("tinymce/dom/ScriptLoader", [
+define("tinymce/dom/ScriptLoader", [
         "tinymce/dom/DOMUtils",
         "tinymce/util/Tools"
-    ], function (DOMUtils, Tools) {
+], function(DOMUtils, Tools) {
         var DOM = DOMUtils.DOM;
         var each = Tools.each, grep = Tools.grep;
 
@@ -6674,7 +6672,7 @@
 
                 // Seems that onreadystatechange works better on IE 10 onload seems to fire incorrectly
                 if ("onreadystatechange" in elm) {
-                    elm.onreadystatechange = function () {
+				elm.onreadystatechange = function() {
                         if (/loaded|complete/.test(elm.readyState)) {
                             done();
                         }
@@ -6697,7 +6695,7 @@
              * @param {String} url URL to check for.
              * @return {Boolean} true/false if the URL is loaded.
              */
-            this.isDone = function (url) {
+		this.isDone = function(url) {
                 return states[url] == LOADED;
             };
 
@@ -6708,7 +6706,7 @@
              * @method markDone
              * @param {string} u Absolute URL to the script to mark as loaded.
              */
-            this.markDone = function (url) {
+		this.markDone = function(url) {
                 states[url] = LOADED;
             };
 
@@ -6720,7 +6718,7 @@
              * @param {function} callback Optional callback function to execute ones this script gets loaded.
              * @param {Object} scope Optional scope to execute callback in.
              */
-            this.add = this.load = function (url, callback, scope) {
+		this.add = this.load = function(url, callback, scope) {
                 var state = states[url];
 
                 // Add url to load queue
@@ -6749,7 +6747,7 @@
              * @param {function} callback Optional callback to execute when all queued items are loaded.
              * @param {Object} scope Optional scope to execute the callback in.
              */
-            this.loadQueue = function (callback, scope) {
+		this.loadQueue = function(callback, scope) {
                 this.loadScripts(queue, callback, scope);
             };
 
@@ -6762,12 +6760,12 @@
              * @param {function} callback Optional callback to execute ones all items are loaded.
              * @param {Object} scope Optional scope to execute callback in.
              */
-            this.loadScripts = function (scripts, callback, scope) {
+		this.loadScripts = function(scripts, callback, scope) {
                 var loadScripts;
 
                 function execScriptLoadedCallbacks(url) {
                     // Execute URL callback functions
-                    each(scriptLoadedCallbacks[url], function (callback) {
+				each(scriptLoadedCallbacks[url], function(callback) {
                         callback.func.call(callback.scope);
                     });
 
@@ -6779,14 +6777,14 @@
                     scope: scope || this
                 });
 
-                loadScripts = function () {
+			loadScripts = function() {
                     var loadingScripts = grep(scripts);
 
                     // Current scripts has been handled
                     scripts.length = 0;
 
                     // Load scripts that needs to be loaded
-                    each(loadingScripts, function (url) {
+				each(loadingScripts, function(url) {
                         // Script is already loaded then execute script callbacks directly
                         if (states[url] == LOADED) {
                             execScriptLoadedCallbacks(url);
@@ -6798,7 +6796,7 @@
                             states[url] = LOADING;
                             loading++;
 
-                            loadScript(url, function () {
+						loadScript(url, function() {
                                 states[url] = LOADED;
                                 loading--;
 
@@ -6812,7 +6810,7 @@
 
                     // No scripts are currently loading then execute all pending queue loaded callbacks
                     if (!loading) {
-                        each(queueLoadedCallbacks, function (callback) {
+					each(queueLoadedCallbacks, function(callback) {
                             callback.func.call(callback.scope);
                         });
 
@@ -6827,11 +6825,11 @@
         ScriptLoader.ScriptLoader = new ScriptLoader();
 
         return ScriptLoader;
-    });
+});
 
 // Included from: js/tinymce/classes/AddOnManager.js
 
-    /**
+/**
      * AddOnManager.js
      *
      * Released under LGPL License.
@@ -6841,15 +6839,15 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This class handles the loading of themes/plugins or other add-ons and their language packs.
      *
      * @class tinymce.AddOnManager
      */
-    define("tinymce/AddOnManager", [
+define("tinymce/AddOnManager", [
         "tinymce/dom/ScriptLoader",
         "tinymce/util/Tools"
-    ], function (ScriptLoader, Tools) {
+], function(ScriptLoader, Tools) {
         var each = Tools.each;
 
         function AddOnManager() {
@@ -6868,7 +6866,7 @@
              * @param {String} name Add-on to look for.
              * @return {tinymce.Theme/tinymce.Plugin} Theme or plugin add-on instance or undefined.
              */
-            get: function (name) {
+		get: function(name) {
                 if (this.lookup[name]) {
                     return this.lookup[name].instance;
                 }
@@ -6876,7 +6874,7 @@
                 return undefined;
             },
 
-            dependencies: function (name) {
+		dependencies: function(name) {
                 var result;
 
                 if (this.lookup[name]) {
@@ -6893,7 +6891,7 @@
              * @param {String} name Short name of the add-on.
              * @param {String} languages Optional comma or space separated list of languages to check if it matches the name.
              */
-            requireLangPack: function (name, languages) {
+		requireLangPack: function(name, languages) {
                 var language = AddOnManager.language;
 
                 if (language && AddOnManager.languageLoad !== false) {
@@ -6938,14 +6936,14 @@
 		 *  plugins: '-test' // Init the plugin but don't try to load it
 		 * });
              */
-            add: function (id, addOn, dependencies) {
+		add: function(id, addOn, dependencies) {
                 this.items.push(addOn);
                 this.lookup[id] = {instance: addOn, dependencies: dependencies};
 
                 return addOn;
             },
 
-            createUrl: function (baseUrl, dep) {
+		createUrl: function(baseUrl, dep) {
                 if (typeof dep === "object") {
                     return dep;
                 }
@@ -6962,10 +6960,10 @@
              * @param {String} pluginName name of the plugin to load scripts from (will be used to get the base url for the plugins).
              * @param {Array} scripts Array containing the names of the scripts to load.
              */
-            addComponents: function (pluginName, scripts) {
+		addComponents: function(pluginName, scripts) {
                 var pluginUrl = this.urls[pluginName];
 
-                each(scripts, function (script) {
+			each(scripts, function(script) {
                     ScriptLoader.ScriptLoader.add(pluginUrl + "/" + script);
                 });
             },
@@ -6988,13 +6986,13 @@
 		 *  plugins: '-myplugin' // Don't try to load it again
 		 * });
              */
-            load: function (name, addOnUrl, callback, scope) {
+		load: function(name, addOnUrl, callback, scope) {
                 var self = this, url = addOnUrl;
 
                 function loadDependencies() {
                     var dependencies = self.dependencies(name);
 
-                    each(dependencies, function (dep) {
+				each(dependencies, function(dep) {
                         var newUrl = self.createUrl(addOnUrl, dep);
 
                         self.load(newUrl.resource, newUrl, undefined, undefined);
@@ -7035,15 +7033,15 @@
         AddOnManager.ThemeManager = new AddOnManager();
 
         return AddOnManager;
-    });
+});
 
-    /**
+/**
      * TinyMCE theme class.
      *
      * @class tinymce.Theme
      */
 
-    /**
+/**
      * This method is responsible for rendering/generating the overall user interface with toolbars, buttons, iframe containers etc.
      *
      * @method renderUI
@@ -7051,7 +7049,7 @@
      * @return {Object} an object with items like iframeContainer, editorContainer, sizeContainer, deltaWidth, deltaHeight.
      */
 
-    /**
+/**
      * Plugin base class, this is a pseudo class that describes how a plugin is to be created for TinyMCE. The methods below are all optional.
      *
      * @class tinymce.Plugin
@@ -7099,7 +7097,7 @@
 
 // Included from: js/tinymce/classes/dom/RangeUtils.js
 
-    /**
+/**
      * RangeUtils.js
      *
      * Released under LGPL License.
@@ -7109,15 +7107,15 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This class contains a few utility methods for ranges.
      *
      * @class tinymce.dom.RangeUtils
      */
-    define("tinymce/dom/RangeUtils", [
+define("tinymce/dom/RangeUtils", [
         "tinymce/util/Tools",
         "tinymce/dom/TreeWalker"
-    ], function (Tools, TreeWalker) {
+], function(Tools, TreeWalker) {
         var each = Tools.each;
 
         function getEndChild(container, index) {
@@ -7143,7 +7141,7 @@
              * @param {Object} rng Range like object.
              * @param {function} callback Callback function to execute for each sibling collection.
              */
-            this.walk = function (rng, callback) {
+		this.walk = function(rng, callback) {
                 var startContainer = rng.startContainer,
                     startOffset = rng.startOffset,
                     endContainer = rng.endContainer,
@@ -7155,7 +7153,7 @@
                 // you to fake select table cells and perform formatting actions on them
                 nodes = dom.select('td.mce-item-selected,th.mce-item-selected');
                 if (nodes.length > 0) {
-                    each(nodes, function (node) {
+				each(nodes, function(node) {
                         callback([node]);
                     });
 
@@ -7309,7 +7307,7 @@
              * @param {Range/RangeObject} rng Range to split.
              * @return {Object} Range position object.
              */
-            this.split = function (rng) {
+		this.split = function(rng) {
                 var startContainer = rng.startContainer,
                     startOffset = rng.startOffset,
                     endContainer = rng.endContainer,
@@ -7363,7 +7361,7 @@
              * @param {Range} rng Range to normalize.
              * @return {Boolean} True/false if the specified range was normalized or not.
              */
-            this.normalize = function (rng) {
+		this.normalize = function(rng) {
                 var normalized, collapsed;
 
                 function normalizeEndPoint(start) {
@@ -7527,7 +7525,8 @@
                                 node = container.childNodes[offset - 1];
                             }
 
-                            if (node && node.nodeName === 'BR' && !isPrevNode(node, 'A') && !hasBrBeforeAfter(node) && !hasBrBeforeAfter(node, true)) {
+						if (node && node.nodeName === 'BR' && !isPrevNode(node, 'A') &&
+							!hasBrBeforeAfter(node) && !hasBrBeforeAfter(node, true)) {
                                 findTextNodeRelative(true, node);
                             }
                         }
@@ -7572,7 +7571,7 @@
          * @param {DOMRange} rng2 First range to compare.
          * @return {Boolean} true/false if the ranges are equal.
          */
-        RangeUtils.compareRanges = function (rng1, rng2) {
+	RangeUtils.compareRanges = function(rng1, rng2) {
             if (rng1 && rng2) {
                 // Compare native IE ranges
                 if (rng1.item || rng1.duplicate) {
@@ -7604,7 +7603,7 @@
          * @param {Document} doc Document that x/y are relative to
          * @returns {Range} caret range
          */
-        RangeUtils.getCaretRangeFromPoint = function (x, y, doc) {
+	RangeUtils.getCaretRangeFromPoint = function(x, y, doc) {
             var rng, point;
 
             if (doc.caretPositionFromPoint) {
@@ -7629,7 +7628,7 @@
             return rng;
         };
 
-        RangeUtils.getNode = function (container, offset) {
+	RangeUtils.getNode = function(container, offset) {
             if (container.nodeType == 1 && container.hasChildNodes()) {
                 if (offset >= container.childNodes.length) {
                     offset = container.childNodes.length - 1;
@@ -7642,11 +7641,11 @@
         };
 
         return RangeUtils;
-    });
+});
 
 // Included from: js/tinymce/classes/NodeChange.js
 
-    /**
+/**
      * NodeChange.js
      *
      * Released under LGPL License.
@@ -7656,17 +7655,17 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This class handles the nodechange event dispatching both manual and through selection change events.
      *
      * @class tinymce.NodeChange
      * @private
      */
-    define("tinymce/NodeChange", [
+define("tinymce/NodeChange", [
         "tinymce/dom/RangeUtils",
         "tinymce/Env"
-    ], function (RangeUtils, Env) {
-        return function (editor) {
+], function(RangeUtils, Env) {
+	return function(editor) {
             var lastRng, lastPath = [];
 
             /**
@@ -7699,7 +7698,7 @@
 
             // Gecko doesn't support the "selectionchange" event
             if (!('onselectionchange' in editor.getDoc())) {
-                editor.on('NodeChange Click MouseUp KeyUp Focus', function (e) {
+			editor.on('NodeChange Click MouseUp KeyUp Focus', function(e) {
                     var nativeRng, fakeRng;
 
                     // Since DOM Ranges mutate on modification
@@ -7724,12 +7723,12 @@
 
             // IE has a bug where it fires a selectionchange on right click that has a range at the start of the body
             // When the contextmenu event fires the selection is located at the right location
-            editor.on('contextmenu', function () {
+		editor.on('contextmenu', function() {
                 editor.fire('SelectionChange');
             });
 
             // Selection change is delayed ~200ms on IE when you click inside the current range
-            editor.on('SelectionChange', function () {
+		editor.on('SelectionChange', function() {
                 var startElm = editor.selection.getStart(true);
 
                 // IE 8 will fire a selectionchange event with an incorrect selection
@@ -7744,12 +7743,12 @@
             });
 
             // Fire an extra nodeChange on mouseup for compatibility reasons
-            editor.on('MouseUp', function (e) {
+		editor.on('MouseUp', function(e) {
                 if (!e.isDefaultPrevented()) {
                     // Delay nodeChanged call for WebKit edge case issue where the range
                     // isn't updated until after you click outside a selected image
                     if (editor.selection.getNode().nodeName == 'IMG') {
-                        setTimeout(function () {
+					setTimeout(function() {
                             editor.nodeChanged();
                         }, 0);
                     } else {
@@ -7765,7 +7764,7 @@
              * @method nodeChanged
              * @param {Object} args Optional args to pass to NodeChange event handlers.
              */
-            this.nodeChanged = function (args) {
+		this.nodeChanged = function(args) {
                 var selection = editor.selection, node, parents, root;
 
                 // Fix for bug #1896577 it seems that this can not be fired while the editor is loading
@@ -7775,10 +7774,6 @@
                     node = selection.getStart() || root;
                     node = node.ownerDocument != editor.getDoc() ? editor.getBody() : node;
 
-                    if (node.nodeName == 'IMAGE-GALLERY-IMG'  || node.nodeName == 'IMAGE-GALLERY-TITLE') {
-                        node = node.parentNode;
-                    }
-
                     // Edge case for <p>|<img></p>
                     if (node.nodeName == 'IMG' && selection.isCollapsed()) {
                         node = node.parentNode;
@@ -7786,7 +7781,7 @@
 
                     // Get parents and add them to object
                     parents = [];
-                    editor.dom.getParent(node, function (node) {
+				editor.dom.getParent(node, function(node) {
                         if (node === root) {
                             return true;
                         }
@@ -7802,11 +7797,11 @@
                 }
             };
         };
-    });
+});
 
 // Included from: js/tinymce/classes/html/Node.js
 
-    /**
+/**
      * Node.js
      *
      * Released under LGPL License.
@@ -7816,7 +7811,7 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This class is a minimalistic implementation of a DOM like node used by the DomParser class.
      *
      * @example
@@ -7826,7 +7821,7 @@
      * @class tinymce.html.Node
      * @version 3.4
      */
-    define("tinymce/html/Node", [], function () {
+define("tinymce/html/Node", [], function() {
         var whiteSpaceRegExp = /^[ \t\r\n]*$/, typeLookup = {
             '#text': 3,
             '#comment': 8,
@@ -7893,7 +7888,7 @@
              * @param {tinymce.html.Node} node Node to replace the current node with.
              * @return {tinymce.html.Node} The old node that got replaced.
              */
-            replace: function (node) {
+		replace: function(node) {
                 var self = this;
 
                 if (node.parent) {
@@ -7919,7 +7914,7 @@
              * @param {String} value Optional value to set.
              * @return {String/tinymce.html.Node} String or undefined on a get operation or the current node on a set operation.
              */
-            attr: function (name, value) {
+		attr: function(name, value) {
                 var self = this, attrs, i, undef;
 
                 if (typeof name !== "string") {
@@ -7982,7 +7977,7 @@
              * @method clone
              * @return {tinymce.html.Node} New copy of the original node.
              */
-            clone: function () {
+		clone: function() {
                 var self = this, clone = new Node(self.name, self.type), i, l, selfAttrs, selfAttr, cloneAttrs;
 
                 // Clone element attributes
@@ -8017,7 +8012,7 @@
              *
              * @method wrap
              */
-            wrap: function (wrapper) {
+		wrap: function(wrapper) {
                 var self = this;
 
                 self.parent.insert(wrapper, self);
@@ -8034,7 +8029,7 @@
              *
              * @method unwrap
              */
-            unwrap: function () {
+		unwrap: function() {
                 var self = this, node, next;
 
                 for (node = self.firstChild; node;) {
@@ -8055,7 +8050,7 @@
              * @method remove
              * @return {tinymce.html.Node} Current node that got removed.
              */
-            remove: function () {
+		remove: function() {
                 var self = this, parent = self.parent, next = self.next, prev = self.prev;
 
                 if (parent) {
@@ -8095,7 +8090,7 @@
              * @param {tinymce.html.Node} node Node to append as a child of the current one.
              * @return {tinymce.html.Node} The node that got appended.
              */
-            append: function (node) {
+		append: function(node) {
                 var self = this, last;
 
                 if (node.parent) {
@@ -8128,7 +8123,7 @@
              * @param {Boolean} before Optional state to insert the node before the reference node.
              * @return {tinymce.html.Node} The node that got inserted.
              */
-            insert: function (node, ref_node, before) {
+		insert: function(node, ref_node, before) {
                 var parent;
 
                 if (node.parent) {
@@ -8171,7 +8166,7 @@
              * @param {String} name Name of the child nodes to collect.
              * @return {Array} Array with child nodes matchin the specified name.
              */
-            getAll: function (name) {
+		getAll: function(name) {
                 var self = this, node, collection = [];
 
                 for (node = self.firstChild; node; node = walk(node, self)) {
@@ -8189,7 +8184,7 @@
              * @method empty
              * @return {tinymce.html.Node} The current node that got cleared.
              */
-            empty: function () {
+		empty: function() {
                 var self = this, nodes, i, node;
 
                 // Remove all children
@@ -8223,7 +8218,7 @@
              * @param {Object} elements Name/value object with elements that are automatically treated as non empty elements.
              * @return {Boolean} true/false if the node is empty or not.
              */
-            isEmpty: function (elements) {
+		isEmpty: function(elements) {
                 var self = this, node = self.firstChild, i, name;
 
                 if (node) {
@@ -8271,7 +8266,7 @@
              * @param {Boolean} prev Optional previous node state defaults to false.
              * @return {tinymce.html.Node} Node that is next to or previous of the current node.
              */
-            walk: function (prev) {
+		walk: function(prev) {
                 return walk(this, null, prev);
             }
         };
@@ -8284,7 +8279,7 @@
          * @param {String} name Name of the node type to create for example "b" or "#text".
          * @param {Object} attrs Name/value collection of attributes that will be applied to elements.
          */
-        Node.create = function (name, attrs) {
+	Node.create = function(name, attrs) {
             var node, attrName;
 
             // Create node
@@ -8301,11 +8296,11 @@
         };
 
         return Node;
-    });
+});
 
 // Included from: js/tinymce/classes/html/Schema.js
 
-    /**
+/**
      * Schema.js
      *
      * Released under LGPL License.
@@ -8315,7 +8310,7 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * Schema validator class.
      *
      * @class tinymce.html.Schema
@@ -8329,9 +8324,9 @@
      * @class tinymce.html.Schema
      * @version 3.4
      */
-    define("tinymce/html/Schema", [
+define("tinymce/html/Schema", [
         "tinymce/util/Tools"
-    ], function (Tools) {
+], function(Tools) {
         var mapCache = {}, dummyObj = {};
         var makeMap = Tools.makeMap, each = Tools.each, extend = Tools.extend, explode = Tools.explode, inArray = Tools.inArray;
 
@@ -8451,7 +8446,7 @@
                 html4PhrasingContent = split("acronym applet basefont big font strike tt");
                 phrasingContent.push.apply(phrasingContent, html4PhrasingContent);
 
-                each(html4PhrasingContent, function (name) {
+			each(html4PhrasingContent, function(name) {
                     add(name, "", phrasingContent);
                 });
 
@@ -8461,7 +8456,7 @@
                 // Flow content elements from the HTML5 spec (block+inline)
                 flowContent = [].concat(blockContent, phrasingContent);
 
-                each(html4BlockContent, function (name) {
+			each(html4BlockContent, function(name) {
                     add(name, "", flowContent);
                 });
             }
@@ -8598,7 +8593,7 @@
 
             // Delete children of the same name from it's parent
             // For example: form can't have a child of the name form
-            each(split('a form meter progress dfn'), function (name) {
+		each(split('a form meter progress dfn'), function(name) {
                 if (schema[name]) {
                     delete schema[name].children[name];
                 }
@@ -8638,7 +8633,7 @@
                 }
 
                 // Convert styles into a rule list
-                each(value, function (value, key) {
+			each(value, function(value, key) {
                     styles[key] = styles[key.toUpperCase()] = mode == 'map' ? makeMap(value, /[, ]/) : explode(value, /[, ]/);
                 });
             }
@@ -8653,7 +8648,7 @@
          * @method Schema
          * @param {Object} settings Name/value settings object.
          */
-        return function (settings) {
+	return function(settings) {
             var self = this, elements = {}, children = {}, patternElements = [], validStyles, invalidStyles, schemaItems;
             var whiteSpaceElementsMap, selfClosingElementsMap, shortEndedElementsMap, boolAttrMap, validClasses;
             var blockElementsMap, nonEmptyElementsMap, moveCaretBeforeOnEnterElementsMap, textBlockElementsMap, textInlineElementsMap;
@@ -8710,7 +8705,7 @@
             textInlineElementsMap = createLookupTable('text_inline_elements', 'span strong b em i font strike u var cite ' +
                 'dfn code mark q sup sub samp');
 
-            each((settings.special || 'script noscript style textarea').split(' '), function (name) {
+		each((settings.special || 'script noscript style textarea').split(' '), function(name) {
                 specialElements[name] = new RegExp('<\/' + name + '[^>]*>', 'gi');
             });
 
@@ -8876,7 +8871,7 @@
 
                 addValidElements(validElements);
 
-                each(schemaItems, function (element, name) {
+			each(schemaItems, function(element, name) {
                     children[name] = element.children;
                 });
             }
@@ -8889,7 +8884,7 @@
                     // Flush cached items since we are altering the default maps
                     mapCache.text_block_elements = mapCache.block_elements = null;
 
-                    each(split(customElements, ','), function (rule) {
+				each(split(customElements, ','), function(rule) {
                         var matches = customElementRegExp.exec(rule),
                             inline = matches[1] === '~',
                             cloneName = inline ? 'span' : 'div',
@@ -8916,7 +8911,7 @@
                         }
 
                         // Add custom elements at span/div positions
-                        each(children, function (element, elmName) {
+					each(children, function(element, elmName) {
                             if (element[cloneName]) {
                                 children[elmName] = element = extend({}, children[elmName]);
                                 element[name] = element[cloneName];
@@ -8934,7 +8929,7 @@
                 mapCache[settings.schema] = null;
 
                 if (validChildren) {
-                    each(split(validChildren, ','), function (rule) {
+				each(split(validChildren, ','), function(rule) {
                         var matches = childRuleRegExp.exec(rule), parent, prefix;
 
                         if (matches) {
@@ -8949,7 +8944,7 @@
 
                             parent = children[matches[2]];
 
-                            each(split(matches[3], '|'), function (child) {
+						each(split(matches[3], '|'), function(child) {
                                 if (prefix === '-') {
                                     delete parent[child];
                                 } else {
@@ -8982,7 +8977,7 @@
 
             if (!settings.valid_elements) {
                 // No valid elements defined then clone the elements from the schema spec
-                each(schemaItems, function (element, name) {
+			each(schemaItems, function(element, name) {
                     elements[name] = {
                         attributes: element.attributes,
                         attributesOrder: element.attributesOrder
@@ -8993,7 +8988,7 @@
 
                 // Switch these on HTML4
                 if (settings.schema != "html5") {
-                    each(split('strong/b em/i'), function (item) {
+				each(split('strong/b em/i'), function(item) {
                         item = split(item, '/');
                         elements[item[1]].outputName = item[0];
                     });
@@ -9003,19 +8998,19 @@
                 elements.img.attributesDefault = [{name: 'alt', value: ''}];
 
                 // Remove these if they are empty by default
-                each(split('ol ul sub sup blockquote span font a table tbody tr strong em b i'), function (name) {
+			each(split('ol ul sub sup blockquote span font a table tbody tr strong em b i'), function(name) {
                     if (elements[name]) {
                         elements[name].removeEmpty = true;
                     }
                 });
 
                 // Padd these by default
-                each(split('p h1 h2 h3 h4 h5 h6 th td pre div address caption'), function (name) {
+			each(split('p h1 h2 h3 h4 h5 h6 th td pre div address caption'), function(name) {
                     elements[name].paddEmpty = true;
                 });
 
                 // Remove these if they have no attributes
-                each(split('span'), function (name) {
+			each(split('span'), function(name) {
                     elements[name].removeEmptyAttrs = true;
                 });
 
@@ -9037,7 +9032,7 @@
 
             // Delete invalid elements
             if (settings.invalid_elements) {
-                each(explode(settings.invalid_elements), function (item) {
+			each(explode(settings.invalid_elements), function(item) {
                     if (elements[item]) {
                         delete elements[item];
                     }
@@ -9067,7 +9062,7 @@
              * @method getValidStyles
              * @type Object
              */
-            self.getValidStyles = function () {
+		self.getValidStyles = function() {
                 return validStyles;
             };
 
@@ -9077,7 +9072,7 @@
              * @method getInvalidStyles
              * @type Object
              */
-            self.getInvalidStyles = function () {
+		self.getInvalidStyles = function() {
                 return invalidStyles;
             };
 
@@ -9087,7 +9082,7 @@
              * @method getValidClasses
              * @type Object
              */
-            self.getValidClasses = function () {
+		self.getValidClasses = function() {
                 return validClasses;
             };
 
@@ -9097,7 +9092,7 @@
              * @method getBoolAttrs
              * @return {Object} Name/value lookup map for boolean attributes.
              */
-            self.getBoolAttrs = function () {
+		self.getBoolAttrs = function() {
                 return boolAttrMap;
             };
 
@@ -9107,7 +9102,7 @@
              * @method getBlockElements
              * @return {Object} Name/value lookup map for block elements.
              */
-            self.getBlockElements = function () {
+		self.getBlockElements = function() {
                 return blockElementsMap;
             };
 
@@ -9117,7 +9112,7 @@
              * @method getTextBlockElements
              * @return {Object} Name/value lookup map for block elements.
              */
-            self.getTextBlockElements = function () {
+		self.getTextBlockElements = function() {
                 return textBlockElementsMap;
             };
 
@@ -9127,7 +9122,7 @@
              * @method getTextInlineElements
              * @return {Object} Name/value lookup map for text format elements.
              */
-            self.getTextInlineElements = function () {
+		self.getTextInlineElements = function() {
                 return textInlineElementsMap;
             };
 
@@ -9137,7 +9132,7 @@
              * @method getShortEndedElements
              * @return {Object} Name/value lookup map for short ended elements.
              */
-            self.getShortEndedElements = function () {
+		self.getShortEndedElements = function() {
                 return shortEndedElementsMap;
             };
 
@@ -9147,7 +9142,7 @@
              * @method getSelfClosingElements
              * @return {Object} Name/value lookup map for self closing tags elements.
              */
-            self.getSelfClosingElements = function () {
+		self.getSelfClosingElements = function() {
                 return selfClosingElementsMap;
             };
 
@@ -9158,7 +9153,7 @@
              * @method getNonEmptyElements
              * @return {Object} Name/value lookup map for non empty elements.
              */
-            self.getNonEmptyElements = function () {
+		self.getNonEmptyElements = function() {
                 return nonEmptyElementsMap;
             };
 
@@ -9169,7 +9164,7 @@
              * @method getMoveCaretBeforeOnEnterElements
              * @return {Object} Name/value lookup map for elements to place the caret in front of.
              */
-            self.getMoveCaretBeforeOnEnterElements = function () {
+		self.getMoveCaretBeforeOnEnterElements = function() {
                 return moveCaretBeforeOnEnterElementsMap;
             };
 
@@ -9179,7 +9174,7 @@
              * @method getWhiteSpaceElements
              * @return {Object} Name/value lookup map for white space elements.
              */
-            self.getWhiteSpaceElements = function () {
+		self.getWhiteSpaceElements = function() {
                 return whiteSpaceElementsMap;
             };
 
@@ -9191,7 +9186,7 @@
              * @method getSpecialElements
              * @return {Object} Name/value lookup map for special elements.
              */
-            self.getSpecialElements = function () {
+		self.getSpecialElements = function() {
                 return specialElements;
             };
 
@@ -9204,7 +9199,7 @@
              * @param {String} child Element child to verify.
              * @return {Boolean} True/false if the element is a valid child of the specified parent.
              */
-            self.isValidChild = function (name, child) {
+		self.isValidChild = function(name, child) {
                 var parent = children[name];
 
                 return !!(parent && parent[child]);
@@ -9219,7 +9214,7 @@
              * @param {String} attr Optional attribute name to check for.
              * @return {Boolean} True/false if the element and attribute is valid.
              */
-            self.isValid = function (name, attr) {
+		self.isValid = function(name, attr) {
                 var attrPatterns, i, rule = getElementRule(name);
 
                 // Check if it's a valid element
@@ -9265,7 +9260,7 @@
              * @method getCustomElements
              * @return {Object} Name/value map object of all custom elements.
              */
-            self.getCustomElements = function () {
+		self.getCustomElements = function() {
                 return customElementsMap;
             };
 
@@ -9308,11 +9303,11 @@
 
             self.elements = elements;
         };
-    });
+});
 
 // Included from: js/tinymce/classes/html/SaxParser.js
 
-    /**
+/**
      * SaxParser.js
      *
      * Released under LGPL License.
@@ -9322,9 +9317,9 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /*eslint max-depth:[2, 9] */
+/*eslint max-depth:[2, 9] */
 
-    /**
+/**
      * This class parses HTML code using pure JavaScript and executes various events for each item it finds. It will
      * always execute the events in the right order for tag soup code like <b><p></b></p>. It will also remove elements
      * and attributes that doesn't fit the schema if the validate setting is enabled.
@@ -9364,11 +9359,11 @@
      * @class tinymce.html.SaxParser
      * @version 3.4
      */
-    define("tinymce/html/SaxParser", [
+define("tinymce/html/SaxParser", [
         "tinymce/html/Schema",
         "tinymce/html/Entities",
         "tinymce/util/Tools"
-    ], function (Schema, Entities, Tools) {
+], function(Schema, Entities, Tools) {
         var each = Tools.each;
 
         /**
@@ -9421,8 +9416,7 @@
         function SaxParser(settings, schema) {
             var self = this;
 
-            function noop() {
-            }
+		function noop() {}
 
             settings = settings || {};
             self.schema = schema = schema || new Schema();
@@ -9432,7 +9426,7 @@
             }
 
             // Add handler functions from settings and setup default handlers
-            each('comment cdata text start end pi doctype'.split(' '), function (name) {
+		each('comment cdata text start end pi doctype'.split(' '), function(name) {
                 if (name) {
                     self[name] = settings[name] || noop;
                 }
@@ -9446,7 +9440,7 @@
              * @method parse
              * @param {String} html Html string to sax parse.
              */
-            self.parse = function (html) {
+		self.parse = function(html) {
                 var self = this, matches, index = 0, value, endRegExp, stack = [], attrList, i, text, name;
                 var isInternalElement, removeInternalElements, shortEndedElements, fillAttrsMap, isShortEnded;
                 var validate, elementRule, isValidElement, attr, attribsValue, validAttributesMap, validAttributePatterns;
@@ -9786,11 +9780,11 @@
         SaxParser.findEndTag = findEndTag;
 
         return SaxParser;
-    });
+});
 
 // Included from: js/tinymce/classes/html/DomParser.js
 
-    /**
+/**
      * DomParser.js
      *
      * Released under LGPL License.
@@ -9800,7 +9794,7 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This class parses HTML code into a DOM like structure of nodes it will remove redundant whitespace and make
      * sure that the node tree is valid according to the specified schema.
      * So for example: <p>a<p>b</p>c</p> will become <p>a</p><p>b</p><p>c</p>
@@ -9812,12 +9806,12 @@
      * @class tinymce.html.DomParser
      * @version 3.4
      */
-    define("tinymce/html/DomParser", [
+define("tinymce/html/DomParser", [
         "tinymce/html/Node",
         "tinymce/html/Schema",
         "tinymce/html/SaxParser",
         "tinymce/util/Tools"
-    ], function (Node, Schema, SaxParser, Tools) {
+], function(Node, Schema, SaxParser, Tools) {
         var makeMap = Tools.makeMap, each = Tools.each, explode = Tools.explode, extend = Tools.extend;
 
         /**
@@ -9828,7 +9822,7 @@
          * @param {Object} settings Name/value collection of settings. comment, cdata, text, start and end are callbacks.
          * @param {tinymce.html.Schema} schema HTML Schema class to use when parsing.
          */
-        return function (settings, schema) {
+	return function(settings, schema) {
             var self = this, nodeFilters = {}, attributeFilters = [], matchedNodes = {}, matchedAttributes = {};
 
             settings = settings || {};
@@ -9877,7 +9871,8 @@
 
                     // Get list of all parent nodes until we find a valid parent to stick the child into
                     parents = [node];
-                    for (parent = node.parent; parent && !schema.isValidChild(parent.name, node.name) && !nonSplitableElements[parent.name]; parent = parent.parent) {
+				for (parent = node.parent; parent && !schema.isValidChild(parent.name, node.name) &&
+					!nonSplitableElements[parent.name]; parent = parent.parent) {
                         parents.push(parent);
                     }
 
@@ -9960,7 +9955,7 @@
              * @param {tinymce.html.Node} Node the node to run filters on.
              * @return {tinymce.html.Node} The passed in node.
              */
-            self.filterNode = function (node) {
+		self.filterNode = function(node) {
                 var i, name, list;
 
                 // Run element filters
@@ -10007,8 +10002,8 @@
              * @method {String} name Comma separated list of nodes to collect.
              * @param {function} callback Callback function to execute once it has collected nodes.
              */
-            self.addNodeFilter = function (name, callback) {
-                each(explode(name), function (name) {
+		self.addNodeFilter = function(name, callback) {
+			each(explode(name), function(name) {
                     var list = nodeFilters[name];
 
                     if (!list) {
@@ -10033,8 +10028,8 @@
              * @method {String} name Comma separated list of nodes to collect.
              * @param {function} callback Callback function to execute once it has collected nodes.
              */
-            self.addAttributeFilter = function (name, callback) {
-                each(explode(name), function (name) {
+		self.addAttributeFilter = function(name, callback) {
+			each(explode(name), function(name) {
                     var i;
 
                     for (i = 0; i < attributeFilters.length; i++) {
@@ -10058,7 +10053,7 @@
              * @param {Object} args Optional args object that gets passed to all filter functions.
              * @return {tinymce.html.Node} Root node containing the tree.
              */
-            self.parse = function (html, args) {
+		self.parse = function(html, args) {
                 var parser, rootNode, node, nodes, i, l, fi, fl, list, name, validate;
                 var blockElements, startWhiteSpaceRegExp, invalidChildren = [], isInWhiteSpacePreservedElement;
                 var endWhiteSpaceRegExp, allWhiteSpaceRegExp, isAllWhiteSpaceRegExp, whiteSpaceElements;
@@ -10106,7 +10101,8 @@
                     while (node) {
                         next = node.next;
 
-                        if (node.type == 3 || (node.type == 1 && node.name !== 'p' && !blockElements[node.name] && !node.attr('data-mce-type'))) {
+					if (node.type == 3 || (node.type == 1 && node.name !== 'p' &&
+						!blockElements[node.name] && !node.attr('data-mce-type'))) {
                             if (!rootBlockNode) {
                                 // Create a new root block element
                                 rootBlockNode = createNode(rootBlockName, 1);
@@ -10197,11 +10193,11 @@
                     // Exclude P and LI from DOM parsing since it's treated better by the DOM parser
                     self_closing_elements: cloneAndExcludeBlocks(schema.getSelfClosingElements()),
 
-                    cdata: function (text) {
+				cdata: function(text) {
                         node.append(createNode('#cdata', 4)).value = text;
                     },
 
-                    text: function (text, raw) {
+				text: function(text, raw) {
                         var textNode;
 
                         // Trim all redundant whitespace on non white space elements
@@ -10221,16 +10217,16 @@
                         }
                     },
 
-                    comment: function (text) {
+				comment: function(text) {
                         node.append(createNode('#comment', 8)).value = text;
                     },
 
-                    pi: function (name, text) {
+				pi: function(name, text) {
                         node.append(createNode(name, 7)).value = text;
                         removeWhitespaceBefore(node);
                     },
 
-                    doctype: function (text) {
+				doctype: function(text) {
                         var newNode;
 
                         newNode = node.append(createNode('#doctype', 10));
@@ -10238,8 +10234,7 @@
                         removeWhitespaceBefore(node);
                     },
 
-                    start: function (name, attrs, empty) {
-                        //console.log('start', name, attrs, empty);
+				start: function(name, attrs, empty) {
                         var newNode, attrFiltersLen, elementRule, attrName, parent;
 
                         elementRule = validate ? schema.getElementRule(name) : {};
@@ -10289,8 +10284,7 @@
                         }
                     },
 
-                    end: function (name) {
-                        //console.log('end', name);
+				end: function(name) {
                         var textNode, elementRule, text, sibling, tempNode;
 
                         elementRule = validate ? schema.getElementRule(name) : {};
@@ -10423,7 +10417,6 @@
                 // Run filters only when the contents is valid
                 if (!args.invalid) {
                     // Run node filters
-
                     for (name in matchedNodes) {
                         list = nodeFilters[name];
                         nodes = matchedNodes[name];
@@ -10470,7 +10463,7 @@
             // make it possible to place the caret inside empty blocks. This logic tries to remove
             // these elements and keep br elements that where intended to be there intact
             if (settings.remove_trailing_brs) {
-                self.addNodeFilter('br', function (nodes) {
+			self.addNodeFilter('br', function(nodes) {
                     var i, l = nodes.length, node, blockElements = extend({}, schema.getBlockElements());
                     var nonEmptyElements = schema.getNonEmptyElements(), parent, lastParent, prev, prevName;
                     var elementRule, textNode;
@@ -10550,7 +10543,7 @@
 
             // Force anchor names closed, unless the setting "allow_html_in_named_anchor" is explicitly included.
             if (!settings.allow_html_in_named_anchor) {
-                self.addAttributeFilter('id,name', function (nodes) {
+			self.addAttributeFilter('id,name', function(nodes) {
                     var i = nodes.length, sibling, prevSibling, parent, node;
 
                     while (i--) {
@@ -10571,7 +10564,7 @@
             }
 
             if (settings.validate && schema.getValidClasses()) {
-                self.addAttributeFilter('class', function (nodes) {
+			self.addAttributeFilter('class', function(nodes) {
                     var i = nodes.length, node, classList, ci, className, classValue;
                     var validClasses = schema.getValidClasses(), validClassesMap, valid;
 
@@ -10612,11 +10605,11 @@
                 });
             }
         };
-    });
+});
 
 // Included from: js/tinymce/classes/html/Writer.js
 
-    /**
+/**
      * Writer.js
      *
      * Released under LGPL License.
@@ -10626,7 +10619,7 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This class is used to write HTML tags out it can be used with the Serializer or the SaxParser.
      *
      * @class tinymce.html.Writer
@@ -10638,10 +10631,10 @@
      * @class tinymce.html.Writer
      * @version 3.4
      */
-    define("tinymce/html/Writer", [
+define("tinymce/html/Writer", [
         "tinymce/html/Entities",
         "tinymce/util/Tools"
-    ], function (Entities, Tools) {
+], function(Entities, Tools) {
         var makeMap = Tools.makeMap;
 
         /**
@@ -10651,7 +10644,7 @@
          * @method Writer
          * @param {Object} settings Name/value settings object.
          */
-        return function (settings) {
+	return function(settings) {
             var html = [], indent, indentBefore, indentAfter, encode, htmlOutput;
 
             settings = settings || {};
@@ -10670,7 +10663,7 @@
                  * @param {Array} attrs Optional attribute array or undefined if it hasn't any.
                  * @param {Boolean} empty Optional empty state if the tag should end like <br />.
                  */
-                start: function (name, attrs, empty) {
+			start: function(name, attrs, empty) {
                     var i, l, attr, value;
 
                     if (indent && indentBefore[name] && html.length > 0) {
@@ -10711,7 +10704,7 @@
                  * @method end
                  * @param {String} name Name of the element.
                  */
-                end: function (name) {
+			end: function(name) {
                     var value;
 
                     /*if (indent && indentBefore[name] && html.length > 0) {
@@ -10739,7 +10732,7 @@
                  * @param {String} text String to write out.
                  * @param {Boolean} raw Optional raw state if true the contents wont get encoded.
                  */
-                text: function (text, raw) {
+			text: function(text, raw) {
                     if (text.length > 0) {
                         html[html.length] = raw ? text : encode(text);
                     }
@@ -10751,7 +10744,7 @@
                  * @method cdata
                  * @param {String} text String to write out inside the cdata.
                  */
-                cdata: function (text) {
+			cdata: function(text) {
                     html.push('<![CDATA[', text, ']]>');
                 },
 
@@ -10761,7 +10754,7 @@
                  * @method cdata
                  * @param {String} text String to write out inside the comment.
                  */
-                comment: function (text) {
+			comment: function(text) {
                     html.push('<!--', text, '-->');
                 },
 
@@ -10772,7 +10765,7 @@
                  * @param {String} name Name of the pi.
                  * @param {String} text String to write out inside the pi.
                  */
-                pi: function (name, text) {
+			pi: function(name, text) {
                     if (text) {
                         html.push('<?', name, ' ', encode(text), '?>');
                     } else {
@@ -10790,7 +10783,7 @@
                  * @method doctype
                  * @param {String} text String to write out inside the doctype.
                  */
-                doctype: function (text) {
+			doctype: function(text) {
                     html.push('<!DOCTYPE', text, '>', indent ? '\n' : '');
                 },
 
@@ -10799,7 +10792,7 @@
                  *
                  * @method reset
                  */
-                reset: function () {
+			reset: function() {
                     html.length = 0;
                 },
 
@@ -10809,16 +10802,16 @@
                  * @method getContent
                  * @return {String} HTML contents that got written down.
                  */
-                getContent: function () {
+			getContent: function() {
                     return html.join('').replace(/\n$/, '');
                 }
             };
         };
-    });
+});
 
 // Included from: js/tinymce/classes/html/Serializer.js
 
-    /**
+/**
      * Serializer.js
      *
      * Released under LGPL License.
@@ -10828,7 +10821,7 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This class is used to serialize down the DOM tree into a string using a Writer instance.
      *
      *
@@ -10837,10 +10830,10 @@
      * @class tinymce.html.Serializer
      * @version 3.4
      */
-    define("tinymce/html/Serializer", [
+define("tinymce/html/Serializer", [
         "tinymce/html/Writer",
         "tinymce/html/Schema"
-    ], function (Writer, Schema) {
+], function(Writer, Schema) {
         /**
          * Constructs a new Serializer instance.
          *
@@ -10849,7 +10842,7 @@
          * @param {Object} settings Name/value settings object.
          * @param {tinymce.html.Schema} schema Schema instance to use.
          */
-        return function (settings, schema) {
+	return function(settings, schema) {
             var self = this, writer = new Writer(settings);
 
             settings = settings || {};
@@ -10867,39 +10860,39 @@
              * @param {tinymce.html.Node} node Node instance to serialize.
              * @return {String} String with HTML based on DOM tree.
              */
-            self.serialize = function (node) {
+		self.serialize = function(node) {
                 var handlers, validate;
 
                 validate = settings.validate;
 
                 handlers = {
                     // #text
-                    3: function (node) {
+				3: function(node) {
                         writer.text(node.value, node.raw);
                     },
 
                     // #comment
-                    8: function (node) {
+				8: function(node) {
                         writer.comment(node.value);
                     },
 
                     // Processing instruction
-                    7: function (node) {
+				7: function(node) {
                         writer.pi(node.name, node.value);
                     },
 
                     // Doctype
-                    10: function (node) {
+				10: function(node) {
                         writer.doctype(node.value);
                     },
 
                     // CDATA
-                    4: function (node) {
+				4: function(node) {
                         writer.cdata(node.value);
                     },
 
                     // Document fragment
-                    11: function (node) {
+				11: function(node) {
                         if ((node = node.firstChild)) {
                             do {
                                 walk(node);
@@ -10975,11 +10968,11 @@
                 return writer.getContent();
             };
         };
-    });
+});
 
 // Included from: js/tinymce/classes/dom/Serializer.js
 
-    /**
+/**
      * Serializer.js
      *
      * Released under LGPL License.
@@ -10989,13 +10982,13 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This class is used to serialize DOM trees into a string. Consult the TinyMCE Wiki API for
      * more details and examples on how to use this class.
      *
      * @class tinymce.dom.Serializer
      */
-    define("tinymce/dom/Serializer", [
+define("tinymce/dom/Serializer", [
         "tinymce/dom/DOMUtils",
         "tinymce/html/DomParser",
         "tinymce/html/Entities",
@@ -11004,7 +10997,7 @@
         "tinymce/html/Schema",
         "tinymce/Env",
         "tinymce/util/Tools"
-    ], function (DOMUtils, DomParser, Entities, Serializer, Node, Schema, Env, Tools) {
+], function(DOMUtils, DomParser, Entities, Serializer, Node, Schema, Env, Tools) {
         var each = Tools.each, trim = Tools.trim;
         var DOM = DOMUtils.DOM;
 
@@ -11043,7 +11036,7 @@
          * @param {Object} settings Serializer settings object.
          * @param {tinymce.Editor} editor Optional editor to bind events to and get schema/dom from.
          */
-        return function (settings, editor) {
+	return function(settings, editor) {
             var dom, schema, htmlParser;
 
             if (editor) {
@@ -11060,7 +11053,7 @@
             htmlParser = new DomParser(settings, schema);
 
             // Convert tabindex back to elements when serializing contents
-            htmlParser.addAttributeFilter('data-mce-tabindex', function (nodes, name) {
+		htmlParser.addAttributeFilter('data-mce-tabindex', function(nodes, name) {
                 var i = nodes.length, node;
 
                 while (i--) {
@@ -11071,7 +11064,7 @@
             });
 
             // Convert move data-mce-src, data-mce-href and data-mce-style into nodes or process them if needed
-            htmlParser.addAttributeFilter('src,href,style', function (nodes, name) {
+		htmlParser.addAttributeFilter('src,href,style', function(nodes, name) {
                 var i = nodes.length, node, value, internalName = 'data-mce-' + name;
                 var urlConverter = settings.url_converter, urlConverterScope = settings.url_converter_scope, undef;
 
@@ -11099,7 +11092,7 @@
             });
 
             // Remove internal classes mceItem<..> or mceSelected
-            htmlParser.addAttributeFilter('class', function (nodes) {
+		htmlParser.addAttributeFilter('class', function(nodes) {
                 var i = nodes.length, node, value;
 
                 while (i--) {
@@ -11114,7 +11107,7 @@
             });
 
             // Remove bookmark elements
-            htmlParser.addAttributeFilter('data-mce-type', function (nodes, name, args) {
+		htmlParser.addAttributeFilter('data-mce-type', function(nodes, name, args) {
                 var i = nodes.length, node;
 
                 while (i--) {
@@ -11126,7 +11119,7 @@
                 }
             });
 
-            htmlParser.addNodeFilter('noscript', function (nodes) {
+		htmlParser.addNodeFilter('noscript', function(nodes) {
                 var i = nodes.length, node;
 
                 while (i--) {
@@ -11139,7 +11132,7 @@
             });
 
             // Force script into CDATA sections and remove the mce- prefix also add comments around styles
-            htmlParser.addNodeFilter('script,style', function (nodes, name) {
+		htmlParser.addNodeFilter('script,style', function(nodes, name) {
                 var i = nodes.length, node, value, type;
 
                 function trim(value) {
@@ -11175,7 +11168,7 @@
             });
 
             // Convert comments to cdata and handle protected comments
-            htmlParser.addNodeFilter('#comment', function (nodes) {
+		htmlParser.addNodeFilter('#comment', function(nodes) {
                 var i = nodes.length, node;
 
                 while (i--) {
@@ -11194,7 +11187,7 @@
                 }
             });
 
-            htmlParser.addNodeFilter('xml:namespace,input', function (nodes, name) {
+		htmlParser.addNodeFilter('xml:namespace,input', function(nodes, name) {
                 var i = nodes.length, node;
 
                 while (i--) {
@@ -11211,7 +11204,7 @@
 
             // Fix list elements, TODO: Replace this later
             if (settings.fix_list_elements) {
-                htmlParser.addNodeFilter('ul,ol', function (nodes) {
+			htmlParser.addNodeFilter('ul,ol', function(nodes) {
                     var i = nodes.length, node, parentNode;
 
                     while (i--) {
@@ -11233,7 +11226,7 @@
                 'data-mce-selected,data-mce-expando,' +
                 'data-mce-type,data-mce-resize',
 
-                function (nodes, name) {
+			function(nodes, name) {
                     var i = nodes.length;
 
                     while (i--) {
@@ -11291,7 +11284,7 @@
                  * @param {DOMNode} node DOM node to serialize.
                  * @param {Object} args Arguments option that gets passed to event handlers.
                  */
-                serialize: function (node, args) {
+			serialize: function(node, args) {
                     var self = this, impl, doc, oldDoc, htmlSerializer, content, rootNode;
 
                     // Explorer won't clone contents of script and style and the
@@ -11312,7 +11305,7 @@
                         doc = impl.createHTMLDocument("");
 
                         // Add the element or it's children if it's a body element to the new document
-                        each(node.nodeName == 'BODY' ? node.childNodes : [node], function (node) {
+					each(node.nodeName == 'BODY' ? node.childNodes : [node], function(node) {
                             doc.body.appendChild(doc.importNode(node, true));
                         });
 
@@ -11378,7 +11371,7 @@
                  * @method addRules
                  * @param {String} rules Valid elements rules string to add to schema.
                  */
-                addRules: function (rules) {
+			addRules: function(rules) {
                     schema.addValidElements(rules);
                 },
 
@@ -11390,28 +11383,28 @@
                  * @method setRules
                  * @param {String} rules Valid elements rules string.
                  */
-                setRules: function (rules) {
+			setRules: function(rules) {
                     schema.setValidElements(rules);
                 },
 
-                onPreProcess: function (args) {
+			onPreProcess: function(args) {
                     if (editor) {
                         editor.fire('PreProcess', args);
                     }
                 },
 
-                onPostProcess: function (args) {
+			onPostProcess: function(args) {
                     if (editor) {
                         editor.fire('PostProcess', args);
                     }
                 }
             };
         };
-    });
+});
 
 // Included from: js/tinymce/classes/dom/TridentSelection.js
 
-    /**
+/**
      * TridentSelection.js
      *
      * Released under LGPL License.
@@ -11421,14 +11414,14 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * Selection class for old explorer versions. This one fakes the
      * native selection object available on modern browsers.
      *
      * @private
      * @class tinymce.dom.TridentSelection
      */
-    define("tinymce/dom/TridentSelection", [], function () {
+define("tinymce/dom/TridentSelection", [], function() {
         function Selection(selection) {
             var self = this, dom = selection.dom, FALSE = false;
 
@@ -11683,7 +11676,7 @@
                 return domRange;
             }
 
-            this.getBookmark = function (type) {
+		this.getBookmark = function(type) {
                 var rng = selection.getRng(), bookmark = {};
 
                 function getIndexes(node) {
@@ -11741,7 +11734,7 @@
                 return bookmark;
             };
 
-            this.moveToBookmark = function (bookmark) {
+		this.moveToBookmark = function(bookmark) {
                 var rng, body = dom.doc.body;
 
                 function resolveIndexes(indexes) {
@@ -11799,7 +11792,7 @@
                 }
             };
 
-            this.addRange = function (rng) {
+		this.addRange = function(rng) {
                 var ieRng, ctrlRng, startContainer, startOffset, endContainer, endOffset, sibling,
                     doc = selection.dom.doc, body = doc.body, nativeRng, ctrlElm;
 
@@ -11917,11 +11910,11 @@
         }
 
         return Selection;
-    });
+});
 
 // Included from: js/tinymce/classes/util/VK.js
 
-    /**
+/**
      * VK.js
      *
      * Released under LGPL License.
@@ -11931,12 +11924,12 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This file exposes a set of the common KeyCodes for use. Please grow it as needed.
      */
-    define("tinymce/util/VK", [
+define("tinymce/util/VK", [
         "tinymce/Env"
-    ], function (Env) {
+], function(Env) {
         return {
             BACKSPACE: 8,
             DELETE: 46,
@@ -11948,20 +11941,20 @@
             TAB: 9,
             UP: 38,
 
-            modifierPressed: function (e) {
+		modifierPressed: function(e) {
                 return e.shiftKey || e.ctrlKey || e.altKey || this.metaKeyPressed(e);
             },
 
-            metaKeyPressed: function (e) {
+		metaKeyPressed: function(e) {
                 // Check if ctrl or meta key is pressed. Edge case for AltGr on Windows where it produces ctrlKey+altKey states
                 return (Env.mac ? e.metaKey : e.ctrlKey && !e.altKey);
             }
         };
-    });
+});
 
 // Included from: js/tinymce/classes/dom/ControlSelection.js
 
-    /**
+/**
      * ControlSelection.js
      *
      * Released under LGPL License.
@@ -11971,19 +11964,19 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This class handles control selection of elements. Controls are elements
      * that can be resized and needs to be selected as a whole. It adds custom resize handles
      * to all browser engines that support properly disabling the built in resize logic.
      *
      * @class tinymce.dom.ControlSelection
      */
-    define("tinymce/dom/ControlSelection", [
+define("tinymce/dom/ControlSelection", [
         "tinymce/util/VK",
         "tinymce/util/Tools",
         "tinymce/Env"
-    ], function (VK, Tools, Env) {
-        return function (selection, editor) {
+], function(VK, Tools, Env) {
+	return function(selection, editor) {
             var dom = editor.dom, each = Tools.each;
             var selectedElm, selectedElmGhost, resizeHelper, resizeHandles, selectedHandle, lastMouseDownEvent;
             var startX, startY, selectedElmX, selectedElmY, startW, startH, ratio, resizeStarted;
@@ -12085,10 +12078,11 @@
                 height = height < 5 ? 5 : height;
 
                 if (selectedElm.nodeName == "IMG" && editor.settings.resize_img_proportional !== false) {
-                    proportional = VK.modifierPressed(e);
+				proportional = !VK.modifierPressed(e);
                 } else {
                     proportional = VK.modifierPressed(e) || (selectedElm.nodeName == "IMG" && selectedHandle[2] * selectedHandle[3] !== 0);
                 }
+
                 // Constrain proportions
                 if (proportional) {
                     if (abs(deltaX) > abs(deltaY)) {
@@ -12211,7 +12205,7 @@
                 e = editor.fire('ObjectSelected', {target: targetElm});
 
                 if (isResizable(targetElm) && !e.isDefaultPrevented()) {
-                    each(resizeHandles, function (handle, name) {
+				each(resizeHandles, function(handle, name) {
                         var handleElm;
 
                         function startDrag(e) {
@@ -12287,7 +12281,7 @@
                             handleElm.contentEditable = false;
                         }
 
-                        dom.bind(handleElm, 'mousedown', function (e) {
+					dom.bind(handleElm, 'mousedown', function(e) {
                             e.stopImmediatePropagation();
                             e.preventDefault();
                             startDrag(e);
@@ -12345,12 +12339,12 @@
                 }
 
                 // Remove data-mce-selected from all elements since they might have been copied using Ctrl+c/v
-                each(dom.select('img[data-mce-selected],hr[data-mce-selected]'), function (img) {
+			each(dom.select('img[data-mce-selected],hr[data-mce-selected]'), function(img) {
                     img.removeAttribute('data-mce-selected');
                 });
 
                 controlElm = e.type == 'mousedown' ? e.target : selection.getNode();
-                controlElm = dom.$(controlElm).closest(isIE ? 'table' : 'table,img,hr,image-gallery')[0];
+			controlElm = dom.$(controlElm).closest(isIE ? 'table' : 'table,img,hr')[0];
 
                 if (isChildOrEqual(controlElm, rootElement)) {
                     disableGeckoResize();
@@ -12472,10 +12466,10 @@
                 }
             }
 
-            editor.on('init', function () {
+		editor.on('init', function() {
                 if (isIE) {
                     // Hide the resize rect on resize and reselect the image
-                    editor.on('ObjectResized', function (e) {
+				editor.on('ObjectResized', function(e) {
                         if (e.target.nodeName != 'TABLE') {
                             hideResizeRect();
                             controlSelect(e.target);
@@ -12484,7 +12478,7 @@
 
                     attachEvent(rootElement, 'controlselect', nativeControlSelect);
 
-                    editor.on('mousedown', function (e) {
+				editor.on('mousedown', function(e) {
                         lastMouseDownEvent = e;
                     });
                 } else {
@@ -12494,7 +12488,7 @@
                     if (Env.ie >= 11) {
                         // Needs to be mousedown for drag/drop to work on IE 11
                         // Needs to be click on Edge to properly select images
-                        editor.on('mousedown click', function (e) {
+					editor.on('mousedown click', function(e) {
                             var nodeName = e.target.nodeName;
 
                             if (!resizeStarted && /^(TABLE|IMG|HR)$/.test(nodeName)) {
@@ -12507,14 +12501,14 @@
                             }
                         });
 
-                        editor.dom.bind(rootElement, 'mscontrolselect', function (e) {
+					editor.dom.bind(rootElement, 'mscontrolselect', function(e) {
                             if (/^(TABLE|IMG|HR)$/.test(e.target.nodeName)) {
                                 e.preventDefault();
 
                                 // This moves the selection from being a control selection to a text like selection like in WebKit #6753
                                 // TODO: Fix this the day IE works like other browsers without this nasty native ugly control selections.
                                 if (e.target.tagName == 'IMG') {
-                                    window.setTimeout(function () {
+								window.setTimeout(function() {
                                         editor.selection.select(e.target);
                                     }, 0);
                                 }
@@ -12523,9 +12517,9 @@
                     }
                 }
 
-                editor.on('nodechange ResizeEditor ResizeWindow drop', function (e) {
+			editor.on('nodechange ResizeEditor ResizeWindow drop', function(e) {
                     if (window.requestAnimationFrame) {
-                        window.requestAnimationFrame(function () {
+					window.requestAnimationFrame(function() {
                             updateResizeRect(e);
                         });
                     } else {
@@ -12534,7 +12528,7 @@
                 });
 
                 // Update resize rect while typing in a table
-                editor.on('keydown keyup', function (e) {
+			editor.on('keydown keyup', function(e) {
                     if (selectedElm && selectedElm.nodeName == "TABLE") {
                         updateResizeRect(e);
                     }
@@ -12566,11 +12560,11 @@
                 destroy: destroy
             };
         };
-    });
+});
 
 // Included from: js/tinymce/classes/dom/BookmarkManager.js
 
-    /**
+/**
      * BookmarkManager.js
      *
      * Released under LGPL License.
@@ -12580,15 +12574,15 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This class handles selection bookmarks.
      *
      * @class tinymce.dom.BookmarkManager
      */
-    define("tinymce/dom/BookmarkManager", [
+define("tinymce/dom/BookmarkManager", [
         "tinymce/Env",
         "tinymce/util/Tools"
-    ], function (Env, Tools) {
+], function(Env, Tools) {
         /**
          * Constructs a new BookmarkManager instance for a specific selection instance.
          *
@@ -12616,13 +12610,13 @@
              * // Restore the selection bookmark
              * tinymce.activeEditor.selection.moveToBookmark(bm);
              */
-            this.getBookmark = function (type, normalized) {
+		this.getBookmark = function(type, normalized) {
                 var rng, rng2, id, collapsed, name, element, chr = '&#xFEFF;', styles;
 
                 function findIndex(name, element) {
                     var index = 0;
 
-                    Tools.each(dom.select(name), function (node, i) {
+				Tools.each(dom.select(name), function(node, i) {
                         if (node == element) {
                             index = i;
                         }
@@ -12769,20 +12763,12 @@
                     // Insert end marker
                     if (!collapsed) {
                         rng2.collapse(false);
-                        rng2.insertNode(dom.create('span', {
-                            'data-mce-type': "bookmark",
-                            id: id + '_end',
-                            style: styles
-                        }, chr));
+					rng2.insertNode(dom.create('span', {'data-mce-type': "bookmark", id: id + '_end', style: styles}, chr));
                     }
 
                     rng = normalizeTableCellSelection(rng);
                     rng.collapse(true);
-                    rng.insertNode(dom.create('span', {
-                        'data-mce-type': "bookmark",
-                        id: id + '_start',
-                        style: styles
-                    }, chr));
+				rng.insertNode(dom.create('span', {'data-mce-type': "bookmark", id: id + '_start', style: styles}, chr));
                 }
 
                 selection.moveToBookmark({id: id, keep: 1});
@@ -12805,7 +12791,7 @@
              * // Restore the selection bookmark
              * tinymce.activeEditor.selection.moveToBookmark(bm);
              */
-            this.moveToBookmark = function (bookmark) {
+		this.moveToBookmark = function(bookmark) {
                 var rng, root, startContainer, endContainer, startOffset, endOffset;
 
                 function setEndPoint(start) {
@@ -12879,7 +12865,7 @@
                             next = marker.nextSibling;
 
                             // Remove all marker text nodes
-                            Tools.each(Tools.grep(marker.childNodes), function (node) {
+						Tools.each(Tools.grep(marker.childNodes), function(node) {
                                 if (node.nodeType == 3) {
                                     node.nodeValue = node.nodeValue.replace(/\uFEFF/g, '');
                                 }
@@ -12961,16 +12947,16 @@
          * @param {DOMNode} node DOM Node to check if it's a bookmark node or not.
          * @return {Boolean} true/false if the node is a bookmark node or not.
          */
-        BookmarkManager.isBookmarkNode = function (node) {
+	BookmarkManager.isBookmarkNode = function(node) {
             return node && node.tagName === 'SPAN' && node.getAttribute('data-mce-type') === 'bookmark';
         };
 
         return BookmarkManager;
-    });
+});
 
 // Included from: js/tinymce/classes/dom/Selection.js
 
-    /**
+/**
      * Selection.js
      *
      * Released under LGPL License.
@@ -12980,7 +12966,7 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This class handles text and control selection it's an crossbrowser utility class.
      * Consult the TinyMCE Wiki API for more details and examples on how to use this class.
      *
@@ -12989,7 +12975,7 @@
      * // Getting the currently selected node for the active editor
      * alert(tinymce.activeEditor.selection.getNode().nodeName);
      */
-    define("tinymce/dom/Selection", [
+define("tinymce/dom/Selection", [
         "tinymce/dom/TreeWalker",
         "tinymce/dom/TridentSelection",
         "tinymce/dom/ControlSelection",
@@ -12997,7 +12983,7 @@
         "tinymce/dom/BookmarkManager",
         "tinymce/Env",
         "tinymce/util/Tools"
-    ], function (TreeWalker, TridentSelection, ControlSelection, RangeUtils, BookmarkManager, Env, Tools) {
+], function(TreeWalker, TridentSelection, ControlSelection, RangeUtils, BookmarkManager, Env, Tools) {
         var each = Tools.each, trim = Tools.trim;
         var isIE = Env.ie;
 
@@ -13035,7 +13021,7 @@
              * @param {Node} node Optional node to put the cursor in.
              * @param {Number} offset Optional offset from the start of the node to put the cursor at.
              */
-            setCursorLocation: function (node, offset) {
+		setCursorLocation: function(node, offset) {
                 var self = this, rng = self.dom.createRng();
 
                 if (!node) {
@@ -13062,7 +13048,7 @@
              * // Alerts the currently selected contents as plain text
              * alert(tinymce.activeEditor.selection.getContent({format: 'text'}));
              */
-            getContent: function (args) {
+		getContent: function(args) {
                 var self = this, rng = self.getRng(), tmpElm = self.dom.create("body");
                 var se = self.getSel(), whiteSpaceBefore, whiteSpaceAfter, fragment;
 
@@ -13122,7 +13108,7 @@
              * // Inserts some HTML contents at the current selection
              * tinymce.activeEditor.selection.setContent('<strong>Some contents</strong>');
              */
-            setContent: function (content, args) {
+		setContent: function(content, args) {
                 var self = this, rng = self.getRng(), caretNode, doc = self.win.document, frag, temp;
 
                 args = args || {format: 'html'};
@@ -13214,7 +13200,7 @@
              * @param {Boolean} real Optional state to get the real parent when the selection is collapsed not the closest element.
              * @return {Element} Start element of selection range.
              */
-            getStart: function (real) {
+		getStart: function(real) {
                 var self = this, rng = self.getRng(), startElement, parentElement, checkRng, node;
 
                 if (rng.duplicate || rng.item) {
@@ -13267,7 +13253,7 @@
              * @param {Boolean} real Optional state to get the real parent when the selection is collapsed not the closest element.
              * @return {Element} End element of selection range.
              */
-            getEnd: function (real) {
+		getEnd: function(real) {
                 var self = this, rng = self.getRng(), endElement, endOffset;
 
                 if (rng.duplicate || rng.item) {
@@ -13322,7 +13308,7 @@
              * // Restore the selection bookmark
              * tinymce.activeEditor.selection.moveToBookmark(bm);
              */
-            getBookmark: function (type, normalized) {
+		getBookmark: function(type, normalized) {
                 return this.bookmarkManager.getBookmark(type, normalized);
             },
 
@@ -13341,7 +13327,7 @@
              * // Restore the selection bookmark
              * tinymce.activeEditor.selection.moveToBookmark(bm);
              */
-            moveToBookmark: function (bookmark) {
+		moveToBookmark: function(bookmark) {
                 return this.bookmarkManager.moveToBookmark(bookmark);
             },
 
@@ -13356,7 +13342,7 @@
              * // Select the first paragraph in the active editor
              * tinymce.activeEditor.selection.select(tinymce.activeEditor.dom.select('p')[0]);
              */
-            select: function (node, content) {
+		select: function(node, content) {
                 var self = this, dom = self.dom, rng = dom.createRng(), idx;
 
                 // Clear stored range set by FocusManager
@@ -13390,7 +13376,7 @@
              * @return {Boolean} true/false state if the selection range is collapsed or not.
              * Collapsed means if it's a caret or a larger selection.
              */
-            isCollapsed: function () {
+		isCollapsed: function() {
                 var self = this, rng = self.getRng(), sel = self.getSel();
 
                 if (!rng || rng.item) {
@@ -13410,7 +13396,7 @@
              * @method collapse
              * @param {Boolean} toStart Optional boolean state if to collapse to end or not. Defaults to false.
              */
-            collapse: function (toStart) {
+		collapse: function(toStart) {
                 var self = this, rng = self.getRng(), node;
 
                 // Control range on IE
@@ -13430,7 +13416,7 @@
              * @method getSel
              * @return {Selection} Internal browser selection object.
              */
-            getSel: function () {
+		getSel: function() {
                 var win = this.win;
 
                 return win.getSelection ? win.getSelection() : win.document.selection;
@@ -13445,7 +13431,7 @@
              * @see http://www.quirksmode.org/dom/range_intro.html
              * @see http://www.dotvoid.com/2001/03/using-the-range-object-in-mozilla/
              */
-            getRng: function (w3c) {
+		getRng: function(w3c) {
                 var self = this, selection, rng, elm, doc = self.win.document, ieRng;
 
                 function tryCompareBoundaryPoints(how, sourceRange, destinationRange) {
@@ -13548,7 +13534,7 @@
              * @method setRng
              * @param {Range} rng Range to select.
              */
-            setRng: function (rng, forward) {
+		setRng: function(rng, forward) {
                 var self = this, sel, node;
 
                 if (!rng) {
@@ -13623,7 +13609,7 @@
              * // Inserts a DOM node at current selection/caret location
              * tinymce.activeEditor.selection.setNode(tinymce.activeEditor.dom.create('img', {src: 'some.gif', title: 'some title'}));
              */
-            setNode: function (elm) {
+		setNode: function(elm) {
                 var self = this;
 
                 self.setContent(self.dom.getOuterHTML(elm));
@@ -13640,7 +13626,7 @@
              * // Alerts the currently selected elements node name
              * alert(tinymce.activeEditor.selection.getNode().nodeName);
              */
-            getNode: function () {
+		getNode: function() {
                 var self = this, rng = self.getRng(), elm;
                 var startContainer = rng.startContainer, endContainer = rng.endContainer;
                 var startOffset = rng.startOffset, endOffset = rng.endOffset, root = self.dom.getRoot();
@@ -13715,7 +13701,7 @@
                 return elm;
             },
 
-            getSelectedBlocks: function (startElm, endElm) {
+		getSelectedBlocks: function(startElm, endElm) {
                 var self = this, dom = self.dom, node, root, selectedBlocks = [];
 
                 root = dom.getRoot();
@@ -13744,7 +13730,7 @@
                 return selectedBlocks;
             },
 
-            isForward: function () {
+		isForward: function() {
                 var dom = this.dom, sel = this.getSel(), anchorRange, focusRange;
 
                 // No support for selection direction then always return true
@@ -13763,7 +13749,7 @@
                 return anchorRange.compareBoundaryPoints(anchorRange.START_TO_START, focusRange) <= 0;
             },
 
-            normalize: function () {
+		normalize: function() {
                 var self = this, rng = self.getRng();
 
                 if (Env.range && new RangeUtils(self.dom).normalize(rng)) {
@@ -13781,23 +13767,23 @@
              * @param {String} selector CSS selector to check for.
              * @param {function} callback Callback with state and args when the selector is matches or not.
              */
-            selectorChanged: function (selector, callback) {
+		selectorChanged: function(selector, callback) {
                 var self = this, currentSelectors;
 
                 if (!self.selectorChangedData) {
                     self.selectorChangedData = {};
                     currentSelectors = {};
 
-                    self.editor.on('NodeChange', function (e) {
+				self.editor.on('NodeChange', function(e) {
                         var node = e.element, dom = self.dom, parents = dom.getParents(node, null, dom.getRoot()), matchedSelectors = {};
 
                         // Check for new matching selectors
-                        each(self.selectorChangedData, function (callbacks, selector) {
-                            each(parents, function (node) {
+					each(self.selectorChangedData, function(callbacks, selector) {
+						each(parents, function(node) {
                                 if (dom.is(node, selector)) {
                                     if (!currentSelectors[selector]) {
                                         // Execute callbacks
-                                        each(callbacks, function (callback) {
+									each(callbacks, function(callback) {
                                             callback(true, {node: node, selector: selector, parents: parents});
                                         });
 
@@ -13811,11 +13797,11 @@
                         });
 
                         // Check if current selectors still match
-                        each(currentSelectors, function (callbacks, selector) {
+					each(currentSelectors, function(callbacks, selector) {
                             if (!matchedSelectors[selector]) {
                                 delete currentSelectors[selector];
 
-                                each(callbacks, function (callback) {
+							each(callbacks, function(callback) {
                                     callback(false, {node: node, selector: selector, parents: parents});
                                 });
                             }
@@ -13833,7 +13819,7 @@
                 return self;
             },
 
-            getScrollContainer: function () {
+		getScrollContainer: function() {
                 var scrollContainer, node = this.dom.getRoot();
 
                 while (node && node.nodeName != 'BODY') {
@@ -13848,7 +13834,7 @@
                 return scrollContainer;
             },
 
-            scrollIntoView: function (elm) {
+		scrollIntoView: function(elm) {
                 var y, viewPort, self = this, dom = self.dom, root = dom.getRoot(), viewPortY, viewPortH;
 
                 function getPos(elm) {
@@ -13887,7 +13873,7 @@
                 }
             },
 
-            placeCaretAt: function (clientX, clientY) {
+		placeCaretAt: function(clientX, clientY) {
                 var doc = this.editor.getDoc(), rng, point;
 
                 if (doc.caretPositionFromPoint) {
@@ -13911,7 +13897,7 @@
                 this.setRng(rng);
             },
 
-            _moveEndPoint: function (rng, node, start) {
+		_moveEndPoint: function(rng, node, start) {
                 var root = node, walker = new TreeWalker(node, root);
                 var nonEmptyElementsMap = this.dom.schema.getNonEmptyElements();
 
@@ -13964,18 +13950,18 @@
                 }
             },
 
-            destroy: function () {
+		destroy: function() {
                 this.win = null;
                 this.controlSelection.destroy();
             }
         };
 
         return Selection;
-    });
+});
 
 // Included from: js/tinymce/classes/dom/ElementUtils.js
 
-    /**
+/**
      * ElementUtils.js
      *
      * Released under LGPL License.
@@ -13985,16 +13971,16 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * Utility class for various element specific functions.
      *
      * @private
      * @class tinymce.dom.ElementUtils
      */
-    define("tinymce/dom/ElementUtils", [
+define("tinymce/dom/ElementUtils", [
         "tinymce/dom/BookmarkManager",
         "tinymce/util/Tools"
-    ], function (BookmarkManager, Tools) {
+], function(BookmarkManager, Tools) {
         var each = Tools.each;
 
         function ElementUtils(dom) {
@@ -14007,7 +13993,7 @@
              * @param {Node} node2 Second node to compare with.
              * @return {boolean} True/false if the nodes are the same or not.
              */
-            this.compare = function (node1, node2) {
+		this.compare = function(node1, node2) {
                 // Not the same name
                 if (node1.nodeName != node2.nodeName) {
                     return false;
@@ -14023,7 +14009,7 @@
                 function getAttribs(node) {
                     var attribs = {};
 
-                    each(dom.getAttribs(node), function (attr) {
+				each(dom.getAttribs(node), function(attr) {
                         var name = attr.nodeName.toLowerCase();
 
                         // Don't compare internal attributes or style
@@ -14092,11 +14078,11 @@
         }
 
         return ElementUtils;
-    });
+});
 
 // Included from: js/tinymce/classes/fmt/Preview.js
 
-    /**
+/**
      * Preview.js
      *
      * Released under LGPL License.
@@ -14106,7 +14092,7 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * Internal class for generating previews styles for formats.
      *
      * Example:
@@ -14115,9 +14101,9 @@
      * @private
      * @class tinymce.fmt.Preview
      */
-    define("tinymce/fmt/Preview", [
+define("tinymce/fmt/Preview", [
         "tinymce/util/Tools"
-    ], function (Tools) {
+], function(Tools) {
         var each = Tools.each;
 
         function getCssText(editor, format) {
@@ -14156,7 +14142,7 @@
             previewElm = dom.create(name);
 
             // Add format styles to preview element
-            each(format.styles, function (value, name) {
+		each(format.styles, function(value, name) {
                 value = removeVars(value);
 
                 if (value) {
@@ -14165,7 +14151,7 @@
             });
 
             // Add attributes to preview element
-            each(format.attributes, function (value, name) {
+		each(format.attributes, function(value, name) {
                 value = removeVars(value);
 
                 if (value) {
@@ -14174,7 +14160,7 @@
             });
 
             // Add classes to preview element
-            each(format.classes, function (value) {
+		each(format.classes, function(value) {
                 value = removeVars(value);
 
                 if (!dom.hasClass(previewElm, value)) {
@@ -14192,7 +14178,7 @@
             parentFontSize = dom.getStyle(editor.getBody(), 'fontSize', true);
             parentFontSize = /px$/.test(parentFontSize) ? parseInt(parentFontSize, 10) : 0;
 
-            each(previewStyles.split(' '), function (name) {
+		each(previewStyles.split(' '), function(name) {
                 var value = dom.getStyle(previewElm, name, true);
 
                 // If background is transparent then check if the body has a background color we can use
@@ -14246,11 +14232,11 @@
         return {
             getCssText: getCssText
         };
-    });
+});
 
 // Included from: js/tinymce/classes/Formatter.js
 
-    /**
+/**
      * Formatter.js
      *
      * Released under LGPL License.
@@ -14260,7 +14246,7 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * Text formatter engine class. This class is used to apply formats like bold, italic, font size
      * etc to the current selection or specific nodes. This engine was built to replace the browser's
      * default formatting logic for execCommand due to its inconsistent and buggy behavior.
@@ -14274,21 +14260,21 @@
      *
      *  tinymce.activeEditor.formatter.apply('mycustomformat');
      */
-    define("tinymce/Formatter", [
+define("tinymce/Formatter", [
         "tinymce/dom/TreeWalker",
         "tinymce/dom/RangeUtils",
         "tinymce/dom/BookmarkManager",
         "tinymce/dom/ElementUtils",
         "tinymce/util/Tools",
         "tinymce/fmt/Preview"
-    ], function (TreeWalker, RangeUtils, BookmarkManager, ElementUtils, Tools, Preview) {
+], function(TreeWalker, RangeUtils, BookmarkManager, ElementUtils, Tools, Preview) {
         /**
          * Constructs a new formatter instance.
          *
          * @constructor Formatter
          * @param {tinymce.Editor} ed Editor instance to construct the formatter engine to.
          */
-        return function (ed) {
+	return function(ed) {
             var formats = {},
                 dom = ed.dom,
                 selection = ed.selection,
@@ -14352,43 +14338,23 @@
                     ],
 
                     alignleft: [
-                        {
-                            selector: 'figure,p,h1,h2,h3,h4,h5,h6,td,th,tr,div,ul,ol,li',
-                            styles: {textAlign: 'left'},
-                            defaultBlock: 'div'
-                        },
+					{selector: 'figure,p,h1,h2,h3,h4,h5,h6,td,th,tr,div,ul,ol,li', styles: {textAlign: 'left'}, defaultBlock: 'div'},
                         {selector: 'img,table', collapsed: false, styles: {'float': 'left'}}
                     ],
 
                     aligncenter: [
-                        {
-                            selector: 'figure,p,h1,h2,h3,h4,h5,h6,td,th,tr,div,ul,ol,li',
-                            styles: {textAlign: 'center'},
-                            defaultBlock: 'div'
-                        },
-                        {
-                            selector: 'img',
-                            collapsed: false,
-                            styles: {display: 'block', marginLeft: 'auto', marginRight: 'auto'}
-                        },
+					{selector: 'figure,p,h1,h2,h3,h4,h5,h6,td,th,tr,div,ul,ol,li', styles: {textAlign: 'center'}, defaultBlock: 'div'},
+					{selector: 'img', collapsed: false, styles: {display: 'block', marginLeft: 'auto', marginRight: 'auto'}},
                         {selector: 'table', collapsed: false, styles: {marginLeft: 'auto', marginRight: 'auto'}}
                     ],
 
                     alignright: [
-                        {
-                            selector: 'figure,p,h1,h2,h3,h4,h5,h6,td,th,tr,div,ul,ol,li',
-                            styles: {textAlign: 'right'},
-                            defaultBlock: 'div'
-                        },
+					{selector: 'figure,p,h1,h2,h3,h4,h5,h6,td,th,tr,div,ul,ol,li', styles: {textAlign: 'right'}, defaultBlock: 'div'},
                         {selector: 'img,table', collapsed: false, styles: {'float': 'right'}}
                     ],
 
                     alignjustify: [
-                        {
-                            selector: 'figure,p,h1,h2,h3,h4,h5,h6,td,th,tr,div,ul,ol,li',
-                            styles: {textAlign: 'justify'},
-                            defaultBlock: 'div'
-                        }
+					{selector: 'figure,p,h1,h2,h3,h4,h5,h6,td,th,tr,div,ul,ol,li', styles: {textAlign: 'justify'}, defaultBlock: 'div'}
                     ],
 
                     bold: [
@@ -14414,12 +14380,7 @@
                     ],
 
                     forecolor: {inline: 'span', styles: {color: '%value'}, links: true, remove_similar: true},
-                    hilitecolor: {
-                        inline: 'span',
-                        styles: {backgroundColor: '%value'},
-                        links: true,
-                        remove_similar: true
-                    },
+				hilitecolor: {inline: 'span', styles: {backgroundColor: '%value'}, links: true, remove_similar: true},
                     fontname: {inline: 'span', styles: {fontFamily: '%value'}},
                     fontsize: {inline: 'span', styles: {fontSize: '%value'}},
                     fontsize_class: {inline: 'span', attributes: {'class': '%value'}},
@@ -14428,14 +14389,13 @@
                     superscript: {inline: 'sup'},
                     code: {inline: 'code'},
 
-                    link: {
-                        inline: 'a', selector: 'a', remove: 'all', split: true, deep: true,
-                        onmatch: function () {
+				link: {inline: 'a', selector: 'a', remove: 'all', split: true, deep: true,
+					onmatch: function() {
                             return true;
                         },
 
-                        onformat: function (elm, fmt, vars) {
-                            each(vars, function (value, key) {
+					onformat: function(elm, fmt, vars) {
+						each(vars, function(value, key) {
                                 dom.setAttrib(elm, key, value);
                             });
                         }
@@ -14450,27 +14410,18 @@
                             block_expand: true,
                             deep: true
                         },
-                        {
-                            selector: 'span',
-                            attributes: ['style', 'class'],
-                            remove: 'empty',
-                            split: true,
-                            expand: false,
-                            deep: true
-                        },
+					{selector: 'span', attributes: ['style', 'class'], remove: 'empty', split: true, expand: false, deep: true},
                         {selector: '*', attributes: ['style', 'class'], split: false, expand: false, deep: true}
                     ]
                 });
 
                 // Register default block formats
-                each('p h1 h2 h3 h4 h5 h6 div address pre div dt dd samp'.split(/\s/), function (name) {
+			each('p h1 h2 h3 h4 h5 h6 div address pre div dt dd samp'.split(/\s/), function(name) {
                     register(name, {block: name, remove: 'all'});
                 });
 
                 // Register user defined formats
-                //debugger;
                 register(ed.settings.formats);
-
             }
 
             function addKeyboardShortcuts() {
@@ -14513,14 +14464,14 @@
             function register(name, format) {
                 if (name) {
                     if (typeof name !== 'string') {
-                        each(name, function (format, name) {
+					each(name, function(format, name) {
                             register(name, format);
                         });
                     } else {
                         // Force format into array and add it to internal collection
                         format = format.length ? format : [format];
 
-                        each(format, function (format) {
+					each(format, function(format) {
                             // Set deep to false by default on selector formats this to avoid removing
                             // alignment on images inside paragraphs when alignment is changed on paragraphs
                             if (format.deep === undef) {
@@ -14571,7 +14522,7 @@
             function getTextDecoration(node) {
                 var decoration;
 
-                ed.dom.getParent(node, function (n) {
+			ed.dom.getParent(node, function(n) {
                     decoration = ed.dom.getStyle(n, 'text-decoration');
                     return decoration && decoration !== 'none';
                 });
@@ -14607,10 +14558,10 @@
 
                     if (elm) {
                         if (fmt.onformat) {
-                            fmt.onformat(dom, elm, fmt, vars, node);
+						fmt.onformat(elm, fmt, vars, node);
                         }
 
-                        each(fmt.styles, function (value, name) {
+					each(fmt.styles, function(value, name) {
                             dom.setStyle(elm, name, replaceVars(value, vars));
                         });
 
@@ -14624,11 +14575,11 @@
                             }
                         }
 
-                        each(fmt.attributes, function (value, name) {
+					each(fmt.attributes, function(value, name) {
                             dom.setAttrib(elm, name, replaceVars(value, vars));
                         });
 
-                        each(fmt.classes, function (value) {
+					each(fmt.classes, function(value) {
                             value = replaceVars(value, vars);
 
                             if (!dom.hasClass(elm, value)) {
@@ -14672,7 +14623,7 @@
                     wrapElm = dom.create(wrapName);
                     setElementFormat(wrapElm);
 
-                    rangeUtils.walk(rng, function (nodes) {
+				rangeUtils.walk(rng, function(nodes) {
                         var currentWrapElm;
 
                         /**
@@ -14712,7 +14663,8 @@
 
                             // Can we rename the block
                             // TODO: Break this if up, too complex
-                            if (contentEditable && !hasContentEditableState && format.block && !format.wrapper && isTextBlock(nodeName) && isValid(parentName, wrapName)) {
+						if (contentEditable && !hasContentEditableState && format.block &&
+							!format.wrapper && isTextBlock(nodeName) && isValid(parentName, wrapName)) {
                                 node = dom.rename(node, wrapName);
                                 setElementFormat(node);
                                 newWrappers.push(node);
@@ -14723,7 +14675,7 @@
                             // Handle selector patterns
                             if (format.selector) {
                                 // Look for matching formats
-                                each(formatList, function (format) {
+							each(formatList, function(format) {
                                     // Check collapsed state if it exists
                                     if ('collapsed' in format && format.collapsed !== isCollapsed) {
                                         return;
@@ -14744,9 +14696,11 @@
 
                             // Is it valid to wrap this item
                             // TODO: Break this if up, too complex
-                            if (contentEditable && !hasContentEditableState && isValid(wrapName, nodeName) && isValid(parentName, wrapName) && !(!node_specific && node.nodeType === 3 &&
+						if (contentEditable && !hasContentEditableState && isValid(wrapName, nodeName) && isValid(parentName, wrapName) &&
+								!(!node_specific && node.nodeType === 3 &&
                                 node.nodeValue.length === 1 &&
-                                node.nodeValue.charCodeAt(0) === 65279) && !isCaretNode(node) &&
+								node.nodeValue.charCodeAt(0) === 65279) &&
+								!isCaretNode(node) &&
                                 (!format.inline || !isBlock(node))) {
                                 // Start wrapping
                                 if (!currentWrapElm) {
@@ -14778,7 +14732,7 @@
 
                     // Apply formats to links as well to get the color of the underline to change as well
                     if (format.links === true) {
-                        each(newWrappers, function (node) {
+					each(newWrappers, function(node) {
                             function process(node) {
                                 if (node.nodeName === 'A') {
                                     setElementFormat(node, format);
@@ -14792,13 +14746,13 @@
                     }
 
                     // Cleanup
-                    each(newWrappers, function (node) {
+				each(newWrappers, function(node) {
                         var childCount;
 
                         function getChildCount(node) {
                             var count = 0;
 
-                            each(node.childNodes, function (node) {
+						each(node.childNodes, function(node) {
                                 if (!isWhiteSpaceNode(node) && !isBookmarkNode(node)) {
                                     count++;
                                 }
@@ -14810,7 +14764,7 @@
                         function mergeStyles(node) {
                             var child, clone;
 
-                            each(node.childNodes, function (node) {
+						each(node.childNodes, function(node) {
                                 if (node.nodeType == 1 && !isBookmarkNode(node) && !isCaretNode(node)) {
                                     child = node;
                                     return FALSE; // break loop
@@ -14846,11 +14800,11 @@
                             }
 
                             // Remove/merge children
-                            each(formatList, function (format) {
+						each(formatList, function(format) {
                                 // Merge all children of similar type will move styles from child to parent
                                 // this: <span style="color:red"><b><span style="color:red; font-size:10px">text</span></b></span>
                                 // will become: <span style="color:red"><b><span style="font-size:10px">text</span></b></span>
-                                each(dom.select(format.inline, node), function (child) {
+							each(dom.select(format.inline, node), function(child) {
                                     if (isBookmarkNode(child)) {
                                         return;
                                     }
@@ -14868,7 +14822,7 @@
 
                             // Look for parent with similar style format
                             if (format.merge_with_parents) {
-                                dom.getParent(node.parentNode, function (parent) {
+							dom.getParent(node.parentNode, function(parent) {
                                     if (matchNode(parent, name, vars)) {
                                         dom.remove(node, 1);
                                         node = 0;
@@ -14981,7 +14935,7 @@
                     var formatRoot;
 
                     // Find format root
-                    each(getParents(container.parentNode).reverse(), function (parent) {
+				each(getParents(container.parentNode).reverse(), function(parent) {
                         var format;
 
                         // Find format root element
@@ -15097,11 +15051,9 @@
                                 endContainer = endContainer.firstChild || endContainer;
                             }
 
-                            if (dom.isChildOf(startContainer, endContainer) && !isBlock(endContainer) && !isTableCell(startContainer) && !isTableCell(endContainer)) {
-                                startContainer = wrap(startContainer, 'span', {
-                                    id: '_start',
-                                    'data-mce-type': 'bookmark'
-                                });
+						if (dom.isChildOf(startContainer, endContainer) && !isBlock(endContainer) &&
+							!isTableCell(startContainer) && !isTableCell(endContainer)) {
+							startContainer = wrap(startContainer, 'span', {id: '_start', 'data-mce-type': 'bookmark'});
                                 splitToFormatRoot(startContainer);
                                 startContainer = unwrap(TRUE);
                                 return;
@@ -15130,8 +15082,8 @@
                     }
 
                     // Remove items between start/end
-                    rangeUtils.walk(rng, function (nodes) {
-                        each(nodes, function (node) {
+				rangeUtils.walk(rng, function(nodes) {
+					each(nodes, function(node) {
                             process(node);
 
                             // Remove parent span if it only contains text-decoration: underline, yet a parent node is also underlined.
@@ -15296,7 +15248,7 @@
                     }
 
                     // Find first node with similar format settings
-                    node = dom.getParent(node, function (node) {
+				node = dom.getParent(node, function(node) {
                         return node.parentNode === root || !!matchNode(node, name, vars, true);
                     });
 
@@ -15339,7 +15291,7 @@
 
                 // Check start of selection for formats
                 startElement = selection.getStart();
-                dom.getParent(startElement, function (node) {
+			dom.getParent(startElement, function(node) {
                     var i, name;
 
                     for (i = 0; i < names.length; i++) {
@@ -15406,21 +15358,21 @@
                     formatChangeData = {};
                     currentFormats = {};
 
-                    ed.on('NodeChange', function (e) {
+				ed.on('NodeChange', function(e) {
                         var parents = getParents(e.element), matchedFormats = {};
 
                         // Ignore bogus nodes like the <a> tag created by moveStart()
-                        parents = Tools.grep(parents, function (node) {
+					parents = Tools.grep(parents, function(node) {
                             return node.nodeType == 1 && !node.getAttribute('data-mce-bogus');
                         });
 
                         // Check for new formats
-                        each(formatChangeData, function (callbacks, format) {
-                            each(parents, function (node) {
+					each(formatChangeData, function(callbacks, format) {
+						each(parents, function(node) {
                                 if (matchNode(node, format, {}, callbacks.similar)) {
                                     if (!currentFormats[format]) {
                                         // Execute callbacks
-                                        each(callbacks, function (callback) {
+									each(callbacks, function(callback) {
                                             callback(true, {node: node, format: format, parents: parents});
                                         });
 
@@ -15434,11 +15386,11 @@
                         });
 
                         // Check if current formats still match
-                        each(currentFormats, function (callbacks, format) {
+					each(currentFormats, function(callbacks, format) {
                             if (!matchedFormats[format]) {
                                 delete currentFormats[format];
 
-                                each(callbacks, function (callback) {
+							each(callbacks, function(callback) {
                                     callback(false, {node: e.element, format: format, parents: parents});
                                 });
                             }
@@ -15447,7 +15399,7 @@
                 }
 
                 // Add format listeners
-                each(formats.split(','), function (format) {
+			each(formats.split(','), function(format) {
                     if (!formatChangeData[format]) {
                         formatChangeData[format] = [];
                         formatChangeData[format].similar = similar;
@@ -15492,12 +15444,12 @@
             // Initialize
             defaultFormats();
             addKeyboardShortcuts();
-            ed.on('BeforeGetContent', function (e) {
+		ed.on('BeforeGetContent', function(e) {
                 if (markCaretContainersBogus && e.format != 'raw') {
                     markCaretContainersBogus();
                 }
             });
-            ed.on('mouseup keydown', function (e) {
+		ed.on('mouseup keydown', function(e) {
                 if (disableCaretContainer) {
                     disableCaretContainer(e);
                 }
@@ -15601,7 +15553,7 @@
                 if (typeof value != "string") {
                     value = value(vars);
                 } else if (vars) {
-                    value = value.replace(/%(\w+)/g, function (str, name) {
+				value = value.replace(/%(\w+)/g, function(str, name) {
                         return vars[name] || str;
                     });
                 }
@@ -15836,7 +15788,7 @@
 
                     // Expand to first wrappable block element or any block element
                     if (!node) {
-                        node = dom.getParent(container.nodeType == 3 ? container.parentNode : container, function (node) {
+					node = dom.getParent(container.nodeType == 3 ? container.parentNode : container, function(node) {
                             // Fixes #6183 where it would expand to editable parent element in inline mode
                             return node != root && isTextBlock(node);
                         });
@@ -16009,7 +15961,7 @@
                 // Should we compare with format attribs and styles
                 if (format.remove != 'all') {
                     // Remove styles
-                    each(format.styles, function (value, name) {
+				each(format.styles, function(value, name) {
                         value = normalizeStyleValue(replaceVars(value, vars), name);
 
                         // Indexed array
@@ -16032,7 +15984,7 @@
                     }
 
                     // Remove attributes
-                    each(format.attributes, function (value, name) {
+				each(format.attributes, function(value, name) {
                         var valueOut;
 
                         value = replaceVars(value, vars);
@@ -16050,7 +16002,7 @@
                                 if (value) {
                                     // Build new class value where everything is removed except the internal prefixed classes
                                     valueOut = '';
-                                    each(value.split(/\s+/), function (cls) {
+								each(value.split(/\s+/), function(cls) {
                                         if (/mce\-\w+/.test(cls)) {
                                             valueOut += (valueOut ? ' ' : '') + cls;
                                         }
@@ -16079,7 +16031,7 @@
                     });
 
                     // Remove classes
-                    each(format.classes, function (value) {
+				each(format.classes, function(value) {
                         value = replaceVars(value, vars);
 
                         if (!compare_node || dom.hasClass(compare_node, value)) {
@@ -16146,7 +16098,7 @@
                         // Wrap the block in a forcedRootBlock if we are at the root of document
                         if (parentNode == dom.getRoot()) {
                             if (!format.list_block || !isEq(node, format.list_block)) {
-                                each(grep(node.childNodes), function (node) {
+							each(grep(node.childNodes), function(node) {
                                     if (isValid(forcedRootBlock, node.nodeName.toLowerCase())) {
                                         if (!rootBlockElm) {
                                             rootBlockElm = wrap(node, forcedRootBlock);
@@ -16236,7 +16188,7 @@
                         dom.remove(next);
 
                         // Move children into prev node
-                        each(grep(next.childNodes), function (node) {
+					each(grep(next.childNodes), function(node) {
                             prev.appendChild(node);
                         });
 
@@ -16281,11 +16233,7 @@
 
                 // Creates a caret container bogus element
                 function createCaretContainer(fill) {
-                    var caretContainer = dom.create('span', {
-                        id: caretContainerId,
-                        'data-mce-bogus': true,
-                        style: debug ? 'color:red' : ''
-                    });
+				var caretContainer = dom.create('span', {id: caretContainerId, 'data-mce-bogus': true, style: debug ? 'color:red' : ''});
 
                     if (fill) {
                         caretContainer.appendChild(ed.getDoc().createTextNode(INVISIBLE_CHAR));
@@ -16523,7 +16471,7 @@
 
                     caretContainer = getParentCaretContainer(selection.getStart());
                     if (caretContainer && !dom.isEmpty(caretContainer)) {
-                        walk(caretContainer, function (node) {
+					walk(caretContainer, function(node) {
                             if (node.nodeType == 1 && node.id !== caretContainerId && !dom.isEmpty(node)) {
                                 dom.setAttrib(node, 'data-mce-bogus', null);
                             }
@@ -16534,7 +16482,7 @@
                 // Only bind the caret events once
                 if (!ed._hasCaretEvents) {
                     // Mark current caret container elements as bogus when getting the contents so we don't end up with empty elements
-                    markCaretContainersBogus = function () {
+				markCaretContainersBogus = function() {
                         var nodes = [], i;
 
                         if (isCaretContainerEmpty(getParentCaretContainer(selection.getStart()), nodes)) {
@@ -16546,7 +16494,7 @@
                         }
                     };
 
-                    disableCaretContainer = function (e) {
+				disableCaretContainer = function(e) {
                         var keyCode = e.keyCode;
 
                         removeCaretContainer();
@@ -16565,7 +16513,7 @@
                     };
 
                     // Remove bogus state if they got filled by contents using editor.selection.setContent
-                    ed.on('SetContent', function (e) {
+				ed.on('SetContent', function(e) {
                         if (e.selection) {
                             unmarkBogusCaretParents();
                         }
@@ -16632,11 +16580,11 @@
                 }
             }
         };
-    });
+});
 
 // Included from: js/tinymce/classes/UndoManager.js
 
-    /**
+/**
      * UndoManager.js
      *
      * Released under LGPL License.
@@ -16646,17 +16594,17 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This class handles the undo/redo history levels for the editor. Since the built-in undo/redo has major drawbacks a custom one was needed.
      *
      * @class tinymce.UndoManager
      */
-    define("tinymce/UndoManager", [
+define("tinymce/UndoManager", [
         "tinymce/util/VK",
         "tinymce/Env",
         "tinymce/util/Tools",
         "tinymce/html/SaxParser"
-    ], function (VK, Env, Tools, SaxParser) {
+], function(VK, Env, Tools, SaxParser) {
         var trim = Tools.trim, trimContentRegExp;
 
         trimContentRegExp = new RegExp([
@@ -16664,7 +16612,7 @@
             '\\s?data-mce-selected="[^"]+"' // Trim temporaty data-mce prefixed attributes like data-mce-selected
         ].join('|'), 'gi');
 
-        return function (editor) {
+	return function(editor) {
             var self = this, index = 0, data = [], beforeBookmark, isFirstTypedCharacter, locks = 0;
 
             /**
@@ -16713,12 +16661,12 @@
             }
 
             // Add initial undo level when the editor is initialized
-            editor.on('init', function () {
+		editor.on('init', function() {
                 self.add();
             });
 
             // Get position before an execCommand is processed
-            editor.on('BeforeExecCommand', function (e) {
+		editor.on('BeforeExecCommand', function(e) {
                 var cmd = e.command;
 
                 if (cmd != 'Undo' && cmd != 'Redo' && cmd != 'mceRepaint') {
@@ -16727,7 +16675,7 @@
             });
 
             // Add undo level after an execCommand call was made
-            editor.on('ExecCommand', function (e) {
+		editor.on('ExecCommand', function(e) {
                 var cmd = e.command;
 
                 if (cmd != 'Undo' && cmd != 'Redo' && cmd != 'mceRepaint') {
@@ -16735,14 +16683,14 @@
                 }
             });
 
-            editor.on('ObjectResizeStart Cut', function () {
+		editor.on('ObjectResizeStart Cut', function() {
                 self.beforeChange();
             });
 
             editor.on('SaveContent ObjectResized blur', addNonTypingUndoLevel);
             editor.on('DragEnd', addNonTypingUndoLevel);
 
-            editor.on('KeyUp', function (e) {
+		editor.on('KeyUp', function(e) {
                 var keyCode = e.keyCode;
 
                 // If key is prevented then don't add undo level
@@ -16778,7 +16726,7 @@
                 }
             });
 
-            editor.on('KeyDown', function (e) {
+		editor.on('KeyDown', function(e) {
                 var keyCode = e.keyCode;
 
                 // If key is prevented then don't add undo level
@@ -16806,7 +16754,7 @@
                 }
             });
 
-            editor.on('MouseDown', function (e) {
+		editor.on('MouseDown', function(e) {
                 if (self.typing) {
                     addNonTypingUndoLevel(e);
                 }
@@ -16816,7 +16764,7 @@
             editor.addShortcut('meta+z', '', 'Undo');
             editor.addShortcut('meta+y,meta+shift+z', '', 'Redo');
 
-            editor.on('AddUndo Undo Redo ClearUndos', function (e) {
+		editor.on('AddUndo Undo Redo ClearUndos', function(e) {
                 if (!e.isDefaultPrevented()) {
                     editor.nodeChanged();
                 }
@@ -16841,7 +16789,7 @@
                  *
                  * @method beforeChange
                  */
-                beforeChange: function () {
+			beforeChange: function() {
                     if (!locks) {
                         beforeBookmark = editor.selection.getBookmark(2, true);
                     }
@@ -16855,7 +16803,7 @@
                  * @param {DOMEvent} Event Optional event responsible for the creation of the undo level.
                  * @return {Object} Undo level that got added or null it a level wasn't needed.
                  */
-                add: function (level, event) {
+			add: function(level, event) {
                     var i, settings = editor.settings, lastLevel;
 
                     level = level || {};
@@ -16866,11 +16814,7 @@
                     }
 
                     lastLevel = data[index];
-                    if (editor.fire('BeforeAddUndo', {
-                            level: level,
-                            lastLevel: lastLevel,
-                            originalEvent: event
-                        }).isDefaultPrevented()) {
+				if (editor.fire('BeforeAddUndo', {level: level, lastLevel: lastLevel, originalEvent: event}).isDefaultPrevented()) {
                         return null;
                     }
 
@@ -16925,7 +16869,7 @@
                  * @method undo
                  * @return {Object} Undo level or null if no undo was performed.
                  */
-                undo: function () {
+			undo: function() {
                     var level;
 
                     if (self.typing) {
@@ -16956,7 +16900,7 @@
                  * @method redo
                  * @return {Object} Redo level or null if no redo was performed.
                  */
-                redo: function () {
+			redo: function() {
                     var level;
 
                     if (index < data.length - 1) {
@@ -16977,7 +16921,7 @@
                  *
                  * @method clear
                  */
-                clear: function () {
+			clear: function() {
                     data = [];
                     index = 0;
                     self.typing = false;
@@ -16990,7 +16934,7 @@
                  * @method hasUndo
                  * @return {Boolean} true/false if the undo manager has any undo levels.
                  */
-                hasUndo: function () {
+			hasUndo: function() {
                     // Has undo levels or typing and content isn't the same as the initial level
                     return index > 0 || (self.typing && data[0] && getContent() != data[0].content);
                 },
@@ -17001,7 +16945,7 @@
                  * @method hasRedo
                  * @return {Boolean} true/false if the undo manager has any redo levels.
                  */
-                hasRedo: function () {
+			hasRedo: function() {
                     return index < data.length - 1 && !this.typing;
                 },
 
@@ -17014,7 +16958,7 @@
                  * @method transact
                  * @param {function} callback Function to execute dom manipulation logic in.
                  */
-                transact: function (callback) {
+			transact: function(callback) {
                     self.beforeChange();
 
                     try {
@@ -17030,11 +16974,11 @@
 
             return self;
         };
-    });
+});
 
 // Included from: js/tinymce/classes/EnterKey.js
 
-    /**
+/**
      * EnterKey.js
      *
      * Released under LGPL License.
@@ -17044,20 +16988,20 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * Contains logic for handling the enter key to split/generate block elements.
      *
      * @private
      * @class tinymce.EnterKey
      */
-    define("tinymce/EnterKey", [
+define("tinymce/EnterKey", [
         "tinymce/dom/TreeWalker",
         "tinymce/dom/RangeUtils",
         "tinymce/Env"
-    ], function (TreeWalker, RangeUtils, Env) {
+], function(TreeWalker, RangeUtils, Env) {
         var isIE = Env.ie && Env.ie < 11;
 
-        return function (editor) {
+	return function(editor) {
             var dom = editor.dom, selection = editor.selection, settings = editor.settings;
             var undoManager = editor.undoManager, schema = editor.schema, nonEmptyElementsMap = schema.getNonEmptyElements(),
                 moveCaretBeforeOnEnterElementsMap = schema.getMoveCaretBeforeOnEnterElements();
@@ -17069,7 +17013,9 @@
                 // Returns true if the block can be split into two blocks or not
                 function canSplitBlock(node) {
                     return node &&
-                        dom.isBlock(node) && !/^(TD|TH|CAPTION|FORM)$/.test(node.nodeName) && !/^(fixed|absolute)/i.test(node.style.position) &&
+					dom.isBlock(node) &&
+					!/^(TD|TH|CAPTION|FORM)$/.test(node.nodeName) &&
+					!/^(fixed|absolute)/i.test(node.style.position) &&
                         dom.getContentEditable(node) !== "true";
                 }
 
@@ -17127,7 +17073,6 @@
                 // pure whitespace text node or before an image
                 function moveToCaretPosition(root) {
                     var walker, node, rng, lastNode = root, tempElm;
-
                     function firstNonWhiteSpaceNodeSibling(node) {
                         while (node) {
                             if (node.nodeType == 1 || (node.nodeType == 3 && node.data && /[\r\n\s]/.test(node.data))) {
@@ -17698,7 +17643,7 @@
                 undoManager.add();
             }
 
-            editor.on('keydown', function (evt) {
+		editor.on('keydown', function(evt) {
                 if (evt.keyCode == 13) {
                     if (handleEnterKey(evt) !== false) {
                         evt.preventDefault();
@@ -17706,11 +17651,11 @@
                 }
             });
         };
-    });
+});
 
 // Included from: js/tinymce/classes/ForceBlocks.js
 
-    /**
+/**
      * ForceBlocks.js
      *
      * Released under LGPL License.
@@ -17720,14 +17665,14 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * Makes sure that everything gets wrapped in paragraphs.
      *
      * @private
      * @class tinymce.ForceBlocks
      */
-    define("tinymce/ForceBlocks", [], function () {
-        return function (editor) {
+define("tinymce/ForceBlocks", [], function() {
+	return function(editor) {
             var settings = editor.settings, dom = editor.dom, selection = editor.selection;
             var schema = editor.schema, blockElements = schema.getBlockElements();
 
@@ -17847,11 +17792,11 @@
                 editor.on('NodeChange', addRootBlocks);
             }
         };
-    });
+});
 
 // Included from: js/tinymce/classes/EditorCommands.js
 
-    /**
+/**
      * EditorCommands.js
      *
      * Released under LGPL License.
@@ -17861,33 +17806,33 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This class enables you to add custom editor commands and it contains
      * overrides for native browser commands to address various bugs and issues.
      *
      * @class tinymce.EditorCommands
      */
-    define("tinymce/EditorCommands", [
+define("tinymce/EditorCommands", [
         "tinymce/html/Serializer",
         "tinymce/Env",
         "tinymce/util/Tools",
         "tinymce/dom/ElementUtils",
         "tinymce/dom/RangeUtils",
         "tinymce/dom/TreeWalker"
-    ], function (Serializer, Env, Tools, ElementUtils, RangeUtils, TreeWalker) {
+], function(Serializer, Env, Tools, ElementUtils, RangeUtils, TreeWalker) {
         // Added for compression purposes
         var each = Tools.each, extend = Tools.extend;
         var map = Tools.map, inArray = Tools.inArray, explode = Tools.explode;
         var isGecko = Env.gecko, isIE = Env.ie, isOldIE = Env.ie && Env.ie < 11;
         var TRUE = true, FALSE = false;
 
-        return function (editor) {
+	return function(editor) {
             var dom, selection, formatter,
                 commands = {state: {}, exec: {}, value: {}},
                 settings = editor.settings,
                 bookmark;
 
-            editor.on('PreInit', function () {
+		editor.on('PreInit', function() {
                 dom = editor.dom;
                 selection = editor.selection;
                 settings = editor.settings;
@@ -17924,7 +17869,7 @@
                 }
 
                 // Plugin commands
-                each(editor.plugins, function (p) {
+			each(editor.plugins, function(p) {
                     if (p.execCommand && p.execCommand(command, ui, value)) {
                         editor.fire('ExecCommand', {command: command, ui: ui, value: value});
                         state = true;
@@ -18025,8 +17970,8 @@
             function addCommands(command_list, type) {
                 type = type || 'exec';
 
-                each(command_list, function (callback, command) {
-                    each(command.toLowerCase().split(','), function (command) {
+			each(command_list, function(callback, command) {
+				each(command.toLowerCase().split(','), function(command) {
                         commands[type][command] = callback;
                     });
                 });
@@ -18034,7 +17979,7 @@
 
             function addCommand(command, callback, scope) {
                 command = command.toLowerCase();
-                commands.exec[command] = function (command, ui, value, args) {
+			commands.exec[command] = function(command, ui, value, args) {
                     return callback.call(scope || editor, ui, value, args);
                 };
             }
@@ -18065,14 +18010,14 @@
 
             function addQueryStateHandler(command, callback, scope) {
                 command = command.toLowerCase();
-                commands.state[command] = function () {
+			commands.state[command] = function() {
                     return callback.call(scope || editor);
                 };
             }
 
             function addQueryValueHandler(command, callback, scope) {
                 command = command.toLowerCase();
-                commands.value[command] = function () {
+			commands.value[command] = function() {
                     return callback.call(scope || editor);
                 };
             }
@@ -18129,15 +18074,14 @@
             // Add execCommand overrides
             addCommands({
                 // Ignore these, added for compatibility
-                'mceResetDesignMode,mceBeginUndoLevel': function () {
-                },
+			'mceResetDesignMode,mceBeginUndoLevel': function() {},
 
                 // Add undo manager logic
-                'mceEndUndoLevel,mceAddUndoLevel': function () {
+			'mceEndUndoLevel,mceAddUndoLevel': function() {
                     editor.undoManager.add();
                 },
 
-                'Cut,Copy,Paste': function (command) {
+			'Cut,Copy,Paste': function(command) {
                     var doc = editor.getDoc(), failed;
 
                     // Try executing the native command
@@ -18164,7 +18108,7 @@
                 },
 
                 // Override unlink command
-                unlink: function () {
+			unlink: function() {
                     if (selection.isCollapsed()) {
                         var elm = selection.getNode();
                         if (elm.tagName == 'A') {
@@ -18178,7 +18122,7 @@
                 },
 
                 // Override justify commands to use the text formatter engine
-                'JustifyLeft,JustifyCenter,JustifyRight,JustifyFull,JustifyNone': function (command) {
+			'JustifyLeft,JustifyCenter,JustifyRight,JustifyFull,JustifyNone': function(command) {
                     var align = command.substring(7);
 
                     if (align == 'full') {
@@ -18186,7 +18130,7 @@
                     }
 
                     // Remove all other alignments first
-                    each('left,center,right,justify'.split(','), function (name) {
+				each('left,center,right,justify'.split(','), function(name) {
                         if (align != name) {
                             formatter.remove('align' + name);
                         }
@@ -18199,7 +18143,7 @@
                 },
 
                 // Override list commands to fix WebKit bug
-                'InsertUnorderedList,InsertOrderedList': function (command) {
+			'InsertUnorderedList,InsertOrderedList': function(command) {
                     var listElm, listParent;
 
                     execNativeCommand(command);
@@ -18221,16 +18165,16 @@
                 },
 
                 // Override commands to use the text formatter engine
-                'Bold,Italic,Underline,Strikethrough,Superscript,Subscript': function (command) {
+			'Bold,Italic,Underline,Strikethrough,Superscript,Subscript': function(command) {
                     toggleFormat(command);
                 },
 
                 // Override commands to use the text formatter engine
-                'ForeColor,HiliteColor,FontName': function (command, ui, value) {
+			'ForeColor,HiliteColor,FontName': function(command, ui, value) {
                     toggleFormat(command, value);
                 },
 
-                FontSize: function (command, ui, value) {
+			FontSize: function(command, ui, value) {
                     var fontClasses, fontSizes;
 
                     // Convert font size 1-7 to styles
@@ -18248,19 +18192,19 @@
                     toggleFormat(command, value);
                 },
 
-                RemoveFormat: function (command) {
+			RemoveFormat: function(command) {
                     formatter.remove(command);
                 },
 
-                mceBlockQuote: function () {
+			mceBlockQuote: function() {
                     toggleFormat('blockquote');
                 },
 
-                FormatBlock: function (command, ui, value) {
+			FormatBlock: function(command, ui, value) {
                     return toggleFormat(value || 'p');
                 },
 
-                mceCleanup: function () {
+			mceCleanup: function() {
                     var bookmark = selection.getBookmark();
 
                     editor.setContent(editor.getContent({cleanup: TRUE}), {cleanup: TRUE});
@@ -18268,7 +18212,7 @@
                     selection.moveToBookmark(bookmark);
                 },
 
-                mceRemoveNode: function (command, ui, value) {
+			mceRemoveNode: function(command, ui, value) {
                     var node = value || selection.getNode();
 
                     // Make sure that the body node isn't removed
@@ -18279,10 +18223,10 @@
                     }
                 },
 
-                mceSelectNodeDepth: function (command, ui, value) {
+			mceSelectNodeDepth: function(command, ui, value) {
                     var counter = 0;
 
-                    dom.getParent(selection.getNode(), function (node) {
+				dom.getParent(selection.getNode(), function(node) {
                         if (node.nodeType == 1 && counter++ == value) {
                             selection.select(node);
                             return FALSE;
@@ -18290,11 +18234,11 @@
                     }, editor.getBody());
                 },
 
-                mceSelectNode: function (command, ui, value) {
+			mceSelectNode: function(command, ui, value) {
                     selection.select(value);
                 },
 
-                mceInsertContent: function (command, ui, value) {
+			mceInsertContent: function(command, ui, value) {
                     var parser, serializer, parentNode, rootNode, fragment, args;
                     var marker, rng, node, node2, bookmarkHtml, merge, data;
                     var textInlineElements = editor.schema.getTextInlineElements();
@@ -18366,7 +18310,7 @@
                         if (merge) {
                             var root = editor.getBody(), elementUtils = new ElementUtils(dom);
 
-                            each(dom.select('*[data-mce-new]'), function (node) {
+						each(dom.select('*[data-mce-new]'), function(node) {
                                 node.removeAttribute('data-mce-new');
 
                                 for (var testNode = node.parentNode; testNode && testNode != root; testNode = testNode.parentNode) {
@@ -18490,7 +18434,7 @@
                         value = serializer.serialize(
                             parser.parse(
                                 // Need to replace by using a function since $ in the contents would otherwise be a problem
-                                value.replace(/<span (id="mce_marker"|id=mce_marker).+?<\/span>/i, function () {
+							value.replace(/<span (id="mce_marker"|id=mce_marker).+?<\/span>/i, function() {
                                     return serializer.serialize(fragment);
                                 })
                             )
@@ -18540,24 +18484,24 @@
                     editor.addVisual();
                 },
 
-                mceInsertRawHTML: function (command, ui, value) {
+			mceInsertRawHTML: function(command, ui, value) {
                     selection.setContent('tiny_mce_marker');
                     editor.setContent(
-                        editor.getContent().replace(/tiny_mce_marker/g, function () {
+					editor.getContent().replace(/tiny_mce_marker/g, function() {
                             return value;
                         })
                     );
                 },
 
-                mceToggleFormat: function (command, ui, value) {
+			mceToggleFormat: function(command, ui, value) {
                     toggleFormat(value);
                 },
 
-                mceSetContent: function (command, ui, value) {
+			mceSetContent: function(command, ui, value) {
                     editor.setContent(value);
                 },
 
-                'Indent,Outdent': function (command) {
+			'Indent,Outdent': function(command) {
                     var intentValue, indentUnit, value;
 
                     // Setup indent level
@@ -18571,7 +18515,7 @@
                             formatter.apply('div');
                         }
 
-                        each(selection.getSelectedBlocks(), function (element) {
+					each(selection.getSelectedBlocks(), function(element) {
                             if (element.nodeName != "LI") {
                                 var indentStyleName = editor.getParam('indent_use_margin', false) ? 'margin' : 'padding';
 
@@ -18591,7 +18535,7 @@
                     }
                 },
 
-                mceRepaint: function () {
+			mceRepaint: function() {
                     if (isGecko) {
                         try {
                             storeSelection(TRUE);
@@ -18608,20 +18552,20 @@
                     }
                 },
 
-                InsertHorizontalRule: function () {
+			InsertHorizontalRule: function() {
                     editor.execCommand('mceInsertContent', false, '<hr />');
                 },
 
-                mceToggleVisualAid: function () {
+			mceToggleVisualAid: function() {
                     editor.hasVisual = !editor.hasVisual;
                     editor.addVisual();
                 },
 
-                mceReplaceContent: function (command, ui, value) {
+			mceReplaceContent: function(command, ui, value) {
                     editor.execCommand('mceInsertContent', false, value.replace(/\{\$selection\}/g, selection.getContent({format: 'text'})));
                 },
 
-                mceInsertLink: function (command, ui, value) {
+			mceInsertLink: function(command, ui, value) {
                     var anchor;
 
                     if (typeof value == 'string') {
@@ -18644,7 +18588,7 @@
                     }
                 },
 
-                selectAll: function () {
+			selectAll: function() {
                     var root = dom.getRoot(), rng;
 
                     if (selection.getRng().setStart) {
@@ -18665,7 +18609,7 @@
                     }
                 },
 
-                "delete": function () {
+			"delete": function() {
                     execNativeCommand("Delete");
 
                     // Check if body is empty after the delete call if so then set the contents
@@ -18684,11 +18628,11 @@
                     }
                 },
 
-                mceNewDocument: function () {
+			mceNewDocument: function() {
                     editor.setContent('');
                 },
 
-                InsertLineBreak: function (command, ui, value) {
+			InsertLineBreak: function(command, ui, value) {
                     // We load the current event in from EnterKey.js when appropriate to heed
                     // certain event-specific variations such as ctrl-enter in a list
                     var evt = value;
@@ -18779,24 +18723,24 @@
             // Add queryCommandState overrides
             addCommands({
                 // Override justify commands
-                'JustifyLeft,JustifyCenter,JustifyRight,JustifyFull': function (command) {
+			'JustifyLeft,JustifyCenter,JustifyRight,JustifyFull': function(command) {
                     var name = 'align' + command.substring(7);
                     var nodes = selection.isCollapsed() ? [dom.getParent(selection.getNode(), dom.isBlock)] : selection.getSelectedBlocks();
-                    var matches = map(nodes, function (node) {
+				var matches = map(nodes, function(node) {
                         return !!formatter.matchNode(node, name);
                     });
                     return inArray(matches, TRUE) !== -1;
                 },
 
-                'Bold,Italic,Underline,Strikethrough,Superscript,Subscript': function (command) {
+			'Bold,Italic,Underline,Strikethrough,Superscript,Subscript': function(command) {
                     return isFormatMatch(command);
                 },
 
-                mceBlockQuote: function () {
+			mceBlockQuote: function() {
                     return isFormatMatch('blockquote');
                 },
 
-                Outdent: function () {
+			Outdent: function() {
                     var node;
 
                     if (settings.inline_styles) {
@@ -18816,7 +18760,7 @@
                     );
                 },
 
-                'InsertUnorderedList,InsertOrderedList': function (command) {
+			'InsertUnorderedList,InsertOrderedList': function(command) {
                     var list = dom.getParent(selection.getNode(), 'ul,ol');
 
                     return list &&
@@ -18829,7 +18773,7 @@
 
             // Add queryCommandValue overrides
             addCommands({
-                'FontSize,FontName': function (command) {
+			'FontSize,FontName': function(command) {
                     var value = 0, parent;
 
                     if ((parent = dom.getParent(selection.getNode(), 'span'))) {
@@ -18846,20 +18790,20 @@
 
             // Add undo manager logic
             addCommands({
-                Undo: function () {
+			Undo: function() {
                     editor.undoManager.undo();
                 },
 
-                Redo: function () {
+			Redo: function() {
                     editor.undoManager.redo();
                 }
             });
         };
-    });
+});
 
 // Included from: js/tinymce/classes/util/URI.js
 
-    /**
+/**
      * URI.js
      *
      * Released under LGPL License.
@@ -18869,13 +18813,13 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This class handles parsing, modification and serialization of URI/URL strings.
      * @class tinymce.util.URI
      */
-    define("tinymce/util/URI", [
+define("tinymce/util/URI", [
         "tinymce/util/Tools"
-    ], function (Tools) {
+], function(Tools) {
         var each = Tools.each, trim = Tools.trim;
         var queryParts = "source protocol authority userInfo user password host port relative path directory file query anchor".split(' ');
         var DEFAULT_PORTS = {
@@ -18932,7 +18876,7 @@
             /*eslint max-len: 0 */
             url = /^(?:(?![^:@]+:[^:@\/]*@)([^:\/?#.]+):)?(?:\/\/)?((?:(([^:@\/]*):?([^:@\/]*))?@)?([^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/.exec(url);
 
-            each(queryParts, function (v, i) {
+		each(queryParts, function(v, i) {
                 var part = url[i];
 
                 // Zope 3 workaround, they use @@something
@@ -18977,7 +18921,7 @@
              * @method setPath
              * @param {string} path Path string to set.
              */
-            setPath: function (path) {
+		setPath: function(path) {
                 var self = this;
 
                 path = /^(.*?)\/?(\w+)?$/.exec(path);
@@ -19002,7 +18946,7 @@
              * // Converts an absolute URL to an relative URL url will be somedir/somefile.htm
              * var url = new tinymce.util.URI('http://www.site.com/dir/').toRelative('http://www.site.com/dir/somedir/somefile.htm');
              */
-            toRelative: function (uri) {
+		toRelative: function(uri) {
                 var self = this, output;
 
                 if (uri === "./") {
@@ -19050,7 +18994,7 @@
              * // Converts an relative URL to an absolute URL url will be http://www.site.com/dir/somedir/somefile.htm
              * var url = new tinymce.util.URI('http://www.site.com/dir/').toAbsolute('somedir/somefile.htm');
              */
-            toAbsolute: function (uri, noHost) {
+		toAbsolute: function(uri, noHost) {
                 uri = new URI(uri, {base_uri: this});
 
                 return uri.getURI(noHost && this.isSameOrigin(uri));
@@ -19065,7 +19009,7 @@
              * @param {tinymce.util.URI} uri Uri instance to compare.
              * @returns {Boolean} True if the origins are the same.
              */
-            isSameOrigin: function (uri) {
+		isSameOrigin: function(uri) {
                 if (this.host == uri.host && this.protocol == uri.protocol) {
                     if (this.port == uri.port) {
                         return true;
@@ -19087,7 +19031,7 @@
              * @param {String} base Base point to convert the path from.
              * @param {String} path Absolute path to convert into a relative path.
              */
-            toRelPath: function (base, path) {
+		toRelPath: function(base, path) {
                 var items, breakPoint = 0, out = '', i, l;
 
                 // Split the paths
@@ -19139,7 +19083,7 @@
              * @param {String} base Base point to convert the path from.
              * @param {String} path Relative path to convert into an absolute path.
              */
-            toAbsPath: function (base, path) {
+		toAbsPath: function(base, path) {
                 var i, nb = 0, o = [], tr, outPath;
 
                 // Split paths
@@ -19148,7 +19092,7 @@
                 path = path.split('/');
 
                 // Remove empty chunks
-                each(base, function (k) {
+			each(base, function(k) {
                     if (k) {
                         o.push(k);
                     }
@@ -19206,7 +19150,7 @@
              * @method getURI
              * @param {Boolean} noProtoHost Optional no host and protocol part. Defaults to false.
              */
-            getURI: function (noProtoHost) {
+		getURI: function(noProtoHost) {
                 var s, self = this;
 
                 // Rebuild source
@@ -19252,7 +19196,7 @@
             }
         };
 
-        URI.parseDataUri = function (uri) {
+	URI.parseDataUri = function(uri) {
             var type, matches;
 
             uri = decodeURIComponent(uri).split(',');
@@ -19269,11 +19213,11 @@
         };
 
         return URI;
-    });
+});
 
 // Included from: js/tinymce/classes/util/Class.js
 
-    /**
+/**
      * Class.js
      *
      * Released under LGPL License.
@@ -19283,7 +19227,7 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This utilitiy class is used for easier inheritage.
      *
      * Features:
@@ -19294,9 +19238,9 @@
      * * Static functions
      * * Defaults settings
      */
-    define("tinymce/util/Class", [
+define("tinymce/util/Class", [
         "tinymce/util/Tools"
-    ], function (Tools) {
+], function(Tools) {
         var each = Tools.each, extend = Tools.extend;
 
         var extendClass, initializing;
@@ -19305,7 +19249,7 @@
         }
 
         // Provides classical inheritance, based on code made by John Resig
-        Class.extend = extendClass = function (prop) {
+	Class.extend = extendClass = function(prop) {
             var self = this, _super = self.prototype, prototype, name, member;
 
             // The dummy class constructor
@@ -19341,7 +19285,7 @@
             // Creates a overloaded method for the class
             // this enables you to use this._super(); to call the super function
             function createMethod(name, fn) {
-                return function () {
+			return function() {
                     var self = this, tmp = self._super, ret;
 
                     self._super = _super[name];
@@ -19362,7 +19306,7 @@
 
             // Add mixins
             if (prop.Mixins) {
-                each(prop.Mixins, function (mixin) {
+			each(prop.Mixins, function(mixin) {
                     mixin = mixin;
 
                     for (var name in mixin) {
@@ -19379,17 +19323,17 @@
 
             // Generate dummy methods
             if (prop.Methods) {
-                each(prop.Methods.split(','), function (name) {
+			each(prop.Methods.split(','), function(name) {
                     prop[name] = dummy;
                 });
             }
 
             // Generate property methods
             if (prop.Properties) {
-                each(prop.Properties.split(','), function (name) {
+			each(prop.Properties.split(','), function(name) {
                     var fieldName = '_' + name;
 
-                    prop[name] = function (value) {
+				prop[name] = function(value) {
                         var self = this, undef;
 
                         // Set value
@@ -19407,7 +19351,7 @@
 
             // Static functions
             if (prop.Statics) {
-                each(prop.Statics, function (func, name) {
+			each(prop.Statics, function(func, name) {
                     Class[name] = func;
                 });
             }
@@ -19441,11 +19385,11 @@
         };
 
         return Class;
-    });
+});
 
 // Included from: js/tinymce/classes/util/EventDispatcher.js
 
-    /**
+/**
      * EventDispatcher.js
      *
      * Released under LGPL License.
@@ -19455,7 +19399,7 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This class lets you add/remove and fire events by name on the specified scope. This makes
      * it easy to add event listener logic to any class.
      *
@@ -19466,9 +19410,9 @@
      *  eventDispatcher.on('click', function() {console.log('data');});
      *  eventDispatcher.fire('click', {data: 123});
      */
-    define("tinymce/util/EventDispatcher", [
+define("tinymce/util/EventDispatcher", [
         "tinymce/util/Tools"
-    ], function (Tools) {
+], function(Tools) {
         var nativeEvents = Tools.makeMap(
             "focus blur focusin focusout click dblclick mousedown mouseup mousemove mouseover beforepaste paste cut copy selectionchange " +
             "mouseout mouseenter mouseleave wheel keydown keypress keyup input contextmenu dragstart dragend dragover " +
@@ -19517,17 +19461,17 @@
                 // Add event delegation methods if they are missing
                 if (!args.preventDefault) {
                     // Add preventDefault method
-                    args.preventDefault = function () {
+				args.preventDefault = function() {
                         args.isDefaultPrevented = returnTrue;
                     };
 
                     // Add stopPropagation
-                    args.stopPropagation = function () {
+				args.stopPropagation = function() {
                         args.isPropagationStopped = returnTrue;
                     };
 
                     // Add stopImmediatePropagation
-                    args.stopImmediatePropagation = function () {
+				args.stopImmediatePropagation = function() {
                         args.isImmediatePropagationStopped = returnTrue;
                     };
 
@@ -19733,16 +19677,16 @@
          * @return {Boolean} true/false if the event is native or not.
          * @static
          */
-        Dispatcher.isNative = function (name) {
+	Dispatcher.isNative = function(name) {
             return !!nativeEvents[name.toLowerCase()];
         };
 
         return Dispatcher;
-    });
+});
 
 // Included from: js/tinymce/classes/data/Binding.js
 
-    /**
+/**
      * Binding.js
      *
      * Released under LGPL License.
@@ -19752,14 +19696,14 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This class gets dynamically extended to provide a binding between two models. This makes it possible to
      * sync the state of two properties in two models by a layer of abstraction.
      *
      * @private
      * @class tinymce.data.Binding
      */
-    define("tinymce/data/Binding", [], function () {
+define("tinymce/data/Binding", [], function() {
         /**
          * Constructs a new bidning.
          *
@@ -19779,9 +19723,9 @@
          * @param {String} name Name of property to bind.
          * @return {tinymce.data.Binding} Binding instance.
          */
-        Binding.create = function (model, name) {
+	Binding.create = function(model, name) {
             return new Binding({
-                create: function (otherModel, otherName) {
+			create: function(otherModel, otherName) {
                     var bindings;
 
                     function fromSelfToOther(e) {
@@ -19801,7 +19745,7 @@
                     if (!bindings) {
                         bindings = otherModel._bindings = [];
 
-                        otherModel.on('destroy', function () {
+					otherModel.on('destroy', function() {
                             var i = bindings.length;
 
                             while (i--) {
@@ -19810,7 +19754,7 @@
                         });
                     }
 
-                    bindings.push(function () {
+				bindings.push(function() {
                         model.off('change:' + name, fromSelfToOther);
                     });
 
@@ -19820,11 +19764,11 @@
         };
 
         return Binding;
-    });
+});
 
 // Included from: js/tinymce/classes/util/Observable.js
 
-    /**
+/**
      * Observable.js
      *
      * Released under LGPL License.
@@ -19834,19 +19778,19 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This mixin will add event binding logic to classes.
      *
      * @mixin tinymce.util.Observable
      */
-    define("tinymce/util/Observable", [
+define("tinymce/util/Observable", [
         "tinymce/util/EventDispatcher"
-    ], function (EventDispatcher) {
+], function(EventDispatcher) {
         function getEventDispatcher(obj) {
             if (!obj._eventDispatcher) {
                 obj._eventDispatcher = new EventDispatcher({
                     scope: obj,
-                    toggleEvent: function (name, state) {
+				toggleEvent: function(name, state) {
                         if (EventDispatcher.isNative(name) && obj.toggleNativeEvent) {
                             obj.toggleNativeEvent(name, state);
                         }
@@ -19869,7 +19813,7 @@
              * @example
              * instance.fire('event', {...});
              */
-            fire: function (name, args, bubble) {
+		fire: function(name, args, bubble) {
                 var self = this;
 
                 // Prevent all events except the remove event after the instance has been removed
@@ -19904,7 +19848,7 @@
 		 *     // Callback logic
 		 * });
              */
-            on: function (name, callback, prepend) {
+		on: function(name, callback, prepend) {
                 return getEventDispatcher(this).on(name, callback, prepend);
             },
 
@@ -19925,7 +19869,7 @@
              * // Unbind all events
              * instance.off();
              */
-            off: function (name, callback) {
+		off: function(name, callback) {
                 return getEventDispatcher(this).off(name, callback);
             },
 
@@ -19937,7 +19881,7 @@
              * @param {callback} callback Callback to bind only once.
              * @return {Object} Current class instance.
              */
-            once: function (name, callback) {
+		once: function(name, callback) {
                 return getEventDispatcher(this).once(name, callback);
             },
 
@@ -19948,15 +19892,15 @@
              * @param {String} name Name of the event to check for.
              * @return {Boolean} true/false if the event exists or not.
              */
-            hasEventListeners: function (name) {
+		hasEventListeners: function(name) {
                 return getEventDispatcher(this).has(name);
             }
         };
-    });
+});
 
 // Included from: js/tinymce/classes/data/ObservableObject.js
 
-    /**
+/**
      * ObservableObject.js
      *
      * Released under LGPL License.
@@ -19966,18 +19910,18 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This class is a object that is observable when properties changes a change event gets emitted.
      *
      * @private
      * @class tinymce.data.ObservableObject
      */
-    define("tinymce/data/ObservableObject", [
+define("tinymce/data/ObservableObject", [
         "tinymce/data/Binding",
         "tinymce/util/Observable",
         "tinymce/util/Class",
         "tinymce/util/Tools"
-    ], function (Binding, Observable, Class, Tools) {
+], function(Binding, Observable, Class, Tools) {
         function isNode(node) {
             return node.nodeType > 0;
         }
@@ -20048,7 +19992,7 @@
              * @constructor
              * @param {Object} data Initial data for the object.
              */
-            init: function (data) {
+		init: function(data) {
                 var name, value;
 
                 data = data || {};
@@ -20073,7 +20017,7 @@
              * @param {Object} value Value to set for the property.
              * @return {tinymce.data.ObservableObject} Observable object instance.
              */
-            set: function (name, value) {
+		set: function(name, value) {
                 var key, args, oldValue = this.data[name];
 
                 if (value instanceof Binding) {
@@ -20112,7 +20056,7 @@
              * @param {String} name Name of the property to get.
              * @return {Object} Object value of propery.
              */
-            get: function (name) {
+		get: function(name) {
                 return this.data[name];
             },
 
@@ -20123,7 +20067,7 @@
              * @param {String} name Name of the property to check for.
              * @return {Boolean} true/false if the item exists.
              */
-            has: function (name) {
+		has: function(name) {
                 return name in this.data;
             },
 
@@ -20135,7 +20079,7 @@
              * @param {String} name Name of the property to sync with the property it's inserted to.
              * @return {tinymce.data.Binding} Data binding instance.
              */
-            bind: function (name) {
+		bind: function(name) {
                 return Binding.create(this, name);
             },
 
@@ -20145,15 +20089,15 @@
              *
              * @method destroy
              */
-            destroy: function () {
+		destroy: function() {
                 this.fire('destroy');
             }
         });
-    });
+});
 
 // Included from: js/tinymce/classes/ui/Selector.js
 
-    /**
+/**
      * Selector.js
      *
      * Released under LGPL License.
@@ -20163,9 +20107,9 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /*eslint no-nested-ternary:0 */
+/*eslint no-nested-ternary:0 */
 
-    /**
+/**
      * Selector engine, enables you to select controls by using CSS like expressions.
      * We currently only support basic CSS expressions to reduce the size of the core
      * and the ones we support should be enough for most cases.
@@ -20192,9 +20136,9 @@
      *
      * @class tinymce.ui.Selector
      */
-    define("tinymce/ui/Selector", [
+define("tinymce/ui/Selector", [
         "tinymce/util/Class"
-    ], function (Class) {
+], function(Class) {
         "use strict";
 
         /**
@@ -20242,14 +20186,14 @@
              * @method init
              * @param {String} selector CSS like selector expression.
              */
-            init: function (selector) {
+		init: function(selector) {
                 var match = this.match;
 
                 function compileNameFilter(name) {
                     if (name) {
                         name = name.toLowerCase();
 
-                        return function (item) {
+					return function(item) {
                             return name === '*' || item.type === name;
                         };
                     }
@@ -20257,7 +20201,7 @@
 
                 function compileIdFilter(id) {
                     if (id) {
-                        return function (item) {
+					return function(item) {
                             return item._name === id;
                         };
                     }
@@ -20267,7 +20211,7 @@
                     if (classes) {
                         classes = classes.split('.');
 
-                        return function (item) {
+					return function(item) {
                             var i = classes.length;
 
                             while (i--) {
@@ -20283,7 +20227,7 @@
 
                 function compileAttrFilter(name, cmp, check) {
                     if (name) {
-                        return function (item) {
+					return function(item) {
                             var value = item[name] ? item[name]() : '';
 
                             return !cmp ? !!check :
@@ -20307,7 +20251,7 @@
                         if (!name[1]) {
                             name = name[2];
 
-                            return function (item, index, length) {
+						return function(item, index, length) {
                                 return name === 'first' ? index === 0 :
                                     name === 'last' ? index === length - 1 :
                                         name === 'even' ? index % 2 === 0 :
@@ -20320,7 +20264,7 @@
                         // Compile not expression
                         notSelectors = parseChunks(name[1], []);
 
-                        return function (item) {
+					return function(item) {
                             return !match(item, notSelectors);
                         };
                     }
@@ -20397,7 +20341,7 @@
              * @param {Array} selectors Optional array of selectors, mostly used internally.
              * @return {Boolean} true/false state if the control matches or not.
              */
-            match: function (control, selectors) {
+		match: function(control, selectors) {
                 var i, l, si, sl, selector, fi, fl, filters, index, length, siblings, count, item;
 
                 selectors = selectors || this._selectors;
@@ -20460,7 +20404,7 @@
              * @param {tinymce.ui.Control} container Container to look for items in.
              * @return {tinymce.ui.Collection} Collection with matched elements.
              */
-            find: function (container) {
+		find: function(container) {
                 var matches = [], i, l, selectors = this._selectors;
 
                 function collect(items, selector, index) {
@@ -20521,11 +20465,11 @@
         });
 
         return Selector;
-    });
+});
 
 // Included from: js/tinymce/classes/ui/Collection.js
 
-    /**
+/**
      * Collection.js
      *
      * Released under LGPL License.
@@ -20535,7 +20479,7 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * Control collection, this class contains control instances and it enables you to
      * perform actions on all the contained items. This is very similar to how jQuery works.
      *
@@ -20544,11 +20488,11 @@
      *
      * @class tinymce.ui.Collection
      */
-    define("tinymce/ui/Collection", [
+define("tinymce/ui/Collection", [
         "tinymce/util/Tools",
         "tinymce/ui/Selector",
         "tinymce/util/Class"
-    ], function (Tools, Selector, Class) {
+], function(Tools, Selector, Class) {
         "use strict";
 
         var Collection, proto, push = Array.prototype.push, slice = Array.prototype.slice;
@@ -20569,7 +20513,7 @@
              * @method init
              * @param {Array} items Optional array with items to add.
              */
-            init: function (items) {
+		init: function(items) {
                 if (items) {
                     this.add(items);
                 }
@@ -20582,7 +20526,7 @@
              * @param {Array} items Array if items to add to collection.
              * @return {tinymce.ui.Collection} Current collection instance.
              */
-            add: function (items) {
+		add: function(items) {
                 var self = this;
 
                 // Force single item into array
@@ -20607,7 +20551,7 @@
              * @param {Array} items Array with items to set into the Collection.
              * @return {tinymce.ui.Collection} Collection instance.
              */
-            set: function (items) {
+		set: function(items) {
                 var self = this, len = self.length, i;
 
                 self.length = 0;
@@ -20628,14 +20572,14 @@
              * @param {String} selector Selector expression to filter items by.
              * @return {tinymce.ui.Collection} Collection containing the filtered items.
              */
-            filter: function (selector) {
+		filter: function(selector) {
                 var self = this, i, l, matches = [], item, match;
 
                 // Compile string into selector expression
                 if (typeof selector === "string") {
                     selector = new Selector(selector);
 
-                    match = function (item) {
+				match = function(item) {
                         return selector.match(item);
                     };
                 } else {
@@ -20662,7 +20606,7 @@
              * @param {Number} len Optional length to slice.
              * @return {tinymce.ui.Collection} Current collection.
              */
-            slice: function () {
+		slice: function() {
                 return new Collection(slice.apply(this, arguments));
             },
 
@@ -20673,7 +20617,7 @@
              * @param {Number} index Index of the item to set the collection to.
              * @return {tinymce.ui.Collection} Current collection.
              */
-            eq: function (index) {
+		eq: function(index) {
                 return index === -1 ? this.slice(index) : this.slice(index, +index + 1);
             },
 
@@ -20684,7 +20628,7 @@
              * @param {function} callback Callback to execute for each item in collection.
              * @return {tinymce.ui.Collection} Current collection instance.
              */
-            each: function (callback) {
+		each: function(callback) {
                 Tools.each(this, callback);
 
                 return this;
@@ -20696,7 +20640,7 @@
              * @method toArray
              * @return {Array} Array with all items from collection.
              */
-            toArray: function () {
+		toArray: function() {
                 return Tools.toArray(this);
             },
 
@@ -20707,7 +20651,7 @@
              * @param {Control} ctrl Control instance to look for.
              * @return {Number} Index of the specified control or -1.
              */
-            indexOf: function (ctrl) {
+		indexOf: function(ctrl) {
                 var self = this, i = self.length;
 
                 while (i--) {
@@ -20725,7 +20669,7 @@
              * @method reverse
              * @return {tinymce.ui.Collection} Collection instance with reversed items.
              */
-            reverse: function () {
+		reverse: function() {
                 return new Collection(Tools.toArray(this).reverse());
             },
 
@@ -20736,7 +20680,7 @@
              * @param {String} cls Class to check for.
              * @return {Boolean} true/false state if the class exists or not.
              */
-            hasClass: function (cls) {
+		hasClass: function(cls) {
                 return this[0] ? this[0].classes.contains(cls) : false;
             },
 
@@ -20748,11 +20692,11 @@
              * @param {Object} value Optional object value to set.
              * @return {tinymce.ui.Collection} Current collection instance or value of the first item on a get operation.
              */
-            prop: function (name, value) {
+		prop: function(name, value) {
                 var self = this, undef, item;
 
                 if (value !== undef) {
-                    self.each(function (item) {
+				self.each(function(item) {
                         if (item[name]) {
                             item[name](value);
                         }
@@ -20777,10 +20721,10 @@
              * @param {Object} ... Multiple arguments to pass to each function.
              * @return {tinymce.ui.Collection} Current collection.
              */
-            exec: function (name) {
+		exec: function(name) {
                 var self = this, args = Tools.toArray(arguments).slice(1);
 
-                self.each(function (item) {
+			self.each(function(item) {
                     if (item[name]) {
                         item[name].apply(item, args);
                     }
@@ -20795,7 +20739,7 @@
              * @method remove
              * @return {tinymce.ui.Collection} Current collection.
              */
-            remove: function () {
+		remove: function() {
                 var i = this.length;
 
                 while (i--) {
@@ -20812,8 +20756,8 @@
              * @param {String} cls Class to add to each item.
              * @return {tinymce.ui.Collection} Current collection instance.
              */
-            addClass: function (cls) {
-                return this.each(function (item) {
+		addClass: function(cls) {
+			return this.each(function(item) {
                     item.classes.add(cls);
                 });
             },
@@ -20825,8 +20769,8 @@
              * @param {String} cls Class to remove from each item.
              * @return {tinymce.ui.Collection} Current collection instance.
              */
-            removeClass: function (cls) {
-                return this.each(function (item) {
+		removeClass: function(cls) {
+			return this.each(function(item) {
                     item.classes.remove(cls);
                 });
             }
@@ -20934,11 +20878,11 @@
         };
 
         // Extend tinymce.ui.Collection prototype with some generated control specific methods
-        Tools.each('fire on off show hide append prepend before after reflow'.split(' '), function (name) {
-            proto[name] = function () {
+	Tools.each('fire on off show hide append prepend before after reflow'.split(' '), function(name) {
+		proto[name] = function() {
                 var args = Tools.toArray(arguments);
 
-                this.each(function (ctrl) {
+			this.each(function(ctrl) {
                     if (name in ctrl) {
                         ctrl[name].apply(ctrl, args);
                     }
@@ -20949,8 +20893,8 @@
         });
 
         // Extend tinymce.ui.Collection prototype with some property methods
-        Tools.each('text name disabled active selected checked visible parent value data'.split(' '), function (name) {
-            proto[name] = function (value) {
+	Tools.each('text name disabled active selected checked visible parent value data'.split(' '), function(name) {
+		proto[name] = function(value) {
                 return this.prop(name, value);
             };
         });
@@ -20962,11 +20906,11 @@
         Selector.Collection = Collection;
 
         return Collection;
-    });
+});
 
 // Included from: js/tinymce/classes/ui/DomUtils.js
 
-    /**
+/**
      * DomUtils.js
      *
      * Released under LGPL License.
@@ -20976,34 +20920,34 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * Private UI DomUtils proxy.
      *
      * @private
      * @class tinymce.ui.DomUtils
      */
-    define("tinymce/ui/DomUtils", [
+define("tinymce/ui/DomUtils", [
         "tinymce/util/Tools",
         "tinymce/dom/DOMUtils"
-    ], function (Tools, DOMUtils) {
+], function(Tools, DOMUtils) {
         "use strict";
 
         var count = 0;
 
         return {
-            id: function () {
+		id: function() {
                 return 'mceu_' + (count++);
             },
 
-            createFragment: function (html) {
+		createFragment: function(html) {
                 return DOMUtils.DOM.createFragment(html);
             },
 
-            getWindowSize: function () {
+		getWindowSize: function() {
                 return DOMUtils.DOM.getViewPort();
             },
 
-            getSize: function (elm) {
+		getSize: function(elm) {
                 var width, height;
 
                 if (elm.getBoundingClientRect) {
@@ -21019,64 +20963,64 @@
                 return {width: width, height: height};
             },
 
-            getPos: function (elm, root) {
+		getPos: function(elm, root) {
                 return DOMUtils.DOM.getPos(elm, root);
             },
 
-            getViewPort: function (win) {
+		getViewPort: function(win) {
                 return DOMUtils.DOM.getViewPort(win);
             },
 
-            get: function (id) {
+		get: function(id) {
                 return document.getElementById(id);
             },
 
-            addClass: function (elm, cls) {
+		addClass: function(elm, cls) {
                 return DOMUtils.DOM.addClass(elm, cls);
             },
 
-            removeClass: function (elm, cls) {
+		removeClass: function(elm, cls) {
                 return DOMUtils.DOM.removeClass(elm, cls);
             },
 
-            hasClass: function (elm, cls) {
+		hasClass: function(elm, cls) {
                 return DOMUtils.DOM.hasClass(elm, cls);
             },
 
-            toggleClass: function (elm, cls, state) {
+		toggleClass: function(elm, cls, state) {
                 return DOMUtils.DOM.toggleClass(elm, cls, state);
             },
 
-            css: function (elm, name, value) {
+		css: function(elm, name, value) {
                 return DOMUtils.DOM.setStyle(elm, name, value);
             },
 
-            getRuntimeStyle: function (elm, name) {
+		getRuntimeStyle: function(elm, name) {
                 return DOMUtils.DOM.getStyle(elm, name, true);
             },
 
-            on: function (target, name, callback, scope) {
+		on: function(target, name, callback, scope) {
                 return DOMUtils.DOM.bind(target, name, callback, scope);
             },
 
-            off: function (target, name, callback) {
+		off: function(target, name, callback) {
                 return DOMUtils.DOM.unbind(target, name, callback);
             },
 
-            fire: function (target, name, args) {
+		fire: function(target, name, args) {
                 return DOMUtils.DOM.fire(target, name, args);
             },
 
-            innerHtml: function (elm, html) {
+		innerHtml: function(elm, html) {
                 // Workaround for <div> in <p> bug on IE 8 #6178
                 DOMUtils.DOM.setHTML(elm, html);
             }
         };
-    });
+});
 
 // Included from: js/tinymce/classes/ui/BoxUtils.js
 
-    /**
+/**
      * BoxUtils.js
      *
      * Released under LGPL License.
@@ -21086,13 +21030,14 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * Utility class for box parsing and measuing.
      *
      * @private
      * @class tinymce.ui.BoxUtils
      */
-    define("tinymce/ui/BoxUtils", [], function () {
+define("tinymce/ui/BoxUtils", [
+], function() {
         "use strict";
 
         return {
@@ -21104,7 +21049,7 @@
              * @return {Object} Object with top/right/bottom/left properties.
              * @private
              */
-            parseBox: function (value) {
+		parseBox: function(value) {
                 var len, radix = 10;
 
                 if (!value) {
@@ -21142,13 +21087,13 @@
                 };
             },
 
-            measureBox: function (elm, prefix) {
+		measureBox: function(elm, prefix) {
                 function getStyle(name) {
                     var defaultView = document.defaultView;
 
                     if (defaultView) {
                         // Remove camelcase
-                        name = name.replace(/[A-Z]/g, function (a) {
+					name = name.replace(/[A-Z]/g, function(a) {
                             return '-' + a;
                         });
 
@@ -21172,11 +21117,11 @@
                 };
             }
         };
-    });
+});
 
 // Included from: js/tinymce/classes/ui/ClassList.js
 
-    /**
+/**
      * ClassList.js
      *
      * Released under LGPL License.
@@ -21186,15 +21131,15 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * Handles adding and removal of classes.
      *
      * @private
      * @class tinymce.ui.ClassList
      */
-    define("tinymce/ui/ClassList", [
+define("tinymce/ui/ClassList", [
         "tinymce/util/Tools"
-    ], function (Tools) {
+], function(Tools) {
         "use strict";
 
         function noop() {
@@ -21222,7 +21167,7 @@
              * @param {String} cls Class to be added.
              * @return {tinymce.ui.ClassList} Current class list instance.
              */
-            add: function (cls) {
+		add: function(cls) {
                 if (cls && !this.contains(cls)) {
                     this.cls._map[cls] = true;
                     this.cls.push(cls);
@@ -21239,7 +21184,7 @@
              * @param {String} cls Class to be removed.
              * @return {tinymce.ui.ClassList} Current class list instance.
              */
-            remove: function (cls) {
+		remove: function(cls) {
                 if (this.contains(cls)) {
                     for (var i = 0; i < this.cls.length; i++) {
                         if (this.cls[i] === cls) {
@@ -21263,7 +21208,7 @@
              * @param {Boolean} state Optional state if it should be added/removed.
              * @return {tinymce.ui.ClassList} Current class list instance.
              */
-            toggle: function (cls, state) {
+		toggle: function(cls, state) {
                 var curState = this.contains(cls);
 
                 if (curState !== state) {
@@ -21286,7 +21231,7 @@
              * @param {String} cls Class to look for.
              * @return {Boolean} true/false if the class exists or not.
              */
-            contains: function (cls) {
+		contains: function(cls) {
                 return !!this.cls._map[cls];
             },
 
@@ -21297,14 +21242,14 @@
              * @return {String} Space separated list of classes.
              */
 
-            _change: function () {
+		_change: function() {
                 delete this.clsValue;
                 this.onchange.call(this);
             }
         });
 
         // IE 8 compatibility
-        ClassList.prototype.toString = function () {
+	ClassList.prototype.toString = function() {
             var value;
 
             if (this.clsValue) {
@@ -21324,11 +21269,11 @@
         };
 
         return ClassList;
-    });
+});
 
 // Included from: js/tinymce/classes/ui/ReflowQueue.js
 
-    /**
+/**
      * ReflowQueue.js
      *
      * Released under LGPL License.
@@ -21338,7 +21283,7 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This class will automatically reflow controls on the next animation frame within a few milliseconds on older browsers.
      * If the user manually reflows then the automatic reflow will be cancelled. This class is unsed internally when various control states
      * changes that triggers a reflow.
@@ -21346,7 +21291,8 @@
      * @class tinymce.ui.ReflowQueue
      * @static
      */
-    define("tinymce/ui/ReflowQueue", [], function () {
+define("tinymce/ui/ReflowQueue", [
+], function() {
         var dirtyCtrls = {}, animationFrameRequested;
 
         function requestAnimationFrame(callback, element) {
@@ -21375,7 +21321,7 @@
              * @method add
              * @param {tinymce.ui.Control} ctrl Control to add to queue.
              */
-            add: function (ctrl) {
+		add: function(ctrl) {
                 var parent = ctrl.parent();
 
                 if (parent) {
@@ -21390,7 +21336,7 @@
                     if (!animationFrameRequested) {
                         animationFrameRequested = true;
 
-                        requestAnimationFrame(function () {
+					requestAnimationFrame(function() {
                             var id, ctrl;
 
                             animationFrameRequested = false;
@@ -21416,17 +21362,17 @@
              * @method remove
              * @param {tinymce.ui.Control} ctrl Control to remove from queue.
              */
-            remove: function (ctrl) {
+		remove: function(ctrl) {
                 if (dirtyCtrls[ctrl._id]) {
                     delete dirtyCtrls[ctrl._id];
                 }
             }
         };
-    });
+});
 
 // Included from: js/tinymce/classes/ui/Control.js
 
-    /**
+/**
      * Control.js
      *
      * Released under LGPL License.
@@ -21436,15 +21382,15 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /*eslint consistent-this:0 */
+/*eslint consistent-this:0 */
 
-    /**
+/**
      * This is the base class for all controls and containers. All UI control instances inherit
      * from this one as it has the base logic needed by all of them.
      *
      * @class tinymce.ui.Control
      */
-    define("tinymce/ui/Control", [
+define("tinymce/ui/Control", [
         "tinymce/util/Class",
         "tinymce/util/Tools",
         "tinymce/util/EventDispatcher",
@@ -21455,7 +21401,7 @@
         "tinymce/ui/BoxUtils",
         "tinymce/ui/ClassList",
         "tinymce/ui/ReflowQueue"
-    ], function (Class, Tools, EventDispatcher, ObservableObject, Collection, DomUtils, $, BoxUtils, ClassList, ReflowQueue) {
+], function(Class, Tools, EventDispatcher, ObservableObject, Collection, DomUtils, $, BoxUtils, ClassList, ReflowQueue) {
         "use strict";
 
         var hasMouseWheelEventSupport = "onmousewheel" in document;
@@ -21468,7 +21414,7 @@
                 classPrefix: classPrefix
             },
 
-            isRtl: function () {
+		isRtl: function() {
                 return Control.rtl;
             },
 
@@ -21497,7 +21443,7 @@
              * @setting {Boolean} disabled Is the control disabled by default.
              * @setting {String} name Name of the control instance.
              */
-            init: function (settings) {
+		init: function(settings) {
                 var self = this, classes, defaultClasses;
 
                 function applyClasses(classes) {
@@ -21526,7 +21472,7 @@
 
                 self.data = new ObservableObject(settings.data);
 
-                self.classes = new ClassList(function () {
+			self.classes = new ClassList(function() {
                     if (self.state.get('rendered')) {
                         self.getEl().className = this.toString();
                     }
@@ -21547,13 +21493,13 @@
                     applyClasses(classes);
                 }
 
-                Tools.each('title text name visible disabled active value'.split(' '), function (name) {
+			Tools.each('title text name visible disabled active value'.split(' '), function(name) {
                     if (name in settings) {
                         self[name](settings[name]);
                     }
                 });
 
-                self.on('click', function () {
+			self.on('click', function() {
                     if (self.disabled()) {
                         return false;
                     }
@@ -21584,7 +21530,7 @@
              * @method getContainerElm
              * @return {Element} HTML DOM element to render into.
              */
-            getContainerElm: function () {
+		getContainerElm: function() {
                 return document.body;
             },
 
@@ -21595,7 +21541,7 @@
              * @param {Element} elm HTML dom element to get parent control from.
              * @return {tinymce.ui.Control} Control instance or undefined.
              */
-            getParentCtrl: function (elm) {
+		getParentCtrl: function(elm) {
                 var ctrl, lookup = this.getRoot().controlIdLookup;
 
                 while (elm && lookup) {
@@ -21618,7 +21564,7 @@
              * @method initLayoutRect
              * @return {Object} Layout rect instance.
              */
-            initLayoutRect: function () {
+		initLayoutRect: function() {
                 var self = this, settings = self.settings, borderBox, layoutRect;
                 var elm = self.getEl(), width, height, minWidth, minHeight, autoResize;
                 var startMinWidth, startMinHeight, initialSize;
@@ -21682,7 +21628,7 @@
              * @param {Object} [newRect] Optional new layout rect.
              * @return {tinymce.ui.Control/Object} Current control or rect object.
              */
-            layoutRect: function (newRect) {
+		layoutRect: function(newRect) {
                 var self = this, curRect = self._layoutRect, lastLayoutRect, size, deltaWidth, deltaHeight, undef, repaintControls;
 
                 // Initialize default layout rect
@@ -21792,12 +21738,12 @@
              *
              * @method repaint
              */
-            repaint: function () {
+		repaint: function() {
                 var self = this, style, bodyStyle, bodyElm, rect, borderBox;
                 var borderW = 0, borderH = 0, lastRepaintRect, round, value;
 
                 // Use Math.round on all values on IE < 9
-                round = !document.createRange ? Math.round : function (value) {
+			round = !document.createRange ? Math.round : function(value) {
                     return value;
                 };
 
@@ -21871,7 +21817,7 @@
              * @param {String/function} callback Callback function to execute ones the event occurs.
              * @return {tinymce.ui.Control} Current control object.
              */
-            on: function (name, callback) {
+		on: function(name, callback) {
                 var self = this;
 
                 function resolveCallbackName(name) {
@@ -21881,9 +21827,9 @@
                         return name;
                     }
 
-                    return function (e) {
+				return function(e) {
                         if (!callback) {
-                            self.parentsAndSelf().each(function (ctrl) {
+						self.parentsAndSelf().each(function(ctrl) {
                                 var callbacks = ctrl.settings.callbacks;
 
                                 if (callbacks && (callback = callbacks[name])) {
@@ -21918,7 +21864,7 @@
              * @param {function} [callback] Callback function to unbind.
              * @return {mxex.ui.Control} Current control object.
              */
-            off: function (name, callback) {
+		off: function(name, callback) {
                 getEventDispatcher(this).off(name, callback);
                 return this;
             },
@@ -21933,7 +21879,7 @@
              * @param {Boolean} [bubble] Value to control bubbeling. Defaults to true.
              * @return {Object} Current arguments object.
              */
-            fire: function (name, args, bubble) {
+		fire: function(name, args, bubble) {
                 var self = this;
 
                 args = args || {};
@@ -21963,7 +21909,7 @@
              * @param {String} name Name of the event to check for.
              * @return {Boolean} True/false state if the event has listeners.
              */
-            hasEventListeners: function (name) {
+		hasEventListeners: function(name) {
                 return getEventDispatcher(this).has(name);
             },
 
@@ -21974,7 +21920,7 @@
              * @param {String} selector Optional selector expression to find parents.
              * @return {tinymce.ui.Collection} Collection with all parent controls.
              */
-            parents: function (selector) {
+		parents: function(selector) {
                 var self = this, ctrl, parents = new Collection();
 
                 // Add each parent to collection
@@ -21997,7 +21943,7 @@
              * @param {String} selector Optional selector expression to find parents.
              * @return {tinymce.ui.Collection} Collection with all parent controls.
              */
-            parentsAndSelf: function (selector) {
+		parentsAndSelf: function(selector) {
                 return new Collection(this).add(this.parents(selector));
             },
 
@@ -22007,7 +21953,7 @@
              * @method next
              * @return {tinymce.ui.Control} Next control instance.
              */
-            next: function () {
+		next: function() {
                 var parentControls = this.parent().items();
 
                 return parentControls[parentControls.indexOf(this) + 1];
@@ -22019,7 +21965,7 @@
              * @method prev
              * @return {tinymce.ui.Control} Previous control instance.
              */
-            prev: function () {
+		prev: function() {
                 var parentControls = this.parent().items();
 
                 return parentControls[parentControls.indexOf(this) - 1];
@@ -22032,7 +21978,7 @@
              * @param {String} html Html string to set as inner html.
              * @return {tinymce.ui.Control} Current control object.
              */
-            innerHtml: function (html) {
+		innerHtml: function(html) {
                 this.$el.html(html);
                 return this;
             },
@@ -22044,7 +21990,7 @@
              * @param {String} [suffix] Suffix to get element by.
              * @return {Element} HTML DOM element for the current control or it's children.
              */
-            getEl: function (suffix) {
+		getEl: function(suffix) {
                 var id = suffix ? this._id + '-' + suffix : this._id;
 
                 if (!this._elmCache[id]) {
@@ -22060,7 +22006,7 @@
              * @method show
              * @return {tinymce.ui.Control} Current control instance.
              */
-            show: function () {
+		show: function() {
                 return this.visible(true);
             },
 
@@ -22070,7 +22016,7 @@
              * @method hide
              * @return {tinymce.ui.Control} Current control instance.
              */
-            hide: function () {
+		hide: function() {
                 return this.visible(false);
             },
 
@@ -22080,7 +22026,7 @@
              * @method focus
              * @return {tinymce.ui.Control} Current control instance.
              */
-            focus: function () {
+		focus: function() {
                 try {
                     this.getEl().focus();
                 } catch (ex) {
@@ -22096,7 +22042,7 @@
              * @method blur
              * @return {tinymce.ui.Control} Current control instance.
              */
-            blur: function () {
+		blur: function() {
                 this.getEl().blur();
 
                 return this;
@@ -22110,7 +22056,7 @@
              * @param {String} value Value of the aria property.
              * @return {tinymce.ui.Control} Current control instance.
              */
-            aria: function (name, value) {
+		aria: function(name, value) {
                 var self = this, elm = self.getEl(self.ariaTarget);
 
                 if (typeof value === "undefined") {
@@ -22135,12 +22081,12 @@
              * @param {Boolean} [translate=true] False if the contents shouldn't be translated.
              * @return {String} Encoded and possible traslated string.
              */
-            encode: function (text, translate) {
+		encode: function(text, translate) {
                 if (translate !== false) {
                     text = this.translate(text);
                 }
 
-                return (text || '').replace(/[&<>"]/g, function (match) {
+			return (text || '').replace(/[&<>"]/g, function(match) {
                     return '&#' + match.charCodeAt(0) + ';';
                 });
             },
@@ -22152,7 +22098,7 @@
              * @param {String} text Text to translate.
              * @return {String} Translated string or the same as the input.
              */
-            translate: function (text) {
+		translate: function(text) {
                 return Control.translate ? Control.translate(text) : text;
             },
 
@@ -22163,7 +22109,7 @@
              * @param {Array/tinymce.ui.Collection} items Array of items to prepend before this control.
              * @return {tinymce.ui.Control} Current control instance.
              */
-            before: function (items) {
+		before: function(items) {
                 var self = this, parent = self.parent();
 
                 if (parent) {
@@ -22180,7 +22126,7 @@
              * @param {Array/tinymce.ui.Collection} items Array of items to append after this control.
              * @return {tinymce.ui.Control} Current control instance.
              */
-            after: function (items) {
+		after: function(items) {
                 var self = this, parent = self.parent();
 
                 if (parent) {
@@ -22196,7 +22142,7 @@
              * @method remove
              * @return {tinymce.ui.Control} Current control instance.
              */
-            remove: function () {
+		remove: function() {
                 var self = this, elm = self.getEl(), parent = self.parent(), newItems, i;
 
                 if (self.items) {
@@ -22210,7 +22156,7 @@
                 if (parent && parent.items) {
                     newItems = [];
 
-                    parent.items().each(function (item) {
+				parent.items().each(function(item) {
                         if (item !== self) {
                             newItems.push(item);
                         }
@@ -22248,7 +22194,7 @@
              * @param {Element} elm Element to render before.
              * @return {tinymce.ui.Control} Current control instance.
              */
-            renderBefore: function (elm) {
+		renderBefore: function(elm) {
                 $(elm).before(this.renderHtml());
                 this.postRender();
                 return this;
@@ -22261,19 +22207,19 @@
              * @param {Element} elm Element to render to.
              * @return {tinymce.ui.Control} Current control instance.
              */
-            renderTo: function (elm) {
+		renderTo: function(elm) {
                 $(elm || this.getContainerElm()).append(this.renderHtml());
                 this.postRender();
                 return this;
             },
 
-            preRender: function () {
+		preRender: function() {
             },
 
-            render: function () {
+		render: function() {
             },
 
-            renderHtml: function () {
+		renderHtml: function() {
                 return '<div id="' + this._id + '" class="' + this.classes + '"></div>';
             },
 
@@ -22283,7 +22229,7 @@
              * @method postRender
              * @return {tinymce.ui.Control} Current control instance.
              */
-            postRender: function () {
+		postRender: function() {
                 var self = this, settings = self.settings, elm, box, parent, name, parentEventsRoot;
 
                 self.$el = $(self.getEl());
@@ -22346,7 +22292,7 @@
 
                 self.bindStates();
 
-                self.state.on('change:visible', function (e) {
+			self.state.on('change:visible', function(e) {
                     var state = e.value, parentCtrl;
 
                     if (self.state.get('rendered')) {
@@ -22370,7 +22316,7 @@
                 self.fire('postrender', {}, false);
             },
 
-            bindStates: function () {
+		bindStates: function() {
             },
 
             /**
@@ -22380,7 +22326,7 @@
              * @param {String} align Alignment in view top|center|bottom.
              * @return {tinymce.ui.Control} Current control instance.
              */
-            scrollIntoView: function (align) {
+		scrollIntoView: function(align) {
                 function getOffset(elm, rootElm) {
                     var x, y, parent = elm;
 
@@ -22419,7 +22365,7 @@
                 return this;
             },
 
-            getRoot: function () {
+		getRoot: function() {
                 var ctrl = this, rootControl, parents = [];
 
                 while (ctrl) {
@@ -22456,7 +22402,7 @@
              * @method reflow
              * @return {tinymce.ui.Control} Current control instance.
              */
-            reflow: function () {
+		reflow: function() {
                 ReflowQueue.remove(this);
 
                 var parent = this.parent();
@@ -22534,8 +22480,8 @@
         /**
          * Setup state properties.
          */
-        Tools.each('text title visible disabled active value'.split(' '), function (name) {
-            proto[name] = function (value) {
+	Tools.each('text title visible disabled active value'.split(' '), function(name) {
+		proto[name] = function(value) {
                 if (arguments.length === 0) {
                     return this.state.get(name);
                 }
@@ -22554,7 +22500,7 @@
             if (!obj._eventDispatcher) {
                 obj._eventDispatcher = new EventDispatcher({
                     scope: obj,
-                    toggleEvent: function (name, state) {
+				toggleEvent: function(name, state) {
                         if (state && EventDispatcher.isNative(name)) {
                             if (!obj._nativeEvents) {
                                 obj._nativeEvents = {};
@@ -22590,7 +22536,7 @@
                 if (ctrl) {
                     ctrl.fire("mouseleave", {target: ctrl.getEl()});
 
-                    ctrl.parents().each(function (ctrl) {
+				ctrl.parents().each(function(ctrl) {
                         ctrl.fire("mouseleave", {target: ctrl.getEl()});
                     });
 
@@ -22712,11 +22658,11 @@
         }
 
         return Control;
-    });
+});
 
 // Included from: js/tinymce/classes/ui/Factory.js
 
-    /**
+/**
      * Factory.js
      *
      * Released under LGPL License.
@@ -22726,9 +22672,9 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /*global tinymce:true */
+/*global tinymce:true */
 
-    /**
+/**
      * This class is a factory for control instances. This enables you
      * to create instances of controls without having to require the UI controls directly.
      *
@@ -22736,7 +22682,7 @@
      *
      * @class tinymce.ui.Factory
      */
-    define("tinymce/ui/Factory", [], function () {
+define("tinymce/ui/Factory", [], function() {
         "use strict";
 
         var types = {}, namespaceInit;
@@ -22749,7 +22695,7 @@
              * @param {String} type Type name for example "button".
              * @param {function} typeClass Class type function.
              */
-            add: function (type, typeClass) {
+		add: function(type, typeClass) {
                 types[type.toLowerCase()] = typeClass;
             },
 
@@ -22760,7 +22706,7 @@
              * @param {String} type Type to look for.
              * @return {Boolean} true/false if the control by name exists.
              */
-            has: function (type) {
+		has: function(type) {
                 return !!types[type.toLowerCase()];
             },
 
@@ -22779,7 +22725,7 @@
              * @param {Object/String} settings Name/Value object with items used to create the type.
              * @return {tinymce.ui.Control} Control instance based on the specified type.
              */
-            create: function (type, settings) {
+		create: function(type, settings) {
                 var ControlType, name, namespace;
 
                 // Build type lookup
@@ -22820,11 +22766,11 @@
                 return ControlType;
             }
         };
-    });
+});
 
 // Included from: js/tinymce/classes/ui/KeyboardNavigation.js
 
-    /**
+/**
      * KeyboardNavigation.js
      *
      * Released under LGPL License.
@@ -22834,12 +22780,13 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This class handles keyboard navigation of controls and elements.
      *
      * @class tinymce.ui.KeyboardNavigation
      */
-    define("tinymce/ui/KeyboardNavigation", [], function () {
+define("tinymce/ui/KeyboardNavigation", [
+], function() {
         "use strict";
 
         /**
@@ -22848,7 +22795,7 @@
          *
          * @constructor
          */
-        return function (settings) {
+	return function(settings) {
             var root = settings.root, focusedElement, focusedControl;
 
             function isElement(node) {
@@ -23168,7 +23115,7 @@
                 focusedControl.fire('click', {target: focusedElement, aria: aria});
             }
 
-            root.on('keydown', function (e) {
+		root.on('keydown', function(e) {
                 function handleNonTabOrEscEvent(e, handler) {
                     // Ignore non tab keys for text elements
                     if (isTextInputElement(focusedElement)) {
@@ -23219,7 +23166,7 @@
                 }
             });
 
-            root.on('focusin', function (e) {
+		root.on('focusin', function(e) {
                 focusedElement = e.target;
                 focusedControl = e.control;
             });
@@ -23228,11 +23175,11 @@
                 focusFirst: focusFirst
             };
         };
-    });
+});
 
 // Included from: js/tinymce/classes/ui/Container.js
 
-    /**
+/**
      * Container.js
      *
      * Released under LGPL License.
@@ -23242,7 +23189,7 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * Container control. This is extended by all controls that can have
      * children such as panels etc. You can also use this class directly as an
      * generic container instance. The container doesn't have any specific role or style.
@@ -23251,7 +23198,7 @@
      * @class tinymce.ui.Container
      * @extends tinymce.ui.Control
      */
-    define("tinymce/ui/Container", [
+define("tinymce/ui/Container", [
         "tinymce/ui/Control",
         "tinymce/ui/Collection",
         "tinymce/ui/Selector",
@@ -23261,7 +23208,7 @@
         "tinymce/dom/DomQuery",
         "tinymce/ui/ClassList",
         "tinymce/ui/ReflowQueue"
-    ], function (Control, Collection, Selector, Factory, KeyboardNavigation, Tools, $, ClassList, ReflowQueue) {
+], function(Control, Collection, Selector, Factory, KeyboardNavigation, Tools, $, ClassList, ReflowQueue) {
         "use strict";
 
         var selectorCache = {};
@@ -23276,7 +23223,7 @@
              * @setting {String} layout Layout manager by name to use.
              * @setting {Object} defaults Default settings to apply to all items.
              */
-            init: function (settings) {
+		init: function(settings) {
                 var self = this;
 
                 self._super(settings);
@@ -23292,7 +23239,7 @@
                     self.classes.add('rtl');
                 }
 
-                self.bodyClasses = new ClassList(function () {
+			self.bodyClasses = new ClassList(function() {
                     if (self.state.get('rendered')) {
                         self.getEl('body').className = this.toString();
                     }
@@ -23324,7 +23271,7 @@
              * @method items
              * @return {tinymce.ui.Collection} Control collection direct child controls.
              */
-            items: function () {
+		items: function() {
                 return this._items;
             },
 
@@ -23335,7 +23282,7 @@
              * @param {String} selector Selector CSS pattern to find children by.
              * @return {tinymce.ui.Collection} Control collection with child controls.
              */
-            find: function (selector) {
+		find: function(selector) {
                 selector = selectorCache[selector] = selectorCache[selector] || new Selector(selector);
 
                 return selector.find(this);
@@ -23349,7 +23296,7 @@
              * @param {Array/Object/tinymce.ui.Control} items Array or item that will be added to the container.
              * @return {tinymce.ui.Collection} Current collection control.
              */
-            add: function (items) {
+		add: function(items) {
                 var self = this;
 
                 self.items().add(self.create(items)).parent(self);
@@ -23365,7 +23312,7 @@
              * @param {Boolean} keyboard Optional true/false if the focus was a keyboard focus or not.
              * @return {tinymce.ui.Collection} Current instance.
              */
-            focus: function (keyboard) {
+		focus: function(keyboard) {
                 var self = this, focusCtrl, keyboardNav, items;
 
                 if (keyboard) {
@@ -23384,7 +23331,7 @@
                     items.add(self.statusbar.items());
                 }
 
-                items.each(function (ctrl) {
+			items.each(function(ctrl) {
                     if (ctrl.settings.autofocus) {
                         focusCtrl = null;
                         return false;
@@ -23409,7 +23356,7 @@
              * @param {tinymce.ui.Control} oldItem Old item to be replaced.
              * @param {tinymce.ui.Control} newItem New item to be inserted.
              */
-            replace: function (oldItem, newItem) {
+		replace: function(oldItem, newItem) {
                 var ctrlElm, items = this.items(), i = items.length;
 
                 // Replace the item in collection
@@ -23446,7 +23393,7 @@
              * @param {Array} items Array of items to convert into control instances.
              * @return {Array} Array with control instances.
              */
-            create: function (items) {
+		create: function(items) {
                 var self = this, settings, ctrlItems = [];
 
                 // Non array structure, then force it into an array
@@ -23455,7 +23402,7 @@
                 }
 
                 // Add default type to each child control
-                Tools.each(items, function (item) {
+			Tools.each(items, function(item) {
                     if (item) {
                         // Construct item if needed
                         if (!(item instanceof Control)) {
@@ -23483,11 +23430,11 @@
              *
              * @private
              */
-            renderNew: function () {
+		renderNew: function() {
                 var self = this;
 
                 // Render any new items
-                self.items().each(function (ctrl, index) {
+			self.items().each(function(ctrl, index) {
                     var containerElm;
 
                     ctrl.parent(self);
@@ -23520,7 +23467,7 @@
              * @param {Array/tinymce.ui.Collection} items Array if controls to append.
              * @return {tinymce.ui.Container} Current container instance.
              */
-            append: function (items) {
+		append: function(items) {
                 return this.add(items).renderNew();
             },
 
@@ -23531,7 +23478,7 @@
              * @param {Array/tinymce.ui.Collection} items Array if controls to prepend.
              * @return {tinymce.ui.Container} Current container instance.
              */
-            prepend: function (items) {
+		prepend: function(items) {
                 var self = this;
 
                 self.items().set(self.create(items).concat(self.items().toArray()));
@@ -23547,7 +23494,7 @@
              * @param {Number} index Index to insert controls at.
              * @param {Boolean} [before=false] Inserts controls before the index.
              */
-            insert: function (items, index, before) {
+		insert: function(items, index, before) {
                 var self = this, curItems, beforeItems, afterItems;
 
                 items = self.create(items);
@@ -23575,7 +23522,7 @@
              * @param {Object} data JSON data object to set control values by.
              * @return {tinymce.ui.Container} Current form instance.
              */
-            fromJSON: function (data) {
+		fromJSON: function(data) {
                 var self = this;
 
                 for (var name in data) {
@@ -23592,10 +23539,10 @@
              * @method toJSON
              * @return {Object} JSON object with form data.
              */
-            toJSON: function () {
+		toJSON: function() {
                 var self = this, data = {};
 
-                self.find('*').each(function (ctrl) {
+			self.find('*').each(function(ctrl) {
                     var name = ctrl.name(), value = ctrl.value();
 
                     if (name && typeof value != "undefined") {
@@ -23612,7 +23559,7 @@
              * @method renderHtml
              * @return {String} HTML representing the control.
              */
-            renderHtml: function () {
+		renderHtml: function() {
                 var self = this, layout = self._layout, role = this.settings.role;
 
                 self.preRender();
@@ -23633,7 +23580,7 @@
              * @method postRender
              * @return {tinymce.ui.Container} Current combobox instance.
              */
-            postRender: function () {
+		postRender: function() {
                 var self = this, box;
 
                 self.items().exec('postRender');
@@ -23673,7 +23620,7 @@
              * @method initLayoutRect
              * @return {Object} Layout rect instance.
              */
-            initLayoutRect: function () {
+		initLayoutRect: function() {
                 var self = this, layoutRect = self._super();
 
                 // Recalc container size by asking layout manager
@@ -23688,7 +23635,7 @@
              *
              * @method recalc
              */
-            recalc: function () {
+		recalc: function() {
                 var self = this, rect = self._layoutRect, lastRect = self._lastRect;
 
                 if (!lastRect || lastRect.w != rect.w || lastRect.h != rect.h) {
@@ -23710,7 +23657,7 @@
              * @method reflow
              * @return {tinymce.ui.Container} Current container instance.
              */
-            reflow: function () {
+		reflow: function() {
                 var i;
 
                 ReflowQueue.remove(this);
@@ -23737,11 +23684,11 @@
                 return this;
             }
         });
-    });
+});
 
 // Included from: js/tinymce/classes/ui/DragHelper.js
 
-    /**
+/**
      * DragHelper.js
      *
      * Released under LGPL License.
@@ -23751,7 +23698,7 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * Drag/drop helper class.
      *
      * @example
@@ -23768,9 +23715,9 @@
      *
      * @class tinymce.ui.DragHelper
      */
-    define("tinymce/ui/DragHelper", [
+define("tinymce/ui/DragHelper", [
         "tinymce/dom/DomQuery"
-    ], function ($) {
+], function($) {
         "use strict";
 
         function getDocumentSize(doc) {
@@ -23805,7 +23752,7 @@
             }
         }
 
-        return function (id, settings) {
+	return function(id, settings) {
             var $eventOverlay, doc = settings.document || document, downButton, start, stop, drag, startX, startY;
 
             settings = settings || {};
@@ -23814,9 +23761,7 @@
                 return doc.getElementById(settings.handle || id);
             }
 
-            start = function (e) {
-
-                console.log('start dragging', e)
+		start = function(e) {
                 var docSize = getDocumentSize(doc), handleElm, cursor;
 
                 updateWithTouchData(e);
@@ -23849,7 +23794,7 @@
                 settings.start(e);
             };
 
-            drag = function (e) {
+		drag = function(e) {
                 updateWithTouchData(e);
 
                 if (e.button !== downButton) {
@@ -23863,7 +23808,7 @@
                 settings.drag(e);
             };
 
-            stop = function (e) {
+		stop = function(e) {
                 updateWithTouchData(e);
 
                 $(doc).off('mousemove touchmove', drag).off('mouseup touchend', stop);
@@ -23880,17 +23825,17 @@
              *
              * @method destroy
              */
-            this.destroy = function () {
+		this.destroy = function() {
                 $(getHandleElm()).off();
             };
 
             $(getHandleElm()).on('mousedown touchstart', start);
         };
-    });
+});
 
 // Included from: js/tinymce/classes/ui/Scrollable.js
 
-    /**
+/**
      * Scrollable.js
      *
      * Released under LGPL License.
@@ -23900,25 +23845,25 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This mixin makes controls scrollable using custom scrollbars.
      *
      * @-x-less Scrollable.less
      * @mixin tinymce.ui.Scrollable
      */
-    define("tinymce/ui/Scrollable", [
+define("tinymce/ui/Scrollable", [
         "tinymce/dom/DomQuery",
         "tinymce/ui/DragHelper"
-    ], function ($, DragHelper) {
+], function($, DragHelper) {
         "use strict";
 
         return {
-            init: function () {
+		init: function() {
                 var self = this;
                 self.on('repaint', self.renderScroll);
             },
 
-            renderScroll: function () {
+		renderScroll: function() {
                 var self = this, margin = 2;
 
                 function repaintScroll() {
@@ -23980,12 +23925,12 @@
                         );
 
                         self.draghelper = new DragHelper(axisId + 't', {
-                            start: function () {
+						start: function() {
                                 scrollStart = self.getEl('body')["scroll" + posName];
                                 $('#' + axisId).addClass(prefix + 'active');
                             },
 
-                            drag: function (e) {
+						drag: function(e) {
                                 var ratio, hasScrollH, hasScrollV, containerSize, layoutRect = self.layoutRect();
 
                                 hasScrollH = layoutRect.contentW > layoutRect.innerW;
@@ -23997,7 +23942,7 @@
                                 self.getEl('body')["scroll" + posName] = scrollStart + (e["delta" + deltaPosName] / ratio);
                             },
 
-                            stop: function () {
+						stop: function() {
                                 $('#' + axisId).removeClass(prefix + 'active');
                             }
                         });
@@ -24014,7 +23959,7 @@
                         self._hasScroll = true;
                         addScroll();
 
-                        self.on('wheel', function (e) {
+					self.on('wheel', function(e) {
                             var bodyEl = self.getEl('body');
 
                             bodyEl.scrollLeft += (e.deltaX || 0) * 10;
@@ -24030,11 +23975,11 @@
                 }
             }
         };
-    });
+});
 
 // Included from: js/tinymce/classes/ui/Panel.js
 
-    /**
+/**
      * Panel.js
      *
      * Released under LGPL License.
@@ -24044,7 +23989,7 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * Creates a new panel.
      *
      * @-x-less Panel.less
@@ -24052,10 +23997,10 @@
      * @extends tinymce.ui.Container
      * @mixes tinymce.ui.Scrollable
      */
-    define("tinymce/ui/Panel", [
+define("tinymce/ui/Panel", [
         "tinymce/ui/Container",
         "tinymce/ui/Scrollable"
-    ], function (Container, Scrollable) {
+], function(Container, Scrollable) {
         "use strict";
 
         return Container.extend({
@@ -24072,7 +24017,7 @@
              * @method renderHtml
              * @return {String} HTML representing the control.
              */
-            renderHtml: function () {
+		renderHtml: function() {
                 var self = this, layout = self._layout, innerHtml = self.settings.html;
 
                 self.preRender();
@@ -24100,11 +24045,11 @@
                 );
             }
         });
-    });
+});
 
 // Included from: js/tinymce/classes/ui/Movable.js
 
-    /**
+/**
      * Movable.js
      *
      * Released under LGPL License.
@@ -24114,14 +24059,14 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * Movable mixin. Makes controls movable absolute and relative to other elements.
      *
      * @mixin tinymce.ui.Movable
      */
-    define("tinymce/ui/Movable", [
+define("tinymce/ui/Movable", [
         "tinymce/ui/DomUtils"
-    ], function (DomUtils) {
+], function(DomUtils) {
         "use strict";
 
         function calculateRelativePosition(ctrl, targetElm, rel) {
@@ -24204,7 +24149,7 @@
              * @param {Array} rels Array with relative positions.
              * @return {String} Best suitable relative position.
              */
-            testMoveRel: function (elm, rels) {
+		testMoveRel: function(elm, rels) {
                 var viewPortRect = DomUtils.getViewPort();
 
                 for (var i = 0; i < rels.length; i++) {
@@ -24233,7 +24178,7 @@
              * @param {String} rel Relative mode. For example: br-tl.
              * @return {tinymce.ui.Control} Current control instance.
              */
-            moveRel: function (elm, rel) {
+		moveRel: function(elm, rel) {
                 if (typeof rel != 'string') {
                     rel = this.testMoveRel(elm, rel);
                 }
@@ -24250,7 +24195,7 @@
              * @param {Number} dy Relative y position.
              * @return {tinymce.ui.Control} Current control instance.
              */
-            moveBy: function (dx, dy) {
+		moveBy: function(dx, dy) {
                 var self = this, rect = self.layoutRect();
 
                 self.moveTo(rect.x + dx, rect.y + dy);
@@ -24266,7 +24211,7 @@
              * @param {Number} y Absolute y position.
              * @return {tinymce.ui.Control} Current control instance.
              */
-            moveTo: function (x, y) {
+		moveTo: function(x, y) {
                 var self = this;
 
                 // TODO: Move this to some global class
@@ -24303,11 +24248,11 @@
                 return self;
             }
         };
-    });
+});
 
 // Included from: js/tinymce/classes/ui/Resizable.js
 
-    /**
+/**
      * Resizable.js
      *
      * Released under LGPL License.
@@ -24317,14 +24262,14 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * Resizable mixin. Enables controls to be resized.
      *
      * @mixin tinymce.ui.Resizable
      */
-    define("tinymce/ui/Resizable", [
+define("tinymce/ui/Resizable", [
         "tinymce/ui/DomUtils"
-    ], function (DomUtils) {
+], function(DomUtils) {
         "use strict";
 
         return {
@@ -24333,7 +24278,7 @@
              *
              * @method resizeToContent
              */
-            resizeToContent: function () {
+		resizeToContent: function() {
                 this._layoutRect.autoResize = true;
                 this._lastRect = null;
                 this.reflow();
@@ -24347,7 +24292,7 @@
              * @param {Number} h Control height.
              * @return {tinymce.ui.Control} Current control instance.
              */
-            resizeTo: function (w, h) {
+		resizeTo: function(w, h) {
                 // TODO: Fix hack
                 if (w <= 1 || h <= 1) {
                     var rect = DomUtils.getWindowSize();
@@ -24368,17 +24313,17 @@
              * @param {Number} dh Relative control height.
              * @return {tinymce.ui.Control} Current control instance.
              */
-            resizeBy: function (dw, dh) {
+		resizeBy: function(dw, dh) {
                 var self = this, rect = self.layoutRect();
 
                 return self.resizeTo(rect.w + dw, rect.h + dh);
             }
         };
-    });
+});
 
 // Included from: js/tinymce/classes/ui/FloatPanel.js
 
-    /**
+/**
      * FloatPanel.js
      *
      * Released under LGPL License.
@@ -24388,7 +24333,7 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This class creates a floating panel.
      *
      * @-x-less FloatPanel.less
@@ -24397,13 +24342,13 @@
      * @mixes tinymce.ui.Movable
      * @mixes tinymce.ui.Resizable
      */
-    define("tinymce/ui/FloatPanel", [
+define("tinymce/ui/FloatPanel", [
         "tinymce/ui/Panel",
         "tinymce/ui/Movable",
         "tinymce/ui/Resizable",
         "tinymce/ui/DomUtils",
         "tinymce/dom/DomQuery"
-    ], function (Panel, Movable, Resizable, DomUtils, $) {
+], function(Panel, Movable, Resizable, DomUtils, $) {
         "use strict";
 
         var documentClickHandler, documentScrollHandler, windowResizeHandler, visiblePanels = [];
@@ -24445,7 +24390,7 @@
         function bindDocumentClickHandler() {
 
             if (!documentClickHandler) {
-                documentClickHandler = function (e) {
+			documentClickHandler = function(e) {
                     // Gecko fires click event and in the wrong order on Mac so lets normalize
                     if (e.button == 2) {
                         return;
@@ -24460,7 +24405,7 @@
 
         function bindDocumentScrollHandler() {
             if (!documentScrollHandler) {
-                documentScrollHandler = function () {
+			documentScrollHandler = function() {
                     var i;
 
                     i = visiblePanels.length;
@@ -24477,7 +24422,7 @@
             if (!windowResizeHandler) {
                 var docElm = document.documentElement, clientWidth = docElm.clientWidth, clientHeight = docElm.clientHeight;
 
-                windowResizeHandler = function () {
+			windowResizeHandler = function() {
                     // Workaround for #7065 IE 7 fires resize events event though the window wasn't resized
                     if (!document.all || clientWidth != docElm.clientWidth || clientHeight != docElm.clientHeight) {
                         clientWidth = docElm.clientWidth;
@@ -24580,7 +24525,7 @@
              * @param {Object} settings Name/value object with settings.
              * @setting {Boolean} autohide Automatically hide the panel.
              */
-            init: function (settings) {
+		init: function(settings) {
                 var self = this;
 
                 self._super(settings);
@@ -24598,12 +24543,12 @@
                 if (settings.autofix) {
                     bindDocumentScrollHandler();
 
-                    self.on('move', function () {
+				self.on('move', function() {
                         repositionPanel(this);
                     });
                 }
 
-                self.on('postrender show', function (e) {
+			self.on('postrender show', function(e) {
                     if (e.control == self) {
                         var $modalBlockEl, prefix = self.classPrefix;
 
@@ -24615,7 +24560,7 @@
                                 ).appendTo(self.getContainerElm());
                             }
 
-                            setTimeout(function () {
+						setTimeout(function() {
                                 $modalBlockEl.addClass(prefix + 'in');
                                 $(self.getEl()).addClass(prefix + 'in');
                             }, 0);
@@ -24627,8 +24572,8 @@
                     }
                 });
 
-                self.on('show', function () {
-                    self.parents().each(function (ctrl) {
+			self.on('show', function() {
+				self.parents().each(function(ctrl) {
                         if (ctrl.state.get('fixed')) {
                             self.fixed(true);
                             return false;
@@ -24642,7 +24587,7 @@
                 }
             },
 
-            fixed: function (state) {
+		fixed: function(state) {
                 var self = this;
 
                 if (self.state.get('fixed') != state) {
@@ -24669,7 +24614,7 @@
              * @method show
              * @return {tinymce.ui.FloatPanel} Current floatpanel instance.
              */
-            show: function () {
+		show: function() {
                 var self = this, i, state = self._super();
 
                 i = visiblePanels.length;
@@ -24692,7 +24637,7 @@
              * @method hide
              * @return {tinymce.ui.FloatPanel} Current floatpanel instance.
              */
-            hide: function () {
+		hide: function() {
                 removeVisiblePanel(this);
                 addRemove(false, this);
 
@@ -24705,7 +24650,7 @@
              *
              * @method hideAll
              */
-            hideAll: function () {
+		hideAll: function() {
                 FloatPanel.hideAll();
             },
 
@@ -24714,7 +24659,7 @@
              *
              * @method close
              */
-            close: function () {
+		close: function() {
                 var self = this;
 
                 if (!self.fire('close').isDefaultPrevented()) {
@@ -24730,12 +24675,12 @@
              *
              * @method remove
              */
-            remove: function () {
+		remove: function() {
                 removeVisiblePanel(this);
                 this._super();
             },
 
-            postRender: function () {
+		postRender: function() {
                 var self = this;
 
                 if (self.settings.bodyRole) {
@@ -24753,7 +24698,7 @@
          * @static
          * @method hideAll
          */
-        FloatPanel.hideAll = function () {
+	FloatPanel.hideAll = function() {
             var i = visiblePanels.length;
 
             while (i--) {
@@ -24785,11 +24730,11 @@
         }
 
         return FloatPanel;
-    });
+});
 
 // Included from: js/tinymce/classes/ui/Window.js
 
-    /**
+/**
      * Window.js
      *
      * Released under LGPL License.
@@ -24799,14 +24744,14 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * Creates a new window.
      *
      * @-x-less Window.less
      * @class tinymce.ui.Window
      * @extends tinymce.ui.FloatPanel
      */
-    define("tinymce/ui/Window", [
+define("tinymce/ui/Window", [
         "tinymce/ui/FloatPanel",
         "tinymce/ui/Panel",
         "tinymce/ui/DomUtils",
@@ -24814,7 +24759,7 @@
         "tinymce/ui/DragHelper",
         "tinymce/ui/BoxUtils",
         "tinymce/Env"
-    ], function (FloatPanel, Panel, DomUtils, $, DragHelper, BoxUtils, Env) {
+], function(FloatPanel, Panel, DomUtils, $, DragHelper, BoxUtils, Env) {
         "use strict";
 
         var windows = [], oldMetaValue = '';
@@ -24858,7 +24803,7 @@
                 h: window.innerHeight
             };
 
-            window.setInterval(function () {
+		window.setInterval(function() {
                 var w = window.innerWidth,
                     h = window.innerHeight;
 
@@ -24897,11 +24842,11 @@
                 containerCls: 'panel',
                 role: 'dialog',
                 callbacks: {
-                    submit: function () {
+				submit: function() {
                         this.fire('submit', {data: this.toJSON()});
                     },
 
-                    close: function () {
+				close: function() {
                         this.close();
                     }
                 }
@@ -24913,7 +24858,7 @@
              * @constructor
              * @param {Object} settings Name/value object with settings.
              */
-            init: function (settings) {
+		init: function(settings) {
                 var self = this;
 
                 self._super(settings);
@@ -24945,13 +24890,13 @@
                     self.statusbar.parent(self);
                 }
 
-                self.on('click', function (e) {
+			self.on('click', function(e) {
                     if (e.target.className.indexOf(self.classPrefix + 'close') != -1) {
                         self.close();
                     }
                 });
 
-                self.on('cancel', function () {
+			self.on('cancel', function() {
                     self.close();
                 });
 
@@ -24966,7 +24911,7 @@
              *
              * @method recalc
              */
-            recalc: function () {
+		recalc: function() {
                 var self = this, statusbar = self.statusbar, layoutRect, width, x, needsRecalc;
 
                 if (self._fullscreen) {
@@ -25014,7 +24959,7 @@
              * @method initLayoutRect
              * @return {Object} Layout rect instance.
              */
-            initLayoutRect: function () {
+		initLayoutRect: function() {
                 var self = this, layoutRect = self._super(), deltaH = 0, headEl;
 
                 // Reserve vertical space for title
@@ -25053,7 +24998,7 @@
              * @method renderHtml
              * @return {String} HTML representing the control.
              */
-            renderHtml: function () {
+		renderHtml: function() {
                 var self = this, layout = self._layout, id = self._id, prefix = self.classPrefix;
                 var settings = self.settings, headerHtml = '', footerHtml = '', html = settings.html;
 
@@ -25102,11 +25047,11 @@
              * @param {Boolean} state True/false state.
              * @return {tinymce.ui.Window} Current window instance.
              */
-            fullscreen: function (state) {
+		fullscreen: function(state) {
                 var self = this, documentElement = document.documentElement, slowRendering, prefix = self.classPrefix, layoutRect;
 
                 if (state != self._fullscreen) {
-                    $(window).on('resize', function () {
+				$(window).on('resize', function() {
                         var time;
 
                         if (self._fullscreen) {
@@ -25122,7 +25067,7 @@
                                 }
                             } else {
                                 if (!self._timer) {
-                                    self._timer = setTimeout(function () {
+								self._timer = setTimeout(function() {
                                         var rect = DomUtils.getWindowSize();
                                         self.moveTo(0, 0).resizeTo(rect.w, rect.h);
 
@@ -25165,10 +25110,10 @@
              *
              * @method postRender
              */
-            postRender: function () {
+		postRender: function() {
                 var self = this, startPos;
 
-                setTimeout(function () {
+			setTimeout(function() {
                     self.classes.add('in');
                 }, 0);
 
@@ -25181,19 +25126,19 @@
                 self.focus();
 
                 this.dragHelper = new DragHelper(self._id + '-dragh', {
-                    start: function () {
+				start: function() {
                         startPos = {
                             x: self.layoutRect().x,
                             y: self.layoutRect().y
                         };
                     },
 
-                    drag: function (e) {
+				drag: function(e) {
                         self.moveTo(startPos.x + e.deltaX, startPos.y + e.deltaY);
                     }
                 });
 
-                self.on('submit', function (e) {
+			self.on('submit', function(e) {
                     if (!e.isDefaultPrevented()) {
                         self.close();
                     }
@@ -25209,7 +25154,7 @@
              * @method submit
              * @return {Object} Event arguments object.
              */
-            submit: function () {
+		submit: function() {
                 return this.fire('submit', {data: this.toJSON()});
             },
 
@@ -25219,7 +25164,7 @@
              * @method remove
              * @return {tinymce.ui.Control} Current control instance.
              */
-            remove: function () {
+		remove: function() {
                 var self = this, i;
 
                 self.dragHelper.destroy();
@@ -25246,7 +25191,7 @@
              * @method getContentWindow
              * @return {Window} window object or null.
              */
-            getContentWindow: function () {
+		getContentWindow: function() {
                 var ifr = this.getEl().getElementsByTagName('iframe')[0];
                 return ifr ? ifr.contentWindow : null;
             }
@@ -25257,11 +25202,11 @@
         }
 
         return Window;
-    });
+});
 
 // Included from: js/tinymce/classes/ui/MessageBox.js
 
-    /**
+/**
      * MessageBox.js
      *
      * Released under LGPL License.
@@ -25271,15 +25216,15 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This class is used to create MessageBoxes like alerts/confirms etc.
      *
      * @class tinymce.ui.MessageBox
      * @extends tinymce.ui.FloatPanel
      */
-    define("tinymce/ui/MessageBox", [
+define("tinymce/ui/MessageBox", [
         "tinymce/ui/Window"
-    ], function (Window) {
+], function(Window) {
         "use strict";
 
         var MessageBox = Window.extend({
@@ -25289,7 +25234,7 @@
              * @constructor
              * @param {Object} settings Name/value object with settings.
              */
-            init: function (settings) {
+		init: function(settings) {
                 settings = {
                     border: 1,
                     padding: 20,
@@ -25354,16 +25299,15 @@
                  * @method msgBox
                  * @param {Object} settings Name/value object with settings.
                  */
-                msgBox: function (settings) {
-                    var buttons, callback = settings.callback || function () {
-                        };
+			msgBox: function(settings) {
+				var buttons, callback = settings.callback || function() {};
 
                     function createButton(text, status, primary) {
                         return {
                             type: "button",
                             text: text,
                             subtype: primary ? 'primary' : '',
-                            onClick: function (e) {
+						onClick: function(e) {
                                 e.control.parents()[1].close();
                                 callback(status);
                             }
@@ -25416,11 +25360,11 @@
                             maxHeight: 200,
                             text: settings.text
                         },
-                        onPostRender: function () {
+					onPostRender: function() {
                             this.aria('describedby', this.items()[0]._id);
                         },
                         onClose: settings.onClose,
-                        onCancel: function () {
+					onCancel: function() {
                             callback(false);
                         }
                     }).renderTo(document.body).reflow();
@@ -25433,7 +25377,7 @@
                  * @param {Object} settings Settings for the alert dialog.
                  * @param {function} [callback] Callback to execute when the user makes a choice.
                  */
-                alert: function (settings, callback) {
+			alert: function(settings, callback) {
                     if (typeof settings == "string") {
                         settings = {text: settings};
                     }
@@ -25449,7 +25393,7 @@
                  * @param {Object} settings Settings for the confirm dialog.
                  * @param {function} [callback] Callback to execute when the user makes a choice.
                  */
-                confirm: function (settings, callback) {
+			confirm: function(settings, callback) {
                     if (typeof settings == "string") {
                         settings = {text: settings};
                     }
@@ -25463,11 +25407,11 @@
         });
 
         return MessageBox;
-    });
+});
 
 // Included from: js/tinymce/classes/WindowManager.js
 
-    /**
+/**
      * WindowManager.js
      *
      * Released under LGPL License.
@@ -25477,7 +25421,7 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This class handles the creation of native windows and dialogs. This class can be extended to provide for example inline dialogs.
      *
      * @class tinymce.WindowManager
@@ -25503,11 +25447,11 @@
  *       tinymce.activeEditor.windowManager.alert("Cancel");
  * });
      */
-    define("tinymce/WindowManager", [
+define("tinymce/WindowManager", [
         "tinymce/ui/Window",
         "tinymce/ui/MessageBox"
-    ], function (Window, MessageBox) {
-        return function (editor) {
+], function(Window, MessageBox) {
+	return function(editor) {
             var self = this, windows = [];
 
             function getTopMostWindow() {
@@ -25518,7 +25462,7 @@
 
             self.windows = windows;
 
-            editor.on('remove', function () {
+		editor.on('remove', function() {
                 var i = windows.length;
 
                 while (i--) {
@@ -25538,7 +25482,7 @@
              * @option {Boolean} autoScroll Specifies whether the popup window can have scrollbars if required (i.e. content
              * larger than the popup size specified).
              */
-            self.open = function (args, params) {
+		self.open = function(args, params) {
                 var win;
 
                 editor.editorManager.setActive(editor);
@@ -25563,24 +25507,20 @@
 
                 if (!args.url && !args.buttons) {
                     args.buttons = [
-                        {
-                            text: 'Ok', subtype: 'primary', onclick: function () {
+					{text: 'Ok', subtype: 'primary', onclick: function() {
                             win.find('form')[0].submit();
-                        }
-                        },
+					}},
 
-                        {
-                            text: 'Cancel', onclick: function () {
+					{text: 'Cancel', onclick: function() {
                             win.close();
-                        }
-                        }
+					}}
                     ];
                 }
 
                 win = new Window(args);
                 windows.push(win);
 
-                win.on('close', function () {
+			win.on('close', function() {
                     var i = windows.length;
 
                     while (i--) {
@@ -25596,8 +25536,8 @@
 
                 // Handle data
                 if (args.data) {
-                    win.on('postRender', function () {
-                        this.find('*').each(function (ctrl) {
+				win.on('postRender', function() {
+					this.find('*').each(function(ctrl) {
                             var name = ctrl.name();
 
                             if (name in args.data) {
@@ -25631,8 +25571,8 @@
              * // Displays an alert box using the active editors window manager instance
              * tinymce.activeEditor.windowManager.alert('Hello world!');
              */
-            self.alert = function (message, callback, scope) {
-                MessageBox.alert(message, function () {
+		self.alert = function(message, callback, scope) {
+			MessageBox.alert(message, function() {
                     if (callback) {
                         callback.call(scope || this);
                     } else {
@@ -25658,8 +25598,8 @@
 		 *       tinymce.activeEditor.windowManager.alert("Cancel");
 		 * });
              */
-            self.confirm = function (message, callback, scope) {
-                MessageBox.confirm(message, function (state) {
+		self.confirm = function(message, callback, scope) {
+			MessageBox.confirm(message, function(state) {
                     callback.call(scope || this, state);
                 });
             };
@@ -25669,7 +25609,7 @@
              *
              * @method close
              */
-            self.close = function () {
+		self.close = function() {
                 if (getTopMostWindow()) {
                     getTopMostWindow().close();
                 }
@@ -25685,7 +25625,7 @@
              * @method getParams
              * @return {Object} Name/value object with parameters passed from windowManager.open call.
              */
-            self.getParams = function () {
+		self.getParams = function() {
                 return getTopMostWindow() ? getTopMostWindow().params : null;
             };
 
@@ -25695,7 +25635,7 @@
              * @method setParams
              * @param {Object} params Params object to set for the last opened window.
              */
-            self.setParams = function (params) {
+		self.setParams = function(params) {
                 if (getTopMostWindow()) {
                     getTopMostWindow().params = params;
                 }
@@ -25707,15 +25647,15 @@
              * @method getWindows
              * @return {Array} Array of the currently opened windows.
              */
-            self.getWindows = function () {
+		self.getWindows = function() {
                 return windows;
             };
         };
-    });
+});
 
 // Included from: js/tinymce/classes/dom/NodePath.js
 
-    /**
+/**
      * NodePath.js
      *
      * Released under LGPL License.
@@ -25725,15 +25665,15 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * Handles paths of nodes within an element.
      *
      * @private
      * @class tinymce.dom.NodePath
      */
-    define("tinymce/dom/NodePath", [
+define("tinymce/dom/NodePath", [
         "tinymce/dom/DOMUtils"
-    ], function (DOMUtils) {
+], function(DOMUtils) {
         function create(rootNode, targetNode, normalized) {
             var path = [];
 
@@ -25764,11 +25704,11 @@
             create: create,
             resolve: resolve
         };
-    });
+});
 
 // Included from: js/tinymce/classes/util/Quirks.js
 
-    /**
+/**
      * Quirks.js
      *
      * Released under LGPL License.
@@ -25780,13 +25720,13 @@
      * @ignore-file
      */
 
-    /**
+/**
      * This file includes fixes for various browser quirks it's made to make it easy to add/remove browser specific fixes.
      *
      * @private
      * @class tinymce.util.Quirks
      */
-    define("tinymce/util/Quirks", [
+define("tinymce/util/Quirks", [
         "tinymce/util/VK",
         "tinymce/dom/RangeUtils",
         "tinymce/dom/TreeWalker",
@@ -25795,8 +25735,8 @@
         "tinymce/html/Entities",
         "tinymce/Env",
         "tinymce/util/Tools"
-    ], function (VK, RangeUtils, TreeWalker, NodePath, Node, Entities, Env, Tools) {
-        return function (editor) {
+], function(VK, RangeUtils, TreeWalker, NodePath, Node, Entities, Env, Tools) {
+	return function(editor) {
             var each = Tools.each, $ = editor.$;
             var BACKSPACE = VK.BACKSPACE, DELETE = VK.DELETE, dom = editor.dom, selection = editor.selection,
                 settings = editor.settings, parser = editor.parser, serializer = editor.serializer;
@@ -25846,11 +25786,8 @@
             function setMceInteralContent(e) {
                 var selectionHtml, internalContent;
 
-                console.log("dragStart: dropEffect = " + e.dataTransfer.dropEffect + " ; effectAllowed = " + e.dataTransfer.effectAllowed);
-
                 if (e.dataTransfer) {
-                    console.log(e.target.tagName);
-                    if (editor.selection.isCollapsed() && ( e.target.tagName == 'IMG' || e.target.tagName == 'IMAGE-GALLERY')) {
+				if (editor.selection.isCollapsed() && e.target.tagName == 'IMG') {
                         selection.select(e.target);
                     }
 
@@ -25943,7 +25880,7 @@
                 if (!MutationObserver) {
                     olderWebKit = true;
 
-                    MutationObserver = function () {
+				MutationObserver = function() {
                         var records = [], target;
 
                         function nodeInsert(e) {
@@ -25956,7 +25893,7 @@
                             records.push({target: target, attributeName: e.attrName});
                         }
 
-                        this.observe = function (node) {
+					this.observe = function(node) {
                             target = node;
                             target.addEventListener('DOMSubtreeModified', nodeInsert, false);
                             target.addEventListener('DOMNodeInsertedIntoDocument', nodeInsert, false);
@@ -25964,14 +25901,14 @@
                             target.addEventListener('DOMAttrModified', attrModified, false);
                         };
 
-                        this.disconnect = function () {
+					this.disconnect = function() {
                             target.removeEventListener('DOMSubtreeModified', nodeInsert, false);
                             target.removeEventListener('DOMNodeInsertedIntoDocument', nodeInsert, false);
                             target.removeEventListener('DOMNodeInserted', nodeInsert, false);
                             target.removeEventListener('DOMAttrModified', attrModified, false);
                         };
 
-                        this.takeRecords = function () {
+					this.takeRecords = function() {
                             return records;
                         };
                     };
@@ -26188,13 +26125,13 @@
                         container, offset, br, currentFormatNodes;
 
                     function cloneTextBlockWithFormats(blockElm, node) {
-                        currentFormatNodes = $(node).parents().filter(function (idx, node) {
+					currentFormatNodes = $(node).parents().filter(function(idx, node) {
                             return !!editor.schema.getTextInlineElements()[node.nodeName];
                         });
 
                         newBlockElm = blockElm.cloneNode(false);
 
-                        currentFormatNodes = Tools.map(currentFormatNodes, function (formatNode) {
+					currentFormatNodes = Tools.map(currentFormatNodes, function(formatNode) {
                             formatNode = formatNode.cloneNode(false);
 
                             if (newBlockElm.hasChildNodes()) {
@@ -26289,7 +26226,7 @@
                         return;
                     }
 
-                    Tools.each(editor.getBody().getElementsByTagName('*'), function (elm) {
+				Tools.each(editor.getBody().getElementsByTagName('*'), function(elm) {
                         // Mark existing spans
                         if (elm.tagName == 'SPAN') {
                             elm.setAttribute('mce-data-marked', 1);
@@ -26302,8 +26239,7 @@
                     });
 
                     // Observe added nodes and style attribute changes
-                    mutationObserver = new MutationObserver(function () {
-                    });
+				mutationObserver = new MutationObserver(function() {});
                     mutationObserver.observe(editor.getDoc(), {
                         childList: true,
                         attributes: true,
@@ -26316,7 +26252,7 @@
                     rng = editor.selection.getRng();
                     caretElement = rng.startContainer.parentNode;
 
-                    Tools.each(mutationObserver.takeRecords(), function (record) {
+				Tools.each(mutationObserver.takeRecords(), function(record) {
                         if (!dom.isChildOf(record.target, editor.getBody())) {
                             return;
                         }
@@ -26333,7 +26269,7 @@
                         }
 
                         // Remove all spans that isn't maked and retain selection
-                        Tools.each(record.addedNodes, function (node) {
+					Tools.each(record.addedNodes, function(node) {
                             if (node.nodeName == "SPAN" && !node.getAttribute('mce-data-marked')) {
                                 var offset, container;
 
@@ -26356,12 +26292,12 @@
                     mutationObserver.disconnect();
 
                     // Remove any left over marks
-                    Tools.each(editor.dom.select('span[mce-data-marked]'), function (span) {
+				Tools.each(editor.dom.select('span[mce-data-marked]'), function(span) {
                         span.removeAttribute('mce-data-marked');
                     });
                 }
 
-                editor.on('keydown', function (e) {
+			editor.on('keydown', function(e) {
                     var isForward = e.keyCode == DELETE, isMetaOrCtrl = e.ctrlKey || e.metaKey;
 
                     if (!isDefaultPrevented(e) && (isForward || e.keyCode == BACKSPACE)) {
@@ -26395,7 +26331,7 @@
                 });
 
                 // Handle case where text is deleted by typing over
-                editor.on('keypress', function (e) {
+			editor.on('keypress', function(e) {
                     if (!isDefaultPrevented(e) && !selection.isCollapsed() && e.charCode > 31 && !VK.metaKeyPressed(e)) {
                         var rng, currentFormatNodes, fragmentNode, blockParent, caretNode, charText;
 
@@ -26404,14 +26340,14 @@
                         e.preventDefault();
 
                         // Keep track of current format nodes
-                        currentFormatNodes = $(rng.startContainer).parents().filter(function (idx, node) {
+					currentFormatNodes = $(rng.startContainer).parents().filter(function(idx, node) {
                             return !!editor.schema.getTextInlineElements()[node.nodeName];
                         });
 
                         customDelete(true);
 
                         // Check if the browser removed them
-                        currentFormatNodes = currentFormatNodes.filter(function (idx, node) {
+					currentFormatNodes = currentFormatNodes.filter(function(idx, node) {
                             return !$.contains(editor.getBody(), node);
                         });
 
@@ -26419,7 +26355,7 @@
                         if (currentFormatNodes.length) {
                             fragmentNode = dom.createFragment();
 
-                            currentFormatNodes.each(function (idx, formatNode) {
+						currentFormatNodes.each(function(idx, formatNode) {
                                 formatNode = formatNode.cloneNode(false);
 
                                 if (fragmentNode.hasChildNodes()) {
@@ -26452,11 +26388,11 @@
                     }
                 });
 
-                editor.addCommand('Delete', function () {
+			editor.addCommand('Delete', function() {
                     customDelete();
                 });
 
-                editor.addCommand('ForwardDelete', function () {
+			editor.addCommand('ForwardDelete', function() {
                     customDelete(true);
                 });
 
@@ -26465,14 +26401,12 @@
                     return;
                 }
 
-                editor.on('dragstart', function (e) {
-                    console.log('dragstart', e);
+			editor.on('dragstart', function(e) {
                     dragStartRng = selection.getRng();
                     setMceInteralContent(e);
                 });
 
-                editor.on('drop', function (e) {
-                    console.log('drop', e);
+			editor.on('drop', function(e) {
                     if (!isDefaultPrevented(e)) {
                         var internalContent = getMceInternalContent(e);
 
@@ -26483,7 +26417,7 @@
                             // produces a green plus icon. When this happens the caretRangeFromPoint
                             // will return "null" even though the x, y coordinate is correct.
                             // But if we detach the insert from the drop event we will get a proper range
-                            window.setTimeout(function () {
+						window.setTimeout(function() {
                                 var pointRng = RangeUtils.getCaretRangeFromPoint(e.x, e.y, doc);
 
                                 if (dragStartRng) {
@@ -26499,7 +26433,7 @@
                     }
                 });
 
-                editor.on('cut', function (e) {
+			editor.on('cut', function(e) {
                     if (!isDefaultPrevented(e) && e.clipboardData && !editor.selection.isCollapsed()) {
                         e.preventDefault();
                         e.clipboardData.clearData();
@@ -26509,7 +26443,7 @@
                         // Needed delay for https://code.google.com/p/chromium/issues/detail?id=363288#c3
                         // Nested delete/forwardDelete not allowed on execCommand("cut")
                         // This is ugly but not sure how to work around it otherwise
-                        window.setTimeout(function () {
+					window.setTimeout(function() {
                             customDelete(true);
                         }, 0);
                     }
@@ -26556,7 +26490,7 @@
                     return selection === allSelection;
                 }
 
-                editor.on('keydown', function (e) {
+			editor.on('keydown', function(e) {
                     var keyCode = e.keyCode, isCollapsed, body;
 
                     // Empty the editor if it's needed for example backspace at <p><b>|</b></p>
@@ -26612,13 +26546,13 @@
             function inputMethodFocus() {
                 if (!editor.settings.content_editable) {
                     // Case 1 IME doesn't initialize if you focus the document
-                    dom.bind(editor.getDoc(), 'focusin', function () {
+				dom.bind(editor.getDoc(), 'focusin', function() {
                         selection.setRng(selection.getRng());
                     });
 
                     // Case 2 IME doesn't initialize if you click the documentElement it also doesn't properly fire the focusin event
                     // Needs to be both down/up due to weird rendering bug on Chrome Windows
-                    dom.bind(editor.getDoc(), 'mousedown mouseup', function (e) {
+				dom.bind(editor.getDoc(), 'mousedown mouseup', function(e) {
                         if (e.target == editor.getDoc().documentElement) {
                             editor.getBody().focus();
 
@@ -26643,7 +26577,7 @@
              * It also fixes a bug on Firefox where it's impossible to delete HR elements.
              */
             function removeHrOnBackspace() {
-                editor.on('keydown', function (e) {
+			editor.on('keydown', function(e) {
                     if (!isDefaultPrevented(e) && e.keyCode === BACKSPACE) {
                         // Check if there is any HR elements this is faster since getRng on IE 7 & 8 is slow
                         if (!editor.getBody().getElementsByTagName('hr').length) {
@@ -26677,7 +26611,7 @@
                 // Fix for a focus bug in FF 3.x where the body element
                 // wouldn't get proper focus if the user clicked on the HTML element
                 if (!window.Range.prototype.getClientRects) { // Detect getClientRects got introduced in FF 4
-                    editor.on('mousedown', function (e) {
+				editor.on('mousedown', function(e) {
                         if (!isDefaultPrevented(e) && e.target.nodeName === "HTML") {
                             var body = editor.getBody();
 
@@ -26685,7 +26619,7 @@
                             body.blur();
 
                             // Refocus the body after a little while
-                            setTimeout(function () {
+						setTimeout(function() {
                                 body.focus();
                             }, 0);
                         }
@@ -26698,7 +26632,7 @@
              * by clicking on them so we need to fake that.
              */
             function selectControlElements() {
-                editor.on('click', function (e) {
+			editor.on('click', function(e) {
                     var target = e.target;
 
                     // Workaround for bug, http://bugs.webkit.org/show_bug.cgi?id=12250
@@ -26733,13 +26667,13 @@
                 function getAttributeApplyFunction() {
                     var template = dom.getAttribs(selection.getStart().cloneNode(false));
 
-                    return function () {
+				return function() {
                         var target = selection.getStart();
 
                         if (target !== editor.getBody()) {
                             dom.setAttrib(target, "style", null);
 
-                            each(template, function (attr) {
+						each(template, function(attr) {
                                 target.setAttributeNode(attr.cloneNode(true));
                             });
                         }
@@ -26751,7 +26685,7 @@
                         dom.getParent(selection.getStart(), dom.isBlock) != dom.getParent(selection.getEnd(), dom.isBlock);
                 }
 
-                editor.on('keypress', function (e) {
+			editor.on('keypress', function(e) {
                     var applyAttributes;
 
                     if (!isDefaultPrevented(e) && (e.keyCode == 8 || e.keyCode == 46) && isSelectionAcrossElements()) {
@@ -26763,13 +26697,13 @@
                     }
                 });
 
-                dom.bind(editor.getDoc(), 'cut', function (e) {
+			dom.bind(editor.getDoc(), 'cut', function(e) {
                     var applyAttributes;
 
                     if (!isDefaultPrevented(e) && isSelectionAcrossElements()) {
                         applyAttributes = getAttributeApplyFunction();
 
-                        setTimeout(function () {
+					setTimeout(function() {
                             applyAttributes();
                         }, 0);
                     }
@@ -26788,7 +26722,7 @@
              * Therefore, disable Backspace when cursor immediately follows a table.
              */
             function disableBackspaceIntoATable() {
-                editor.on('keydown', function (e) {
+			editor.on('keydown', function(e) {
                     if (!isDefaultPrevented(e) && e.keyCode === BACKSPACE) {
                         if (selection.isCollapsed() && selection.getRng(true).startOffset === 0) {
                             var previousSibling = selection.getNode().previousSibling;
@@ -26818,7 +26752,7 @@
                 dom.addClass(editor.getBody(), 'mceHideBrInPre');
 
                 // Adds a \n before all BR elements in PRE to get them visual
-                parser.addNodeFilter('pre', function (nodes) {
+			parser.addNodeFilter('pre', function(nodes) {
                     var i = nodes.length, brNodes, j, brElm, sibling;
 
                     while (i--) {
@@ -26839,7 +26773,7 @@
                 });
 
                 // Removes any \n before BR elements in PRE since other browsers and in contentEditable=false mode they will be visible
-                serializer.addNodeFilter('pre', function (nodes) {
+			serializer.addNodeFilter('pre', function(nodes) {
                     var i = nodes.length, brNodes, j, brElm, sibling;
 
                     while (i--) {
@@ -26860,7 +26794,7 @@
              * Moves style width/height to attribute width/height when the user resizes an image on IE.
              */
             function removePreSerializedStylesWhenSelectingControls() {
-                dom.bind(editor.getBody(), 'mouseup', function () {
+			dom.bind(editor.getBody(), 'mouseup', function() {
                     var value, node = selection.getNode();
 
                     // Moved styles to attributes on IMG eements
@@ -26891,7 +26825,7 @@
              */
             function removeBlockQuoteOnBackSpace() {
                 // Add block quote deletion handler
-                editor.on('keydown', function (e) {
+			editor.on('keydown', function(e) {
                     var rng, container, offset, root, parent;
 
                     if (isDefaultPrevented(e) || e.keyCode != VK.BACKSPACE) {
@@ -26958,7 +26892,7 @@
              */
             function addBrAfterLastLinks() {
                 function fixLinks() {
-                    each(dom.select('a'), function (node) {
+				each(dom.select('a'), function(node) {
                         var parentNode = node.parentNode, root = dom.getRoot();
 
                         if (parentNode.lastChild === node) {
@@ -26975,7 +26909,7 @@
                     });
                 }
 
-                editor.on('SetContent ExecCommand', function (e) {
+			editor.on('SetContent ExecCommand', function(e) {
                     if (e.type == "setcontent" || e.command === 'mceInsertLink') {
                         fixLinks();
                     }
@@ -26988,7 +26922,7 @@
              */
             function setDefaultBlockType() {
                 if (settings.forced_root_block) {
-                    editor.on('init', function () {
+				editor.on('init', function() {
                         setEditorCommandState('DefaultParagraphSeparator', settings.forced_root_block);
                     });
                 }
@@ -26998,7 +26932,7 @@
              * Removes ghost selections from images/tables on Gecko.
              */
             function removeGhostSelection() {
-                editor.on('Undo Redo SetContent', function (e) {
+			editor.on('Undo Redo SetContent', function(e) {
                     if (!e.initial) {
                         editor.execCommand('mceRepaint');
                     }
@@ -27009,7 +26943,7 @@
              * Deletes the selected image on IE instead of navigating to previous page.
              */
             function deleteControlItemOnBackSpace() {
-                editor.on('keydown', function (e) {
+			editor.on('keydown', function(e) {
                     var rng;
 
                     if (!isDefaultPrevented(e) && e.keyCode == BACKSPACE) {
@@ -27035,7 +26969,7 @@
                 // IE10+
                 if (getDocumentMode() >= 10) {
                     emptyBlocksCSS = '';
-                    each('p div h1 h2 h3 h4 h5 h6'.split(' '), function (name, i) {
+				each('p div h1 h2 h3 h4 h5 h6'.split(' '), function(name, i) {
                         emptyBlocksCSS += (i > 0 ? ',' : '') + name + ':empty';
                     });
 
@@ -27049,7 +26983,7 @@
              */
             function keepNoScriptContents() {
                 if (getDocumentMode() < 9) {
-                    parser.addNodeFilter('noscript', function (nodes) {
+				parser.addNodeFilter('noscript', function(nodes) {
                         var i = nodes.length, node, textNode;
 
                         while (i--) {
@@ -27062,7 +26996,7 @@
                         }
                     });
 
-                    serializer.addNodeFilter('noscript', function (nodes) {
+				serializer.addNodeFilter('noscript', function(nodes) {
                         var i = nodes.length, node, textNode, value;
 
                         while (i--) {
@@ -27149,7 +27083,7 @@
                 doc.documentElement.unselectable = true;
 
                 // Detect when user selects outside BODY
-                dom.bind(doc, 'mousedown contextmenu', function (e) {
+			dom.bind(doc, 'mousedown contextmenu', function(e) {
                     if (e.target.nodeName === 'HTML') {
                         if (started) {
                             endSelection();
@@ -27182,7 +27116,7 @@
              */
             function normalizeSelection() {
                 // Normalize selection for example <b>a</b><i>|a</i> becomes <b>a|</b><i>a</i> except for Ctrl+A since it selects everything
-                editor.on('keyup focusin mouseup', function (e) {
+			editor.on('keyup focusin mouseup', function(e) {
                     if (e.keyCode != 65 || !VK.metaKeyPressed(e)) {
                         selection.normalize();
                     }
@@ -27211,7 +27145,7 @@
              */
             function restoreFocusOnKeyDown() {
                 if (!editor.inline) {
-                    editor.on('keydown', function () {
+				editor.on('keydown', function() {
                         if (document.activeElement == document.body) {
                             editor.getWin().focus();
                         }
@@ -27231,7 +27165,7 @@
             function bodyHeight() {
                 if (!editor.inline) {
                     editor.contentStyles.push('body {min-height: 150px}');
-                    editor.on('click', function (e) {
+				editor.on('click', function(e) {
                         var rng;
 
                         if (e.target.nodeName == 'HTML') {
@@ -27259,7 +27193,7 @@
              */
             function blockCmdArrowNavigation() {
                 if (Env.mac) {
-                    editor.on('keydown', function (e) {
+				editor.on('keydown', function(e) {
                         if (VK.metaKeyPressed(e) && !e.shiftKey && (e.keyCode == 37 || e.keyCode == 39)) {
                             e.preventDefault();
                             editor.selection.getSel().modify('move', e.keyCode == 37 ? 'backward' : 'forward', 'lineboundary');
@@ -27281,7 +27215,7 @@
              * 2) If you hold down the finger it will display the link/image touch callout menu.
              */
             function tapLinksAndImages() {
-                editor.on('click', function (e) {
+			editor.on('click', function(e) {
                     var elm = e.target;
 
                     do {
@@ -27357,8 +27291,8 @@
              * For example this: <form><button></form>
              */
             function blockFormSubmitInsideEditor() {
-                editor.on('init', function () {
-                    editor.dom.bind(editor.getBody(), 'submit', function (e) {
+			editor.on('init', function() {
+				editor.dom.bind(editor.getBody(), 'submit', function(e) {
                         e.preventDefault();
                     });
                 });
@@ -27373,7 +27307,7 @@
              *  3) Paste and it will add BR element to table cell.
              */
             function removeAppleInterchangeBrs() {
-                parser.addNodeFilter('br', function (nodes) {
+			parser.addNodeFilter('br', function(nodes) {
                     var i = nodes.length;
 
                     while (i--) {
@@ -27389,11 +27323,11 @@
              * editors. This uses a special data:text/mce-internal URL to pass data when drag/drop between editors.
              */
             function ieInternalDragAndDrop() {
-                editor.on('dragstart', function (e) {
+			editor.on('dragstart', function(e) {
                     setMceInteralContent(e);
                 });
 
-                editor.on('drop', function (e) {
+			editor.on('drop', function(e) {
                     if (!isDefaultPrevented(e)) {
                         var internalContent = getMceInternalContent(e);
 
@@ -27470,11 +27404,11 @@
                 disableBackspaceIntoATable();
             }
         };
-    });
+});
 
 // Included from: js/tinymce/classes/EditorObservable.js
 
-    /**
+/**
      * EditorObservable.js
      *
      * Released under LGPL License.
@@ -27484,17 +27418,17 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This mixin contains the event logic for the tinymce.Editor class.
      *
      * @mixin tinymce.EditorObservable
      * @extends tinymce.util.Observable
      */
-    define("tinymce/EditorObservable", [
+define("tinymce/EditorObservable", [
         "tinymce/util/Observable",
         "tinymce/dom/DOMUtils",
         "tinymce/util/Tools"
-    ], function (Observable, DOMUtils, Tools) {
+], function(Observable, DOMUtils, Tools) {
         var DOM = DOMUtils.DOM, customEventRootDelegates;
 
         /**
@@ -27552,7 +27486,7 @@
             if (editor.settings.event_root) {
                 if (!customEventRootDelegates) {
                     customEventRootDelegates = {};
-                    editor.editorManager.on('removeEditor', function () {
+				editor.editorManager.on('removeEditor', function() {
                         var name;
 
                         if (!editor.editorManager.activeEditor) {
@@ -27571,7 +27505,7 @@
                     return;
                 }
 
-                delegate = function (e) {
+			delegate = function(e) {
                     var target = e.target, editors = editor.editorManager.editors, i = editors.length;
 
                     while (i--) {
@@ -27588,7 +27522,7 @@
                 customEventRootDelegates[eventName] = delegate;
                 DOM.bind(eventRootElm, eventName, delegate);
             } else {
-                delegate = function (e) {
+			delegate = function(e) {
                     if (!editor.hidden) {
                         editor.fire(eventName, e);
                     }
@@ -27605,10 +27539,10 @@
              *
              * @private
              */
-            bindPendingEventDelegates: function () {
+		bindPendingEventDelegates: function() {
                 var self = this;
 
-                Tools.each(self._pendingNativeEvents, function (name) {
+			Tools.each(self._pendingNativeEvents, function(name) {
                     bindEventDelegate(self, name);
                 });
             },
@@ -27619,7 +27553,7 @@
              *
              * @private
              */
-            toggleNativeEvent: function (name, state) {
+		toggleNativeEvent: function(name, state) {
                 var self = this;
 
                 if (self.settings.readonly) {
@@ -27652,7 +27586,7 @@
              *
              * @private
              */
-            unbindAllNativeEvents: function () {
+		unbindAllNativeEvents: function() {
                 var self = this, name;
 
                 if (self.delegates) {
@@ -27677,11 +27611,11 @@
         EditorObservable = Tools.extend({}, Observable, EditorObservable);
 
         return EditorObservable;
-    });
+});
 
 // Included from: js/tinymce/classes/Shortcuts.js
 
-    /**
+/**
      * Shortcuts.js
      *
      * Released under LGPL License.
@@ -27691,7 +27625,7 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * Contains all logic for handling of keyboard shortcuts.
      *
      * @class tinymce.Shortcuts
@@ -27701,10 +27635,10 @@
      * editor.shortcuts.add('ctrl+alt+a', function() {});
      * editor.shortcuts.add('access+a', function() {}); // "access" maps to ctrl+alt on Mac and shift+alt on PC
      */
-    define("tinymce/Shortcuts", [
+define("tinymce/Shortcuts", [
         "tinymce/util/Tools",
         "tinymce/Env"
-    ], function (Tools, Env) {
+], function(Tools, Env) {
         var each = Tools.each, explode = Tools.explode;
 
         var keyCodeLookup = {
@@ -27715,7 +27649,7 @@
 
         var modifierNames = Tools.makeMap('alt,ctrl,shift,meta,access');
 
-        return function (editor) {
+	return function(editor) {
             var self = this, shortcuts = {};
 
             function createShortcut(pattern, desc, cmdFunc, scope) {
@@ -27728,7 +27662,7 @@
                 };
 
                 // Parse modifiers and keys ctrl+alt+b for example
-                each(explode(pattern, '+'), function (value) {
+			each(explode(pattern, '+'), function(value) {
                     if (value in modifierNames) {
                         shortcut[value] = true;
                     } else {
@@ -27777,9 +27711,9 @@
                 return shortcut;
             }
 
-            editor.on('keyup keypress keydown', function (e) {
+		editor.on('keyup keypress keydown', function(e) {
                 if ((e.altKey || e.ctrlKey || e.metaKey) && !e.isDefaultPrevented()) {
-                    each(shortcuts, function (shortcut) {
+				each(shortcuts, function(shortcut) {
                         if (shortcut.ctrl != e.ctrlKey || shortcut.meta != e.metaKey) {
                             return;
                         }
@@ -27811,22 +27745,22 @@
              * @param {Object} sc Optional scope to execute the function in.
              * @return {Boolean} true/false state if the shortcut was added or not.
              */
-            self.add = function (pattern, desc, cmdFunc, scope) {
+		self.add = function(pattern, desc, cmdFunc, scope) {
                 var cmd;
 
                 cmd = cmdFunc;
 
                 if (typeof cmdFunc === 'string') {
-                    cmdFunc = function () {
+				cmdFunc = function() {
                         editor.execCommand(cmd, false, null);
                     };
                 } else if (Tools.isArray(cmd)) {
-                    cmdFunc = function () {
+				cmdFunc = function() {
                         editor.execCommand(cmd[0], cmd[1], cmd[2]);
                     };
                 }
 
-                each(explode(pattern.toLowerCase()), function (pattern) {
+			each(explode(pattern.toLowerCase()), function(pattern) {
                     var shortcut = createShortcut(pattern, desc, cmdFunc, scope);
                     shortcuts[shortcut.id] = shortcut;
                 });
@@ -27841,7 +27775,7 @@
              * @param {String} pattern Shortcut pattern. Like for example: ctrl+alt+o.
              * @return {Boolean} true/false state if the shortcut was removed or not.
              */
-            self.remove = function (pattern) {
+		self.remove = function(pattern) {
                 var shortcut = createShortcut(pattern);
 
                 if (shortcuts[shortcut.id]) {
@@ -27852,11 +27786,11 @@
                 return false;
             };
         };
-    });
+});
 
 // Included from: js/tinymce/classes/util/Promise.js
 
-    /**
+/**
      * Promise.js
      *
      * Released under LGPL License.
@@ -27868,33 +27802,29 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /* eslint-disable */
-    /* jshint ignore:start */
+/* eslint-disable */
+/* jshint ignore:start */
 
-    /**
+/**
      * Modifed to be a feature fill and wrapped as tinymce module.
      */
-    define("tinymce/util/Promise", [], function () {
+define("tinymce/util/Promise", [], function() {
         if (window.Promise) {
             return window.Promise;
         }
 
         // Use polyfill for setImmediate for performance gains
         var asap = Promise.immediateFn || (typeof setImmediate === 'function' && setImmediate) ||
-            function (fn) {
-                setTimeout(fn, 1);
-            };
+		function(fn) { setTimeout(fn, 1); };
 
         // Polyfill for Function.prototype.bind
         function bind(fn, thisArg) {
-            return function () {
+		return function() {
                 fn.apply(thisArg, arguments);
             };
         }
 
-        var isArray = Array.isArray || function (value) {
-                return Object.prototype.toString.call(value) === "[object Array]";
-            };
+	var isArray = Array.isArray || function(value) { return Object.prototype.toString.call(value) === "[object Array]"; };
 
         function Promise(fn) {
             if (typeof this !== 'object') throw new TypeError('Promises must be constructed via new');
@@ -27912,7 +27842,7 @@
                 this._deferreds.push(deferred);
                 return;
             }
-            asap(function () {
+		asap(function() {
                 var cb = me._state ? deferred.onFulfilled : deferred.onRejected;
                 if (cb === null) {
                     (me._state ? deferred.resolve : deferred.reject)(me._value);
@@ -27943,9 +27873,7 @@
                 this._state = true;
                 this._value = newValue;
                 finale.call(this);
-            } catch (e) {
-                reject.call(this, e);
-            }
+		} catch (e) { reject.call(this, e); }
         }
 
         function reject(newValue) {
@@ -27961,7 +27889,7 @@
             this._deferreds = null;
         }
 
-        function Handler(onFulfilled, onRejected, resolve, reject) {
+	function Handler(onFulfilled, onRejected, resolve, reject){
             this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
             this.onRejected = typeof onRejected === 'function' ? onRejected : null;
             this.resolve = resolve;
@@ -27997,9 +27925,9 @@
             return this.then(null, onRejected);
         };
 
-        Promise.prototype.then = function (onFulfilled, onRejected) {
+	Promise.prototype.then = function(onFulfilled, onRejected) {
             var me = this;
-            return new Promise(function (resolve, reject) {
+		return new Promise(function(resolve, reject) {
                 handle.call(me, new Handler(onFulfilled, onRejected, resolve, reject));
             });
         };
@@ -28010,15 +27938,12 @@
             return new Promise(function (resolve, reject) {
                 if (args.length === 0) return resolve([]);
                 var remaining = args.length;
-
                 function res(i, val) {
                     try {
                         if (val && (typeof val === 'object' || typeof val === 'function')) {
                             var then = val.then;
                             if (typeof then === 'function') {
-                                then.call(val, function (val) {
-                                    res(i, val);
-                                }, reject);
+							then.call(val, function (val) { res(i, val); }, reject);
                                 return;
                             }
                         }
@@ -28030,7 +27955,6 @@
                         reject(ex);
                     }
                 }
-
                 for (var i = 0; i < args.length; i++) {
                     res(i, args[i]);
                 }
@@ -28055,21 +27979,21 @@
 
         Promise.race = function (values) {
             return new Promise(function (resolve, reject) {
-                for (var i = 0, len = values.length; i < len; i++) {
+			for(var i = 0, len = values.length; i < len; i++) {
                     values[i].then(resolve, reject);
                 }
             });
         };
 
         return Promise;
-    });
+});
 
-    /* jshint ignore:end */
-    /* eslint-enable */
+/* jshint ignore:end */
+/* eslint-enable */
 
 // Included from: js/tinymce/classes/util/Fun.js
 
-    /**
+/**
      * Fun.js
      *
      * Released under LGPL License.
@@ -28079,15 +28003,15 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * Functional utility class.
      *
      * @private
      * @class tinymce.util.Fun
      */
-    define("tinymce/util/Fun", [], function () {
+define("tinymce/util/Fun", [], function() {
         function constant(value) {
-            return function () {
+		return function() {
                 return value;
             };
         }
@@ -28095,11 +28019,11 @@
         return {
             constant: constant
         };
-    });
+});
 
 // Included from: js/tinymce/classes/file/Uploader.js
 
-    /**
+/**
      * Uploader.js
      *
      * Released under LGPL License.
@@ -28109,7 +28033,7 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * Upload blobs or blob infos to the specified URL or handler.
      *
      * @private
@@ -28128,12 +28052,12 @@
  *     ...
  * });
      */
-    define("tinymce/file/Uploader", [
+define("tinymce/file/Uploader", [
         "tinymce/util/Promise",
         "tinymce/util/Tools",
         "tinymce/util/Fun"
-    ], function (Promise, Tools, Fun) {
-        return function (settings) {
+], function(Promise, Tools, Fun) {
+	return function(settings) {
             var cachedPromises = {};
 
             function fileName(blobInfo) {
@@ -28175,7 +28099,7 @@
                 xhr.open('POST', settings.url);
                 xhr.withCredentials = settings.credentials;
 
-                xhr.onload = function () {
+			xhr.onload = function() {
                     var json;
 
                     if (xhr.status != 200) {
@@ -28204,22 +28128,22 @@
 
                 // If no url is configured then resolve
                 if (!settings.url && settings.handler === defaultHandler) {
-                    return new Promise(function (resolve) {
+				return new Promise(function(resolve) {
                         resolve([]);
                     });
                 }
 
                 function uploadBlobInfo(blobInfo) {
-                    return new Promise(function (resolve) {
+				return new Promise(function(resolve) {
                         var handler = settings.handler;
 
-                        handler(blobInfoToData(blobInfo), function (url) {
+					handler(blobInfoToData(blobInfo), function(url) {
                             resolve({
                                 url: url,
                                 blobInfo: blobInfo,
                                 status: true
                             });
-                        }, function (failure) {
+					}, function(failure) {
                             resolve({
                                 url: '',
                                 blobInfo: blobInfo,
@@ -28230,17 +28154,17 @@
                     });
                 }
 
-                promises = Tools.map(blobInfos, function (blobInfo) {
+			promises = Tools.map(blobInfos, function(blobInfo) {
                     var newPromise, id = blobInfo.id();
 
                     if (cachedPromises[id]) {
                         return cachedPromises[id];
                     }
 
-                    newPromise = uploadBlobInfo(blobInfo).then(function (result) {
+				newPromise = uploadBlobInfo(blobInfo).then(function(result) {
                         delete cachedPromises[id];
                         return result;
-                    })['catch'](function (error) {
+				})['catch'](function(error) {
                         delete cachedPromises[id];
                         return error;
                     });
@@ -28262,11 +28186,11 @@
                 upload: upload
             };
         };
-    });
+});
 
 // Included from: js/tinymce/classes/file/Conversions.js
 
-    /**
+/**
      * Conversions.js
      *
      * Released under LGPL License.
@@ -28276,23 +28200,23 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * Converts blob/uris back and forth.
      *
      * @private
      * @class tinymce.file.Conversions
      */
-    define("tinymce/file/Conversions", [
+define("tinymce/file/Conversions", [
         "tinymce/util/Promise"
-    ], function (Promise) {
+], function(Promise) {
         function blobUriToBlob(url) {
-            return new Promise(function (resolve) {
+		return new Promise(function(resolve) {
                 var xhr = new XMLHttpRequest();
 
                 xhr.open('GET', url, true);
                 xhr.responseType = 'blob';
 
-                xhr.onload = function () {
+			xhr.onload = function() {
                     if (this.status == 200) {
                         resolve(this.response);
                     }
@@ -28319,7 +28243,7 @@
         }
 
         function dataUriToBlob(uri) {
-            return new Promise(function (resolve) {
+		return new Promise(function(resolve) {
                 var str, arr, i;
 
                 uri = parseDataUri(uri);
@@ -28355,10 +28279,10 @@
         }
 
         function blobToDataUri(blob) {
-            return new Promise(function (resolve) {
+		return new Promise(function(resolve) {
                 var reader = new FileReader();
 
-                reader.onloadend = function () {
+			reader.onloadend = function() {
                     resolve(reader.result);
                 };
 
@@ -28371,11 +28295,11 @@
             blobToDataUri: blobToDataUri,
             parseDataUri: parseDataUri
         };
-    });
+});
 
 // Included from: js/tinymce/classes/file/ImageScanner.js
 
-    /**
+/**
      * ImageScanner.js
      *
      * Released under LGPL License.
@@ -28385,21 +28309,21 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * Finds images with data uris or blob uris. If data uris are found it will convert them into blob uris.
      *
      * @private
      * @class tinymce.file.ImageScanner
      */
-    define("tinymce/file/ImageScanner", [
+define("tinymce/file/ImageScanner", [
         "tinymce/util/Promise",
         "tinymce/util/Arr",
         "tinymce/file/Conversions",
         "tinymce/Env"
-    ], function (Promise, Arr, Conversions, Env) {
+], function(Promise, Arr, Conversions, Env) {
         var count = 0;
 
-        return function (blobCache) {
+	return function(blobCache) {
             var cachedPromises = {};
 
             function findAll(elm) {
@@ -28422,7 +28346,7 @@
                     }
 
                     base64 = Conversions.parseDataUri(img.src).data;
-                    blobInfo = blobCache.findFirst(function (cachedBlobInfo) {
+				blobInfo = blobCache.findFirst(function(cachedBlobInfo) {
                         return cachedBlobInfo.base64() === base64;
                     });
 
@@ -28432,7 +28356,7 @@
                             blobInfo: blobInfo
                         });
                     } else {
-                        Conversions.uriToBlob(img.src).then(function (blob) {
+					Conversions.uriToBlob(img.src).then(function(blob) {
                             var blobInfoId = 'blobid' + (count++),
                                 blobInfo = blobCache.create(blobInfoId, blob, base64);
 
@@ -28446,7 +28370,7 @@
                     }
                 }
 
-                images = Arr.filter(elm.getElementsByTagName('img'), function (img) {
+			images = Arr.filter(elm.getElementsByTagName('img'), function(img) {
                     var src = img.src;
 
                     if (!Env.fileApi) {
@@ -28468,14 +28392,14 @@
                     return src.indexOf('data:') === 0 || src.indexOf('blob:') === 0;
                 });
 
-                promises = Arr.map(images, function (img) {
+			promises = Arr.map(images, function(img) {
                     var newPromise;
 
                     if (cachedPromises[img.src]) {
                         // Since the cached promise will return the cached image
                         // We need to wrap it and resolve with the actual image
-                        return new Promise(function (resolve) {
-                            cachedPromises[img.src].then(function (imageInfo) {
+					return new Promise(function(resolve) {
+						cachedPromises[img.src].then(function(imageInfo) {
                                 resolve({
                                     image: img,
                                     blobInfo: imageInfo.blobInfo
@@ -28484,12 +28408,12 @@
                         });
                     }
 
-                    newPromise = new Promise(function (resolve) {
+				newPromise = new Promise(function(resolve) {
                         imageToBlobInfo(img, resolve);
-                    }).then(function (result) {
+				}).then(function(result) {
                             delete cachedPromises[result.image.src];
                             return result;
-                        })['catch'](function (error) {
+				})['catch'](function(error) {
                         delete cachedPromises[img.src];
                         return error;
                     });
@@ -28506,11 +28430,11 @@
                 findAll: findAll
             };
         };
-    });
+});
 
 // Included from: js/tinymce/classes/file/BlobCache.js
 
-    /**
+/**
      * BlobCache.js
      *
      * Released under LGPL License.
@@ -28520,17 +28444,17 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * Hold blob info objects where a blob has extra internal information.
      *
      * @private
      * @class tinymce.file.BlobCache
      */
-    define("tinymce/file/BlobCache", [
+define("tinymce/file/BlobCache", [
         "tinymce/util/Arr",
         "tinymce/util/Fun"
-    ], function (Arr, Fun) {
-        return function () {
+], function(Arr, Fun) {
+	return function() {
             var cache = [], constant = Fun.constant;
 
             function create(id, blob, base64) {
@@ -28549,7 +28473,7 @@
             }
 
             function get(id) {
-                return findFirst(function (cachedBlobInfo) {
+			return findFirst(function(cachedBlobInfo) {
                     return cachedBlobInfo.id() === id;
                 });
             }
@@ -28559,13 +28483,13 @@
             }
 
             function getByUri(blobUri) {
-                return findFirst(function (blobInfo) {
+			return findFirst(function(blobInfo) {
                     return blobInfo.blobUri() == blobUri;
                 });
             }
 
             function destroy() {
-                Arr.each(cache, function (cachedBlobInfo) {
+			Arr.each(cache, function(cachedBlobInfo) {
                     URL.revokeObjectURL(cachedBlobInfo.blobUri());
                 });
 
@@ -28581,11 +28505,11 @@
                 destroy: destroy
             };
         };
-    });
+});
 
 // Included from: js/tinymce/classes/EditorUpload.js
 
-    /**
+/**
      * EditorUpload.js
      *
      * Released under LGPL License.
@@ -28595,23 +28519,23 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * Handles image uploads, updates undo stack and patches over various internal functions.
      *
      * @private
      * @class tinymce.EditorUpload
      */
-    define("tinymce/EditorUpload", [
+define("tinymce/EditorUpload", [
         "tinymce/util/Arr",
         "tinymce/file/Uploader",
         "tinymce/file/ImageScanner",
         "tinymce/file/BlobCache"
-    ], function (Arr, Uploader, ImageScanner, BlobCache) {
-        return function (editor) {
+], function(Arr, Uploader, ImageScanner, BlobCache) {
+	return function(editor) {
             var blobCache = new BlobCache(), uploader, imageScanner;
 
             function aliveGuard(callback) {
-                return function (result) {
+			return function(result) {
                     if (editor.selection) {
                         return callback(result);
                     }
@@ -28644,7 +28568,7 @@
             }
 
             function replaceUrlInUndoStack(targetUrl, replacementUrl) {
-                Arr.each(editor.undoManager.data, function (level) {
+			Arr.each(editor.undoManager.data, function(level) {
                     level.content = replaceImageUrl(level.content, targetUrl, replacementUrl);
                 });
             }
@@ -28659,15 +28583,15 @@
                     });
                 }
 
-                return scanForImages().then(aliveGuard(function (imageInfos) {
+			return scanForImages().then(aliveGuard(function(imageInfos) {
                     var blobInfos;
 
-                    blobInfos = Arr.map(imageInfos, function (imageInfo) {
+				blobInfos = Arr.map(imageInfos, function(imageInfo) {
                         return imageInfo.blobInfo;
                     });
 
-                    return uploader.upload(blobInfos).then(aliveGuard(function (result) {
-                        result = Arr.map(result, function (uploadInfo, index) {
+				return uploader.upload(blobInfos).then(aliveGuard(function(result) {
+					result = Arr.map(result, function(uploadInfo, index) {
                             var image = imageInfos[index].image;
 
                             replaceUrlInUndoStack(image.src, uploadInfo.url);
@@ -28703,8 +28627,8 @@
                     imageScanner = new ImageScanner(blobCache);
                 }
 
-                return imageScanner.findAll(editor.getBody()).then(aliveGuard(function (result) {
-                    Arr.each(result, function (resultItem) {
+			return imageScanner.findAll(editor.getBody()).then(aliveGuard(function(result) {
+				Arr.each(result, function(resultItem) {
                         replaceUrlInUndoStack(resultItem.image.src, resultItem.blobInfo.blobUri());
                         resultItem.image.src = resultItem.blobInfo.blobUri();
                     });
@@ -28719,11 +28643,11 @@
             }
 
             function replaceBlobWithBase64(content) {
-                return content.replace(/src="(blob:[^"]+)"/g, function (match, blobUri) {
+			return content.replace(/src="(blob:[^"]+)"/g, function(match, blobUri) {
                     var blobInfo = blobCache.getByUri(blobUri);
 
                     if (!blobInfo) {
-                        blobInfo = Arr.reduce(editor.editorManager.editors, function (result, editor) {
+					blobInfo = Arr.reduce(editor.editorManager.editors, function(result, editor) {
                             return result || editor.editorUpload.blobCache.getByUri(blobUri);
                         }, null);
                     }
@@ -28736,7 +28660,7 @@
                 });
             }
 
-            editor.on('setContent', function () {
+		editor.on('setContent', function() {
                 if (editor.settings.automatic_uploads !== false) {
                     uploadImagesAuto();
                 } else {
@@ -28744,11 +28668,11 @@
                 }
             });
 
-            editor.on('RawSaveContent', function (e) {
+		editor.on('RawSaveContent', function(e) {
                 e.content = replaceBlobWithBase64(e.content);
             });
 
-            editor.on('getContent', function (e) {
+		editor.on('getContent', function(e) {
                 if (e.source_view || e.format == 'raw') {
                     return;
                 }
@@ -28764,11 +28688,11 @@
                 destroy: destroy
             };
         };
-    });
+});
 
 // Included from: js/tinymce/classes/Editor.js
 
-    /**
+/**
      * Editor.js
      *
      * Released under LGPL License.
@@ -28778,15 +28702,15 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /*jshint scripturl:true */
+/*jshint scripturl:true */
 
-    /**
+/**
      * Include the base event class documentation.
      *
      * @include ../../../tools/docs/tinymce.Event.js
      */
 
-    /**
+/**
      * This class contains the core logic for a TinyMCE editor.
      *
      * @class tinymce.Editor
@@ -28810,7 +28734,7 @@
      *
      * ed.render();
      */
-    define("tinymce/Editor", [
+define("tinymce/Editor", [
         "tinymce/dom/DOMUtils",
         "tinymce/dom/DomQuery",
         "tinymce/AddOnManager",
@@ -28836,10 +28760,12 @@
         "tinymce/EditorObservable",
         "tinymce/Shortcuts",
         "tinymce/EditorUpload"
-    ], function (DOMUtils, DomQuery, AddOnManager, NodeChange, Node, DomSerializer, Serializer,
+], function(
+	DOMUtils, DomQuery, AddOnManager, NodeChange, Node, DomSerializer, Serializer,
                  Selection, Formatter, UndoManager, EnterKey, ForceBlocks, EditorCommands,
                  URI, ScriptLoader, EventUtils, WindowManager,
-                 Schema, DomParser, Quirks, Env, Tools, EditorObservable, Shortcuts, EditorUpload) {
+	Schema, DomParser, Quirks, Env, Tools, EditorObservable, Shortcuts, EditorUpload
+) {
         // Shorten these names
         var DOM = DOMUtils.DOM, ThemeManager = AddOnManager.ThemeManager, PluginManager = AddOnManager.PluginManager;
         var extend = Tools.extend, each = Tools.each, explode = Tools.explode;
@@ -29038,7 +28964,7 @@
              * tinymce.activeEditor.$('p').css('color', 'red');
              * tinymce.activeEditor.$().append('<p>new</p>');
              */
-            self.$ = DomQuery.overrideDefaults(function () {
+		self.$ = DomQuery.overrideDefaults(function() {
                 return {
                     context: self.inline ? self.getBody() : self.getDoc(),
                     element: self.getBody()
@@ -29052,7 +28978,7 @@
              *
              * @method render
              */
-            render: function () {
+		render: function() {
                 var self = this, settings = self.settings, id = self.id, suffix = self.suffix;
 
                 function readyHandler() {
@@ -29095,21 +29021,21 @@
                     }
 
                     // Pass submit/reset from form to editor instance
-                    self.formEventDelegate = function (e) {
+				self.formEventDelegate = function(e) {
                         self.fire(e.type, e);
                     };
 
                     DOM.bind(form, 'submit reset', self.formEventDelegate);
 
                     // Reset contents in editor when the form is reset
-                    self.on('reset', function () {
+				self.on('reset', function() {
                         self.setContent(self.startContent, {format: 'raw'});
                     });
 
                     // Check page uses id="submit" or name="submit" for it's submit button
                     if (settings.submit_patch && !form.submit.nodeType && !form.submit.length && !form._mceOldSubmit) {
                         form._mceOldSubmit = form.submit;
-                        form.submit = function () {
+					form.submit = function() {
                             self.editorManager.triggerSave();
                             self.isNotDirty = true;
 
@@ -29140,7 +29066,7 @@
                 self.windowManager = new WindowManager(self);
 
                 if (settings.encoding == 'xml') {
-                    self.on('GetContent', function (e) {
+				self.on('GetContent', function(e) {
                         if (e.save) {
                             e.content = DOM.encode(e.content);
                         }
@@ -29148,7 +29074,7 @@
                 }
 
                 if (settings.add_form_submit_trigger) {
-                    self.on('submit', function () {
+				self.on('submit', function() {
                         if (self.initialized) {
                             self.save();
                         }
@@ -29156,7 +29082,7 @@
                 }
 
                 if (settings.add_unload_trigger) {
-                    self._beforeUnload = function () {
+				self._beforeUnload = function() {
                         if (self.initialized && !self.destroyed && !self.isHidden()) {
                             self.save({format: 'raw', no_events: true, set_dirty: false});
                         }
@@ -29194,12 +29120,12 @@
                         settings.plugins = settings.plugins.join(' ');
                     }
 
-                    each(settings.external_plugins, function (url, name) {
+				each(settings.external_plugins, function(url, name) {
                         PluginManager.load(name, url);
                         settings.plugins += ' ' + name;
                     });
 
-                    each(settings.plugins.split(/[ ,]/), function (plugin) {
+				each(settings.plugins.split(/[ ,]/), function(plugin) {
                         plugin = trim(plugin);
 
                         if (plugin && !PluginManager.urls[plugin]) {
@@ -29208,7 +29134,7 @@
 
                                 var dependencies = PluginManager.dependencies(plugin);
 
-                                each(dependencies, function (dep) {
+							each(dependencies, function(dep) {
                                     var defaultSettings = {
                                         prefix: 'plugins/',
                                         resource: dep,
@@ -29228,7 +29154,7 @@
                         }
                     });
 
-                    scriptLoader.loadQueue(function () {
+				scriptLoader.loadQueue(function() {
                         if (!self.removed) {
                             self.init();
                         }
@@ -29245,7 +29171,7 @@
              *
              * @method init
              */
-            init: function () {
+		init: function() {
                 var self = this, settings = self.settings, elm = self.getElement();
                 var w, h, minHeight, n, o, Theme, url, bodyId, bodyClass, re, i, initializedPlugins = [];
 
@@ -29284,7 +29210,7 @@
                     pluginUrl = PluginManager.urls[plugin] || self.documentBaseUrl.replace(/\/$/, '');
                     plugin = trim(plugin);
                     if (Plugin && inArray(initializedPlugins, plugin) === -1) {
-                        each(PluginManager.dependencies(plugin), function (dep) {
+					each(PluginManager.dependencies(plugin), function(dep) {
                             initPlugin(dep);
                         });
 
@@ -29358,7 +29284,7 @@
 
                 // Load specified content CSS last
                 if (settings.content_css) {
-                    each(explode(settings.content_css), function (u) {
+				each(explode(settings.content_css), function(u) {
                         self.contentCSS.push(self.documentBaseURI.toAbsolute(u));
                     });
                 }
@@ -29452,7 +29378,7 @@
                     }
                 });
 
-                ifr.onload = function () {
+			ifr.onload = function() {
                     ifr.onload = null;
                     self.fire("load");
                 };
@@ -29496,7 +29422,7 @@
              * @method initContentBody
              * @private
              */
-            initContentBody: function (skipWrite) {
+		initContentBody: function(skipWrite) {
                 var self = this, settings = self.settings, targetElm = self.getElement(), doc = self.getDoc(), body, contentCssText;
 
                 // Restore visibility on target element
@@ -29512,7 +29438,7 @@
                 }
 
                 if (settings.content_editable) {
-                    self.on('remove', function () {
+				self.on('remove', function() {
                         var bodyEl = this.getBody();
 
                         DOM.removeClass(bodyEl, 'mce-content-body');
@@ -29575,7 +29501,7 @@
                     root_element: self.inline ? self.getBody() : null,
                     collect: settings.content_editable,
                     schema: self.schema,
-                    onSetAttrib: function (e) {
+				onSetAttrib: function(e) {
                         self.fire('SetAttrib', e);
                     }
                 });
@@ -29589,7 +29515,7 @@
                 self.parser = new DomParser(settings, self.schema);
 
                 // Convert src and href into data-mce-src, data-mce-href and data-mce-style
-                self.parser.addAttributeFilter('src,href,style,tabindex', function (nodes, name) {
+			self.parser.addAttributeFilter('src,href,style,tabindex', function(nodes, name) {
                     var i = nodes.length, node, dom = self.dom, value, internalName;
 
                     while (i--) {
@@ -29624,7 +29550,7 @@
                 });
 
                 // Keep scripts from executing
-                self.parser.addNodeFilter('script', function (nodes) {
+			self.parser.addNodeFilter('script', function(nodes) {
                     var i = nodes.length, node, type;
 
                     while (i--) {
@@ -29636,7 +29562,7 @@
                     }
                 });
 
-                self.parser.addNodeFilter('#cdata', function (nodes) {
+			self.parser.addNodeFilter('#cdata', function(nodes) {
                     var i = nodes.length, node;
 
                     while (i--) {
@@ -29647,7 +29573,7 @@
                     }
                 });
 
-                self.parser.addNodeFilter('p,h1,h2,h3,h4,h5,h6,div', function (nodes) {
+			self.parser.addNodeFilter('p,h1,h2,h3,h4,h5,h6,div', function(nodes) {
                     var i = nodes.length, node, nonEmptyElements = self.schema.getNonEmptyElements();
 
                     while (i--) {
@@ -29730,22 +29656,22 @@
                 }
 
                 if (settings.protect) {
-                    self.on('BeforeSetContent', function (e) {
-                        each(settings.protect, function (pattern) {
-                            e.content = e.content.replace(pattern, function (str) {
+				self.on('BeforeSetContent', function(e) {
+					each(settings.protect, function(pattern) {
+						e.content = e.content.replace(pattern, function(str) {
                                 return '<!--mce:protected ' + escape(str) + '-->';
                             });
                         });
                     });
                 }
 
-                self.on('SetContent', function () {
+			self.on('SetContent', function() {
                     self.addVisual(self.getBody());
                 });
 
                 // Remove empty contents
                 if (settings.padd_empty_editor) {
-                    self.on('PostProcess', function (e) {
+				self.on('PostProcess', function(e) {
                         e.content = e.content.replace(/^(<p[^>]*>(&nbsp;|&#160;|\s|\u00a0|)<\/p>[\r\n]*|<br \/>[\r\n]*)$/, '');
                     });
                 }
@@ -29775,7 +29701,7 @@
                 if (self.contentStyles.length > 0) {
                     contentCssText = '';
 
-                    each(self.contentStyles, function (style) {
+				each(self.contentStyles, function(style) {
                         contentCssText += style + "\r\n";
                     });
 
@@ -29783,7 +29709,7 @@
                 }
 
                 // Load specified content CSS last
-                each(self.contentCSS, function (cssUrl) {
+			each(self.contentCSS, function(cssUrl) {
                     if (!self.loadedCSS[cssUrl]) {
                         self.dom.loadCSS(cssUrl);
                         self.loadedCSS[cssUrl] = true;
@@ -29792,7 +29718,7 @@
 
                 // Handle auto focus
                 if (settings.auto_focus) {
-                    setTimeout(function () {
+				setTimeout(function() {
                         var editor;
 
                         if (settings.auto_focus === true) {
@@ -29818,7 +29744,7 @@
              * @method focus
              * @param {Boolean} skipFocus Skip DOM focus. Just set is as the active editor.
              */
-            focus: function (skipFocus) {
+		focus: function(skipFocus) {
                 var self = this, selection = self.selection, contentEditable = self.settings.content_editable, rng;
                 var controlElm, doc = self.getDoc(), body;
 
@@ -29884,7 +29810,7 @@
              * @param {String} name Name of the callback to execute.
              * @return {Object} Return value passed from callback function.
              */
-            execCallback: function (name) {
+		execCallback: function(name) {
                 var self = this, callback = self.settings[name], scope;
 
                 if (!callback) {
@@ -29916,14 +29842,14 @@
              * @param {String} text String to translate by the language pack data.
              * @return {String} Translated string.
              */
-            translate: function (text) {
+		translate: function(text) {
                 var lang = this.settings.language || 'en', i18n = this.editorManager.i18n;
 
                 if (!text) {
                     return '';
                 }
 
-                return i18n.data[lang + '.' + text] || text.replace(/\{\#([^\}]+)\}/g, function (a, b) {
+			return i18n.data[lang + '.' + text] || text.replace(/\{\#([^\}]+)\}/g, function(a, b) {
                         return i18n.data[lang + '.' + b] || '{#' + b + '}';
                     });
             },
@@ -29935,7 +29861,7 @@
              * @param {String} name Name/key to get from the language pack.
              * @param {String} defaultVal Optional default value to retrive.
              */
-            getLang: function (name, defaultVal) {
+		getLang: function(name, defaultVal) {
                 return (
                     this.editorManager.i18n.data[(this.settings.language || 'en') + '.' + name] ||
                     (defaultVal !== undefined ? defaultVal : '{#' + name + '}')
@@ -29957,14 +29883,14 @@
              * // Returns a specific config value from a specific editor instance by id
              * var someval2 = tinymce.get('my_editor').getParam('myvalue');
              */
-            getParam: function (name, defaultVal, type) {
+		getParam: function(name, defaultVal, type) {
                 var value = name in this.settings ? this.settings[name] : defaultVal, output;
 
                 if (type === 'hash') {
                     output = {};
 
                     if (typeof value === 'string') {
-                        each(value.indexOf('=') > 0 ? value.split(/[;,](?![^=;,]*(?:[;,]|$))/) : value.split(','), function (value) {
+					each(value.indexOf('=') > 0 ? value.split(/[;,](?![^=;,]*(?:[;,]|$))/) : value.split(','), function(value) {
                             value = value.split('=');
 
                             if (value.length > 1) {
@@ -29990,7 +29916,7 @@
              * @method nodeChanged
              * @param {Object} args Optional args to pass to NodeChange event handlers.
              */
-            nodeChanged: function (args) {
+		nodeChanged: function(args) {
                 this._nodeChangeDispatcher.nodeChanged(args);
             },
 
@@ -30018,11 +29944,11 @@
 		 *    }
 		 * });
              */
-            addButton: function (name, settings) {
+		addButton: function(name, settings) {
                 var self = this;
 
                 if (settings.cmd) {
-                    settings.onclick = function () {
+				settings.onclick = function() {
                         self.execCommand(settings.cmd);
                     };
                 }
@@ -30061,11 +29987,11 @@
 		 *    }
 		 * });
              */
-            addMenuItem: function (name, settings) {
+		addMenuItem: function(name, settings) {
                 var self = this;
 
                 if (settings.cmd) {
-                    settings.onclick = function () {
+				settings.onclick = function() {
                         self.execCommand(settings.cmd);
                     };
                 }
@@ -30081,7 +30007,7 @@
              * @param {function/string} predicate Predicate that needs to return true if provided strings get converted into CSS predicates.
              * @param {String/Array} items String or array with items to add to the context toolbar.
              */
-            addContextToolbar: function (predicate, items) {
+		addContextToolbar: function(predicate, items) {
                 var self = this, selector;
 
                 self.contextToolbars = self.contextToolbars || [];
@@ -30089,7 +30015,7 @@
                 // Convert selector to predicate
                 if (typeof predicate == "string") {
                     selector = predicate;
-                    predicate = function (elm) {
+				predicate = function(elm) {
                         return self.dom.is(elm, selector);
                     };
                 }
@@ -30121,7 +30047,7 @@
 		 *    }
 		 * });
              */
-            addCommand: function (name, callback, scope) {
+		addCommand: function(name, callback, scope) {
                 /**
                  * Callback function that gets called when a command is executed.
                  *
@@ -30142,7 +30068,7 @@
              * @param {addQueryStateHandlerCallback} callback Function to execute when the command state retrieval occurs.
              * @param {Object} scope Optional scope to execute the function in.
              */
-            addQueryStateHandler: function (name, callback, scope) {
+		addQueryStateHandler: function(name, callback, scope) {
                 /**
                  * Callback function that gets called when a queryCommandState is executed.
                  *
@@ -30161,7 +30087,7 @@
              * @param {addQueryValueHandlerCallback} callback Function to execute when the command value retrieval occurs.
              * @param {Object} scope Optional scope to execute the function in.
              */
-            addQueryValueHandler: function (name, callback, scope) {
+		addQueryValueHandler: function(name, callback, scope) {
                 /**
                  * Callback function that gets called when a queryCommandValue is executed.
                  *
@@ -30181,7 +30107,7 @@
              * @param {Object} sc Optional scope to execute the function in.
              * @return {Boolean} true/false state if the shortcut was added or not.
              */
-            addShortcut: function (pattern, desc, cmdFunc, scope) {
+		addShortcut: function(pattern, desc, cmdFunc, scope) {
                 this.shortcuts.add(pattern, desc, cmdFunc, scope);
             },
 
@@ -30197,7 +30123,7 @@
              * @param {mixed} value Optional command value, this can be anything.
              * @param {Object} args Optional arguments object.
              */
-            execCommand: function (cmd, ui, value, args) {
+		execCommand: function(cmd, ui, value, args) {
                 return this.editorCommands.execCommand(cmd, ui, value, args);
             },
 
@@ -30208,7 +30134,7 @@
              * @param {string} cmd Command to query state from.
              * @return {Boolean} Command specific state, for example if bold is enabled or not.
              */
-            queryCommandState: function (cmd) {
+		queryCommandState: function(cmd) {
                 return this.editorCommands.queryCommandState(cmd);
             },
 
@@ -30219,7 +30145,7 @@
              * @param {string} cmd Command to query value from.
              * @return {Object} Command specific value, for example the current font size.
              */
-            queryCommandValue: function (cmd) {
+		queryCommandValue: function(cmd) {
                 return this.editorCommands.queryCommandValue(cmd);
             },
 
@@ -30230,7 +30156,7 @@
              * @param {String} cmd Command that we check support for.
              * @return {Boolean} true/false if the command is supported or not.
              */
-            queryCommandSupported: function (cmd) {
+		queryCommandSupported: function(cmd) {
                 return this.editorCommands.queryCommandSupported(cmd);
             },
 
@@ -30239,7 +30165,7 @@
              *
              * @method show
              */
-            show: function () {
+		show: function() {
                 var self = this;
 
                 if (self.hidden) {
@@ -30262,7 +30188,7 @@
              *
              * @method hide
              */
-            hide: function () {
+		hide: function() {
                 var self = this, doc = self.getDoc();
 
                 if (!self.hidden) {
@@ -30297,7 +30223,7 @@
              * @method isHidden
              * @return {Boolean} True/false if the editor is hidden or not.
              */
-            isHidden: function () {
+		isHidden: function() {
                 return !!this.hidden;
             },
 
@@ -30319,7 +30245,7 @@
              * // Show progress after 3 seconds
              * tinymce.activeEditor.setProgressState(true, 3000);
              */
-            setProgressState: function (state, time) {
+		setProgressState: function(state, time) {
                 this.fire('ProgressState', {state: state, time: time});
             },
 
@@ -30332,7 +30258,7 @@
              * @param {Object} args Optional content object, this gets passed around through the whole load process.
              * @return {String} HTML string that got set into the editor.
              */
-            load: function (args) {
+		load: function(args) {
                 var self = this, elm = self.getElement(), html;
 
                 if (elm) {
@@ -30361,7 +30287,7 @@
              * @param {Object} args Optional content object, this gets passed around through the whole save process.
              * @return {String} HTML string that got set into the textarea/div.
              */
-            save: function (args) {
+		save: function(args) {
                 var self = this, elm = self.getElement(), html, form;
 
                 if (!elm || !self.initialized) {
@@ -30393,7 +30319,7 @@
 
                     // Update hidden form element
                     if ((form = DOM.getParent(self.id, 'form'))) {
-                        each(form.elements, function (elm) {
+					each(form.elements, function(elm) {
                             if (elm.name == self.id) {
                                 elm.value = html;
                                 return false;
@@ -30434,7 +30360,7 @@
              * // Sets the bbcode contents of the activeEditor editor if the bbcode plugin was added
              * tinymce.activeEditor.setContent('[b]some[/b] html', {format: 'bbcode'});
              */
-            setContent: function (content, args) {
+		setContent: function(content, args) {
                 var self = this, body = self.getBody(), forcedRootBlockName, padd;
 
                 // Setup args object
@@ -30524,7 +30450,7 @@
              * // Get content of a specific editor:
              * tinymce.get('content id').getContent()
              */
-            getContent: function (args) {
+		getContent: function(args) {
                 var self = this, content, body = self.getBody();
 
                 // Setup args object
@@ -30569,7 +30495,7 @@
              * @param {String} content Content to insert.
              * @param {Object} args Optional args to pass to insert call.
              */
-            insertContent: function (content, args) {
+		insertContent: function(content, args) {
                 if (args) {
                     content = extend({content: content}, args);
                 }
@@ -30586,7 +30512,7 @@
              * if (tinymce.activeEditor.isDirty())
              *     alert("You must save your contents.");
              */
-            isDirty: function () {
+		isDirty: function() {
                 return !this.isNotDirty;
             },
 
@@ -30597,7 +30523,7 @@
              * @method getContainer
              * @return {Element} HTML DOM element for the editor container.
              */
-            getContainer: function () {
+		getContainer: function() {
                 var self = this;
 
                 if (!self.container) {
@@ -30614,7 +30540,7 @@
              * @method getContentAreaContainer
              * @return {Element} HTML DOM element for the editor area container.
              */
-            getContentAreaContainer: function () {
+		getContentAreaContainer: function() {
                 return this.contentAreaContainer;
             },
 
@@ -30624,7 +30550,7 @@
              * @method getElement
              * @return {Element} HTML DOM element for the replaced element.
              */
-            getElement: function () {
+		getElement: function() {
                 if (!this.targetElm) {
                     this.targetElm = DOM.get(this.id);
                 }
@@ -30638,7 +30564,7 @@
              * @method getWin
              * @return {Window} Iframe DOM window object.
              */
-            getWin: function () {
+		getWin: function() {
                 var self = this, elm;
 
                 if (!self.contentWindow) {
@@ -30658,7 +30584,7 @@
              * @method getDoc
              * @return {Document} Iframe DOM document object.
              */
-            getDoc: function () {
+		getDoc: function() {
                 var self = this, win;
 
                 if (!self.contentDocument) {
@@ -30679,7 +30605,7 @@
              * @method getBody
              * @return {Element} The root element of the editable area.
              */
-            getBody: function () {
+		getBody: function() {
                 return this.bodyElement || this.getDoc().body;
             },
 
@@ -30694,7 +30620,7 @@
              * @param {string/HTMLElement} elm Tag name or HTML DOM element depending on HTML or DOM insert.
              * @return {string} Converted URL string.
              */
-            convertURL: function (url, name, elm) {
+		convertURL: function(url, name, elm) {
                 var self = this, settings = self.settings;
 
                 // Use callback instead
@@ -30724,7 +30650,7 @@
              * @method addVisual
              * @param {Element} elm Optional root element to loop though to find tables etc that needs the visual aid.
              */
-            addVisual: function (elm) {
+		addVisual: function(elm) {
                 var self = this, settings = self.settings, dom = self.dom, cls;
 
                 elm = elm || self.getBody();
@@ -30733,7 +30659,7 @@
                     self.hasVisual = settings.visual;
                 }
 
-                each(dom.select('table,a', elm), function (elm) {
+			each(dom.select('table,a', elm), function(elm) {
                     var value;
 
                     switch (elm.nodeName) {
@@ -30773,7 +30699,7 @@
              *
              * @method remove
              */
-            remove: function () {
+		remove: function() {
                 var self = this;
 
                 if (!self.removed) {
@@ -30814,7 +30740,7 @@
              * @method destroy
              * @param {Boolean} automatic Optional state if the destroy is an automatic destroy or user called one.
              */
-            destroy: function (automatic) {
+		destroy: function(automatic) {
                 var self = this, form;
 
                 // One time is enough
@@ -30870,17 +30796,17 @@
              * @param {function} callback Optional callback with images and status for each image.
              * @return {tinymce.util.Promise} Promise instance.
              */
-            uploadImages: function (callback) {
+		uploadImages: function(callback) {
                 return this.editorUpload.uploadImages(callback);
             },
 
             // Internal functions
 
-            _scanForImages: function () {
+		_scanForImages: function() {
                 return this.editorUpload.scanForImages();
             },
 
-            _refreshContentEditable: function () {
+		_refreshContentEditable: function() {
                 var self = this, body, parent;
 
                 // Check if the editor was hidden and the re-initalize contentEditable mode by removing and adding the body again
@@ -30895,7 +30821,7 @@
                 }
             },
 
-            _isHidden: function () {
+		_isHidden: function() {
                 var sel;
 
                 if (!isGecko) {
@@ -30911,11 +30837,11 @@
         extend(Editor.prototype, EditorObservable);
 
         return Editor;
-    });
+});
 
 // Included from: js/tinymce/classes/util/I18n.js
 
-    /**
+/**
      * I18n.js
      *
      * Released under LGPL License.
@@ -30925,13 +30851,13 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * I18n class that handles translation of TinyMCE UI.
      * Uses po style with csharp style parameters.
      *
      * @class tinymce.util.I18n
      */
-    define("tinymce/util/I18n", [], function () {
+define("tinymce/util/I18n", [], function() {
         "use strict";
 
         var data = {}, code = "en";
@@ -30943,7 +30869,7 @@
              * @method setCode
              * @param {String} newCode Current language code.
              */
-            setCode: function (newCode) {
+		setCode: function(newCode) {
                 if (newCode) {
                     code = newCode;
                     this.rtl = this.data[newCode] ? this.data[newCode]._dir === 'rtl' : false;
@@ -30956,7 +30882,7 @@
              * @method getCode
              * @return {String} Current language code.
              */
-            getCode: function () {
+		getCode: function() {
                 return code;
             },
 
@@ -30975,7 +30901,7 @@
              * @param {String} code Language code like sv_SE.
              * @param {Array} items Name/value array with English en_US to sv_SE.
              */
-            add: function (code, items) {
+		add: function(code, items) {
                 var langData = data[code];
 
                 if (!langData) {
@@ -31001,7 +30927,7 @@
              * @param {String/Object/Array} text Text to translate.
              * @return {String} String that got translated.
              */
-            translate: function (text) {
+		translate: function(text) {
                 var langData;
 
                 langData = data[code];
@@ -31020,7 +30946,7 @@
                 if (text.push) {
                     var values = text.slice(1);
 
-                    text = (langData[text[0]] || text[0]).replace(/\{([0-9]+)\}/g, function (match1, match2) {
+				text = (langData[text[0]] || text[0]).replace(/\{([0-9]+)\}/g, function(match1, match2) {
                         return values[match2];
                     });
                 }
@@ -31030,11 +30956,11 @@
 
             data: data
         };
-    });
+});
 
 // Included from: js/tinymce/classes/FocusManager.js
 
-    /**
+/**
      * FocusManager.js
      *
      * Released under LGPL License.
@@ -31044,7 +30970,7 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This class manages the focus/blur state of the editor. This class is needed since some
      * browsers fire false focus/blur states when the selection is moved to a UI dialog or similar.
      *
@@ -31053,10 +30979,10 @@
      *
      * @class tinymce.FocusManager
      */
-    define("tinymce/FocusManager", [
+define("tinymce/FocusManager", [
         "tinymce/dom/DOMUtils",
         "tinymce/Env"
-    ], function (DOMUtils, Env) {
+], function(DOMUtils, Env) {
         var selectionChangeHandler, documentFocusInHandler, documentMouseUpHandler, DOM = DOMUtils.DOM;
 
         /**
@@ -31117,12 +31043,12 @@
             function registerEvents(e) {
                 var editor = e.editor;
 
-                editor.on('init', function () {
+			editor.on('init', function() {
                     // Gecko/WebKit has ghost selections in iframes and IE only has one selection per browser tab
                     if (editor.inline || Env.ie) {
                         // Use the onbeforedeactivate event when available since it works better see #7023
                         if ("onbeforedeactivate" in document && Env.ie < 9) {
-                            editor.dom.bind(editor.getBody(), 'beforedeactivate', function (e) {
+						editor.dom.bind(editor.getBody(), 'beforedeactivate', function(e) {
                                 if (e.target != editor.getBody()) {
                                     return;
                                 }
@@ -31135,7 +31061,7 @@
                             });
                         } else {
                             // On other browsers take snapshot on nodechange in inline mode since they have Ghost selections for iframes
-                            editor.on('nodechange mouseup keyup', function (e) {
+						editor.on('nodechange mouseup keyup', function(e) {
                                 var node = getActiveElement();
 
                                 // Only act on manual nodechanges
@@ -31157,7 +31083,7 @@
                         // Handles the issue with WebKit not retaining selection within inline document
                         // If the user releases the mouse out side the body since a mouse up event wont occur on the body
                         if (Env.webkit && !selectionChangeHandler) {
-                            selectionChangeHandler = function () {
+						selectionChangeHandler = function() {
                                 var activeEditor = editorManager.activeEditor;
 
                                 if (activeEditor && activeEditor.selection) {
@@ -31175,16 +31101,16 @@
                     }
                 });
 
-                editor.on('setcontent', function () {
+			editor.on('setcontent', function() {
                     editor.lastRng = null;
                 });
 
                 // Remove last selection bookmark on mousedown see #6305
-                editor.on('mousedown', function () {
+			editor.on('mousedown', function() {
                     editor.selection.lastFocusBookmark = null;
                 });
 
-                editor.on('focusin', function () {
+			editor.on('focusin', function() {
                     var focusedEditor = editorManager.focusedEditor;
 
                     if (editor.selection.lastFocusBookmark) {
@@ -31206,8 +31132,8 @@
                     editor.lastRng = null;
                 });
 
-                editor.on('focusout', function () {
-                    window.setTimeout(function () {
+			editor.on('focusout', function() {
+				window.setTimeout(function() {
                         var focusedEditor = editorManager.focusedEditor;
 
                         // Still the same editor the the blur was outside any editor UI
@@ -31226,7 +31152,7 @@
                 // Check if focus is moved to an element outside the active editor by checking if the target node
                 // isn't within the body of the activeEditor nor a UI element such as a dialog child control
                 if (!documentFocusInHandler) {
-                    documentFocusInHandler = function (e) {
+				documentFocusInHandler = function(e) {
                         var activeEditor = editorManager.activeEditor;
 
                         if (activeEditor && e.target.ownerDocument == document) {
@@ -31251,7 +31177,7 @@
                 // the mouse outside the editor producing a new selection. This weird workaround is needed since
                 // Gecko doesn't have the "selectionchange" event we need to do this. Fixes: #6843
                 if (editor.inline && !documentMouseUpHandler) {
-                    documentMouseUpHandler = function (e) {
+				documentMouseUpHandler = function(e) {
                         var activeEditor = editorManager.activeEditor;
 
                         if (activeEditor.inline && !activeEditor.dom.isChildOf(e.target, activeEditor.getBody())) {
@@ -31291,17 +31217,17 @@
          * @param  {Element} elm Element to check if it's part of the UI or not.
          * @return {Boolean} True/false state if the element is part of the UI or not.
          */
-        FocusManager.isEditorUIElement = function (elm) {
+	FocusManager.isEditorUIElement = function(elm) {
             // Needs to be converted to string since svg can have focus: #6776
             return elm.className.toString().indexOf('mce-') !== -1;
         };
 
         return FocusManager;
-    });
+});
 
 // Included from: js/tinymce/classes/EditorManager.js
 
-    /**
+/**
      * EditorManager.js
      *
      * Released under LGPL License.
@@ -31311,7 +31237,7 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This class used as a factory for manager for tinymce.Editor instances.
      *
      * @example
@@ -31321,7 +31247,7 @@
      * @mixes tinymce.util.Observable
      * @static
      */
-    define("tinymce/EditorManager", [
+define("tinymce/EditorManager", [
         "tinymce/Editor",
         "tinymce/dom/DomQuery",
         "tinymce/dom/DOMUtils",
@@ -31331,13 +31257,13 @@
         "tinymce/util/Observable",
         "tinymce/util/I18n",
         "tinymce/FocusManager"
-    ], function (Editor, $, DOMUtils, URI, Env, Tools, Observable, I18n, FocusManager) {
+], function(Editor, $, DOMUtils, URI, Env, Tools, Observable, I18n, FocusManager) {
         var DOM = DOMUtils.DOM;
         var explode = Tools.explode, each = Tools.each, extend = Tools.extend;
         var instanceCounter = 0, beforeUnloadDelegate, EditorManager, boundGlobalEvents = false;
 
         function globalEventDelegate(e) {
-            each(EditorManager.editors, function (editor) {
+		each(EditorManager.editors, function(editor) {
                 editor.fire('ResizeWindow', e);
             });
         }
@@ -31455,7 +31381,7 @@
              */
             activeEditor: null,
 
-            setup: function () {
+		setup: function() {
                 var self = this, baseURL, documentBaseURL, suffix = "", preInit, src;
 
                 // Get base URL for the current document
@@ -31561,7 +31487,7 @@
 		 *    some_settings : 'some value'
 		 * });
              */
-            init: function (settings) {
+		init: function(settings) {
                 var self = this, editors = [];
 
                 function createId(elm) {
@@ -31617,8 +31543,8 @@
 
                     if (settings.types) {
                         // Process type specific selector
-                        each(settings.types, function (type) {
-                            each(DOM.select(type.selector), function (elm) {
+					each(settings.types, function(type) {
+						each(DOM.select(type.selector), function(elm) {
                                 createEditor(createId(elm), extend({}, settings, type), elm);
                             });
                         });
@@ -31626,7 +31552,7 @@
                         return;
                     } else if (settings.selector) {
                         // Process global selector
-                        each(DOM.select(settings.selector), function (elm) {
+					each(DOM.select(settings.selector), function(elm) {
                             createEditor(createId(elm), settings, elm);
                         });
 
@@ -31641,14 +31567,14 @@
                             l = settings.elements || '';
 
                             if (l.length > 0) {
-                                each(explode(l), function (id) {
+							each(explode(l), function(id) {
                                     var elm;
 
                                     if ((elm = DOM.get(id))) {
                                         createEditor(id, settings, elm);
                                     } else {
-                                        each(document.forms, function (f) {
-                                            each(f.elements, function (e) {
+									each(document.forms, function(f) {
+										each(f.elements, function(e) {
                                                 if (e.name === id) {
                                                     id = 'mce_editor_' + instanceCounter++;
                                                     DOM.setAttrib(e, 'id', id);
@@ -31663,7 +31589,7 @@
 
                         case "textareas":
                         case "specific_textareas":
-                            each(DOM.select('textarea'), function (elm) {
+						each(DOM.select('textarea'), function(elm) {
                                 if (settings.editor_deselector && hasClass(elm, settings.editor_deselector)) {
                                     return;
                                 }
@@ -31679,12 +31605,12 @@
                     if (settings.oninit) {
                         l = co = 0;
 
-                        each(editors, function (ed) {
+					each(editors, function(ed) {
                             co++;
 
                             if (!ed.initialized) {
                                 // Wait for it
-                                ed.on('init', function () {
+							ed.on('init', function() {
                                     l++;
 
                                     // All done
@@ -31726,7 +31652,7 @@
 		 *    ed.windowManager.alert('Hello world!');
 		 * });
              */
-            get: function (id) {
+		get: function(id) {
                 if (!arguments.length) {
                     return this.editors;
                 }
@@ -31741,7 +31667,7 @@
              * @param {tinymce.Editor} editor Editor instance to add to the collection.
              * @return {tinymce.Editor} The same instance that got passed in.
              */
-            add: function (editor) {
+		add: function(editor) {
                 var self = this, editors = self.editors;
 
                 // Add named and index editor instance
@@ -31763,7 +31689,7 @@
                 self.fire('AddEditor', {editor: editor});
 
                 if (!beforeUnloadDelegate) {
-                    beforeUnloadDelegate = function () {
+				beforeUnloadDelegate = function() {
                         self.fire('BeforeUnload');
                     };
 
@@ -31781,7 +31707,7 @@
              * @param {Object} settings Editor instance settings.
              * @return {tinymce.Editor} Editor instance that got created.
              */
-            createEditor: function (id, settings) {
+		createEditor: function(id, settings) {
                 return this.add(new Editor(id, settings, this));
             },
 
@@ -31805,7 +31731,7 @@
              * @param {tinymce.Editor/String/Object} [selector] CSS selector or editor instance to remove.
              * @return {tinymce.Editor} The editor that got passed in will be return if it was found otherwise null.
              */
-            remove: function (selector) {
+		remove: function(selector) {
                 var self = this, i, editors = self.editors, editor;
 
                 // Remove all editors
@@ -31821,7 +31747,7 @@
                 if (typeof selector == "string") {
                     selector = selector.selector || selector;
 
-                    each(DOM.select(selector), function (elm) {
+				each(DOM.select(selector), function(elm) {
                         editor = editors[elm.id];
 
                         if (editor) {
@@ -31870,7 +31796,7 @@
              * @param {String} v Optional value parameter like for example an URL to a link.
              * @return {Boolean} true/false if the command was executed or not.
              */
-            execCommand: function (cmd, ui, value) {
+		execCommand: function(cmd, ui, value) {
                 var self = this, editor = self.get(value);
 
                 // Manager commands
@@ -31920,8 +31846,8 @@
              * // Saves all contents
              * tinyMCE.triggerSave();
              */
-            triggerSave: function () {
-                each(this.editors, function (editor) {
+		triggerSave: function() {
+			each(this.editors, function(editor) {
                     editor.save();
                 });
             },
@@ -31933,7 +31859,7 @@
              * @param {String} code Optional language code.
              * @param {Object} items Name/value object with translations.
              */
-            addI18n: function (code, items) {
+		addI18n: function(code, items) {
                 I18n.add(code, items);
             },
 
@@ -31944,7 +31870,7 @@
              * @param {String/Array/Object} text String to translate
              * @return {String} Translated string.
              */
-            translate: function (text) {
+		translate: function(text) {
                 return I18n.translate(text);
             },
 
@@ -31954,7 +31880,7 @@
              * @method setActive
              * @param {tinymce.Editor} editor Editor instance to set as the active instance.
              */
-            setActive: function (editor) {
+		setActive: function(editor) {
                 var activeEditor = this.activeEditor;
 
                 if (this.activeEditor != editor) {
@@ -31977,11 +31903,11 @@
         window.tinymce = window.tinyMCE = EditorManager;
 
         return EditorManager;
-    });
+});
 
 // Included from: js/tinymce/classes/LegacyInput.js
 
-    /**
+/**
      * LegacyInput.js
      *
      * Released under LGPL License.
@@ -31991,26 +31917,26 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * Converts legacy input to modern HTML.
      *
      * @class tinymce.LegacyInput
      * @private
      */
-    define("tinymce/LegacyInput", [
+define("tinymce/LegacyInput", [
         "tinymce/EditorManager",
         "tinymce/util/Tools"
-    ], function (EditorManager, Tools) {
+], function(EditorManager, Tools) {
         var each = Tools.each, explode = Tools.explode;
 
-        EditorManager.on('AddEditor', function (e) {
+	EditorManager.on('AddEditor', function(e) {
             var editor = e.editor;
 
-            editor.on('preInit', function () {
+		editor.on('preInit', function() {
                 var filters, fontSizes, dom, settings = editor.settings;
 
                 function replaceWithSpan(node, styles) {
-                    each(styles, function (value, name) {
+				each(styles, function(value, name) {
                         if (value) {
                             dom.setStyle(node, name, value);
                         }
@@ -32023,7 +31949,7 @@
                     dom = editor.dom;
 
                     if (settings.convert_fonts_to_spans) {
-                        each(dom.select('font,u,strike', e.node), function (node) {
+					each(dom.select('font,u,strike', e.node), function(node) {
                             filters[node.nodeName.toLowerCase()](dom, node);
                         });
                     }
@@ -32033,7 +31959,7 @@
                     fontSizes = explode(settings.font_size_legacy_values);
 
                     filters = {
-                        font: function (dom, node) {
+					font: function(dom, node) {
                             replaceWithSpan(node, {
                                 backgroundColor: node.style.backgroundColor,
                                 color: node.color,
@@ -32042,7 +31968,7 @@
                             });
                         },
 
-                        u: function (dom, node) {
+					u: function(dom, node) {
                             // HTML5 allows U element
                             if (editor.settings.schema === "html4") {
                                 replaceWithSpan(node, {
@@ -32051,7 +31977,7 @@
                             }
                         },
 
-                        strike: function (dom, node) {
+					strike: function(dom, node) {
                             replaceWithSpan(node, {
                                 textDecoration: 'line-through'
                             });
@@ -32062,11 +31988,11 @@
                 }
             });
         });
-    });
+});
 
 // Included from: js/tinymce/classes/util/XHR.js
 
-    /**
+/**
      * XHR.js
      *
      * Released under LGPL License.
@@ -32076,7 +32002,7 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This class enables you to send XMLHTTPRequests cross browser.
      * @class tinymce.util.XHR
      * @mixes tinymce.util.Observable
@@ -32095,10 +32021,10 @@
  *     e.xhr.setRequestHeader('X-Requested-With', 'Something');
  * });
      */
-    define("tinymce/util/XHR", [
+define("tinymce/util/XHR", [
         "tinymce/util/Observable",
         "tinymce/util/Tools"
-    ], function (Observable, Tools) {
+], function(Observable, Tools) {
         var XHR = {
             /**
              * Sends a XMLHTTPRequest.
@@ -32107,7 +32033,7 @@
              * @method send
              * @param {Object} settings Object will target URL, callbacks and other info needed to make the request.
              */
-            send: function (settings) {
+		send: function(settings) {
                 var xhr, count = 0;
 
                 function ready() {
@@ -32149,7 +32075,7 @@
                     }
 
                     if (settings.requestheaders) {
-                        Tools.each(settings.requestheaders, function (header) {
+					Tools.each(settings.requestheaders, function(header) {
                             xhr.setRequestHeader(header.key, header.value);
                         });
                     }
@@ -32173,11 +32099,11 @@
         Tools.extend(XHR, Observable);
 
         return XHR;
-    });
+});
 
 // Included from: js/tinymce/classes/util/JSON.js
 
-    /**
+/**
      * JSON.js
      *
      * Released under LGPL License.
@@ -32187,7 +32113,7 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * JSON parser and serializer class.
      *
      * @class tinymce.util.JSON
@@ -32199,7 +32125,7 @@
      * // JSON serialize a object into an string
      * var str = tinymce.util.JSON.serialize(obj);
      */
-    define("tinymce/util/JSON", [], function () {
+define("tinymce/util/JSON", [], function() {
         function serialize(o, quote) {
             var i, v, t, name;
 
@@ -32214,7 +32140,7 @@
             if (t == 'string') {
                 v = '\bb\tt\nn\ff\rr\""\'\'\\\\';
 
-                return quote + o.replace(/([\u0080-\uFFFF\x00-\x1f\"\'\\])/g, function (a, b) {
+			return quote + o.replace(/([\u0080-\uFFFF\x00-\x1f\"\'\\])/g, function(a, b) {
                         // Make sure single quotes never get encoded inside double quotes for JSON compatibility
                         if (quote === '"' && a === "'") {
                             return a;
@@ -32274,7 +32200,7 @@
              * @param {string} s JSON String to parse into a JavaScript object.
              * @return {Object} Object from input JSON string or undefined if it failed.
              */
-            parse: function (text) {
+		parse: function(text) {
                 try {
                     // Trick uglify JS
                     return window[String.fromCharCode(101) + 'val']('(' + text + ')');
@@ -32285,11 +32211,11 @@
 
             /**#@-*/
         };
-    });
+});
 
 // Included from: js/tinymce/classes/util/JSONRequest.js
 
-    /**
+/**
      * JSONRequest.js
      *
      * Released under LGPL License.
@@ -32299,7 +32225,7 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This class enables you to use JSON-RPC to call backend methods.
      *
      * @class tinymce.util.JSONRequest
@@ -32326,11 +32252,11 @@
  *     }
  * });
      */
-    define("tinymce/util/JSONRequest", [
+define("tinymce/util/JSONRequest", [
         "tinymce/util/JSON",
         "tinymce/util/XHR",
         "tinymce/util/Tools"
-    ], function (JSON, XHR, Tools) {
+], function(JSON, XHR, Tools) {
         var extend = Tools.extend;
 
         function JSONRequest(settings) {
@@ -32346,7 +32272,7 @@
          * @static
          * @param {Object} o Call object where there are three field id, method and params this object should also contain callbacks etc.
          */
-        JSONRequest.sendRPC = function (o) {
+	JSONRequest.sendRPC = function(o) {
             return new JSONRequest().send(o);
         };
 
@@ -32357,12 +32283,12 @@
              * @method send
              * @param {Object} args Call object where there are three field id, method and params this object should also contain callbacks etc.
              */
-            send: function (args) {
+		send: function(args) {
                 var ecb = args.error, scb = args.success;
 
                 args = extend(this.settings, args);
 
-                args.success = function (c, x) {
+			args.success = function(c, x) {
                     c = JSON.parse(c);
 
                     if (typeof c == 'undefined') {
@@ -32378,7 +32304,7 @@
                     }
                 };
 
-                args.error = function (ty, x) {
+			args.error = function(ty, x) {
                     if (ecb) {
                         ecb.call(args.error_scope || args.scope, ty, x);
                     }
@@ -32398,11 +32324,11 @@
         };
 
         return JSONRequest;
-    });
+});
 
 // Included from: js/tinymce/classes/util/JSONP.js
 
-    /**
+/**
      * JSONP.js
      *
      * Released under LGPL License.
@@ -32412,18 +32338,18 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    define("tinymce/util/JSONP", [
+define("tinymce/util/JSONP", [
         "tinymce/dom/DOMUtils"
-    ], function (DOMUtils) {
+], function(DOMUtils) {
         return {
             callbacks: {},
             count: 0,
 
-            send: function (settings) {
+		send: function(settings) {
                 var self = this, dom = DOMUtils.DOM, count = settings.count !== undefined ? settings.count : self.count;
                 var id = 'tinymce_jsonp_' + count;
 
-                self.callbacks[count] = function (json) {
+			self.callbacks[count] = function(json) {
                     dom.remove(id);
                     delete self.callbacks[count];
 
@@ -32439,11 +32365,11 @@
                 self.count++;
             }
         };
-    });
+});
 
 // Included from: js/tinymce/classes/util/LocalStorage.js
 
-    /**
+/**
      * LocalStorage.js
      *
      * Released under LGPL License.
@@ -32453,7 +32379,7 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This class will simulate LocalStorage on IE 7 and return the native version on modern browsers.
      * Storage is done using userData on IE 7 and a special serialization format. The format is designed
      * to be as small as possible by making sure that the keys and values doesn't need to be encoded. This
@@ -32472,7 +32398,7 @@
      * tinymce.util.LocalStorage.setItem('key', 'value');
      * var value = tinymce.util.LocalStorage.getItem('key');
      */
-    define("tinymce/util/LocalStorage", [], function () {
+define("tinymce/util/LocalStorage", [], function() {
         var LocalStorage, storageElm, items, keys, userDataKey, hasOldIEDataSupport;
 
         // Check for native support
@@ -32603,7 +32529,7 @@
              * @param {Number} index Index of key to return.
              * @return {String} Key value or null if it wasn't found.
              */
-            key: function (index) {
+		key: function(index) {
                 return keys[index];
             },
 
@@ -32614,7 +32540,7 @@
              * @param {String} key Key of item to retrive.
              * @return {String} Value of the specified item or null if it wasn't found.
              */
-            getItem: function (key) {
+		getItem: function(key) {
                 return key in items ? items[key] : null;
             },
 
@@ -32625,7 +32551,7 @@
              * @param {String} key Key of the item to set.
              * @param {String} value Value of the item to set.
              */
-            setItem: function (key, value) {
+		setItem: function(key, value) {
                 items[key] = "" + value;
                 save();
             },
@@ -32636,7 +32562,7 @@
              * @method removeItem
              * @param {String} key Key of item to remove.
              */
-            removeItem: function (key) {
+		removeItem: function(key) {
                 delete items[key];
                 save();
             },
@@ -32646,7 +32572,7 @@
              *
              * @method clear
              */
-            clear: function () {
+		clear: function() {
                 items = {};
                 save();
             }
@@ -32655,11 +32581,11 @@
         load();
 
         return LocalStorage;
-    });
+});
 
 // Included from: js/tinymce/classes/Compat.js
 
-    /**
+/**
      * Compat.js
      *
      * Released under LGPL License.
@@ -32669,7 +32595,7 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * TinyMCE core class.
      *
      * @static
@@ -32677,14 +32603,14 @@
      * @borrow-members tinymce.EditorManager
      * @borrow-members tinymce.util.Tools
      */
-    define("tinymce/Compat", [
+define("tinymce/Compat", [
         "tinymce/dom/DOMUtils",
         "tinymce/dom/EventUtils",
         "tinymce/dom/ScriptLoader",
         "tinymce/AddOnManager",
         "tinymce/util/Tools",
         "tinymce/Env"
-    ], function (DOMUtils, EventUtils, ScriptLoader, AddOnManager, Tools, Env) {
+], function(DOMUtils, EventUtils, ScriptLoader, AddOnManager, Tools, Env) {
         var tinymce = window.tinymce;
 
         /**
@@ -32701,50 +32627,50 @@
         tinymce.dom = tinymce.dom || {};
         tinymce.dom.Event = EventUtils.Event;
 
-        Tools.each(Tools, function (func, key) {
+	Tools.each(Tools, function(func, key) {
             tinymce[key] = func;
         });
 
-        Tools.each('isOpera isWebKit isIE isGecko isMac'.split(' '), function (name) {
+	Tools.each('isOpera isWebKit isIE isGecko isMac'.split(' '), function(name) {
             tinymce[name] = Env[name.substr(2).toLowerCase()];
         });
 
         return {};
-    });
+});
 
 // Describe the different namespaces
 
-    /**
+/**
      * Root level namespace this contains classes directly releated to the TinyMCE editor.
      *
      * @namespace tinymce
      */
 
-    /**
+/**
      * Contains classes for handling the browsers DOM.
      *
      * @namespace tinymce.dom
      */
 
-    /**
+/**
      * Contains html parser and serializer logic.
      *
      * @namespace tinymce.html
      */
 
-    /**
+/**
      * Contains the different UI types such as buttons, listboxes etc.
      *
      * @namespace tinymce.ui
      */
 
-    /**
+/**
      * Contains various utility classes such as json parser, cookies etc.
      *
      * @namespace tinymce.util
      */
 
-    /**
+/**
      * Contains modules to handle data binding.
      *
      * @namespace tinymce.data
@@ -32752,7 +32678,7 @@
 
 // Included from: js/tinymce/classes/ui/Layout.js
 
-    /**
+/**
      * Layout.js
      *
      * Released under LGPL License.
@@ -32762,15 +32688,15 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * Base layout manager class.
      *
      * @class tinymce.ui.Layout
      */
-    define("tinymce/ui/Layout", [
+define("tinymce/ui/Layout", [
         "tinymce/util/Class",
         "tinymce/util/Tools"
-    ], function (Class, Tools) {
+], function(Class, Tools) {
         "use strict";
 
         return Class.extend({
@@ -32785,7 +32711,7 @@
              * @constructor
              * @param {Object} settings Name/value object with settings.
              */
-            init: function (settings) {
+		init: function(settings) {
                 this.settings = Tools.extend({}, this.Defaults, settings);
             },
 
@@ -32795,7 +32721,7 @@
              * @method preRender
              * @param {tinymce.ui.Container} container Container instance to preRender.
              */
-            preRender: function (container) {
+		preRender: function(container) {
                 container.bodyClasses.add(this.settings.containerClass);
             },
 
@@ -32804,13 +32730,13 @@
              *
              * @private
              */
-            applyClasses: function (items) {
+		applyClasses: function(items) {
                 var self = this, settings = self.settings, firstClass, lastClass, firstItem, lastItem;
 
                 firstClass = settings.firstControlClass;
                 lastClass = settings.lastControlClass;
 
-                items.each(function (item) {
+			items.each(function(item) {
                     item.classes.remove(firstClass).remove(lastClass).add(settings.controlClass);
 
                     if (item.visible()) {
@@ -32837,12 +32763,12 @@
              * @method renderHtml
              * @param {tinymce.ui.Container} container Container to render HTML for.
              */
-            renderHtml: function (container) {
+		renderHtml: function(container) {
                 var self = this, html = '';
 
                 self.applyClasses(container.items());
 
-                container.items().each(function (item) {
+			container.items().each(function(item) {
                     html += item.renderHtml();
                 });
 
@@ -32855,7 +32781,7 @@
              * @method recalc
              * @param {tinymce.ui.Container} container Container instance to recalc.
              */
-            recalc: function () {
+		recalc: function() {
             },
 
             /**
@@ -32864,18 +32790,18 @@
              * @method postRender
              * @param {tinymce.ui.Container} container Container instance to postRender.
              */
-            postRender: function () {
+		postRender: function() {
             },
 
-            isNative: function () {
+		isNative: function() {
                 return false;
             }
         });
-    });
+});
 
 // Included from: js/tinymce/classes/ui/AbsoluteLayout.js
 
-    /**
+/**
      * AbsoluteLayout.js
      *
      * Released under LGPL License.
@@ -32885,7 +32811,7 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * LayoutManager for absolute positioning. This layout manager is more of
      * a base class for other layouts but can be created and used directly.
      *
@@ -32893,9 +32819,9 @@
      * @class tinymce.ui.AbsoluteLayout
      * @extends tinymce.ui.Layout
      */
-    define("tinymce/ui/AbsoluteLayout", [
+define("tinymce/ui/AbsoluteLayout", [
         "tinymce/ui/Layout"
-    ], function (Layout) {
+], function(Layout) {
         "use strict";
 
         return Layout.extend({
@@ -32910,8 +32836,8 @@
              * @method recalc
              * @param {tinymce.ui.Container} container Container instance to recalc.
              */
-            recalc: function (container) {
-                container.items().filter(':visible').each(function (ctrl) {
+		recalc: function(container) {
+			container.items().filter(':visible').each(function(ctrl) {
                     var settings = ctrl.settings;
 
                     ctrl.layoutRect({
@@ -32933,15 +32859,15 @@
              * @method renderHtml
              * @param {tinymce.ui.Container} container Container to render HTML for.
              */
-            renderHtml: function (container) {
+		renderHtml: function(container) {
                 return '<div id="' + container._id + '-absend" class="' + container.classPrefix + 'abs-end"></div>' + this._super(container);
             }
         });
-    });
+});
 
 // Included from: js/tinymce/classes/ui/Tooltip.js
 
-    /**
+/**
      * Tooltip.js
      *
      * Released under LGPL License.
@@ -32951,7 +32877,7 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * Creates a tooltip instance.
      *
      * @-x-less ToolTip.less
@@ -32959,10 +32885,10 @@
      * @extends tinymce.ui.Control
      * @mixes tinymce.ui.Movable
      */
-    define("tinymce/ui/Tooltip", [
+define("tinymce/ui/Tooltip", [
         "tinymce/ui/Control",
         "tinymce/ui/Movable"
-    ], function (Control, Movable) {
+], function(Control, Movable) {
         return Control.extend({
             Mixins: [Movable],
 
@@ -32976,7 +32902,7 @@
              * @method renderHtml
              * @return {String} HTML representing the control.
              */
-            renderHtml: function () {
+		renderHtml: function() {
                 var self = this, prefix = self.classPrefix;
 
                 return (
@@ -32987,10 +32913,10 @@
                 );
             },
 
-            bindStates: function () {
+		bindStates: function() {
                 var self = this;
 
-                self.state.on('change:text', function (e) {
+			self.state.on('change:text', function(e) {
                     self.getEl().lastChild.innerHTML = self.encode(e.value);
                 });
 
@@ -33002,7 +32928,7 @@
              *
              * @method repaint
              */
-            repaint: function () {
+		repaint: function() {
                 var self = this, style, rect;
 
                 style = self.getEl().style;
@@ -33013,11 +32939,11 @@
                 style.zIndex = 0xFFFF + 0xFFFF;
             }
         });
-    });
+});
 
 // Included from: js/tinymce/classes/ui/Widget.js
 
-    /**
+/**
      * Widget.js
      *
      * Released under LGPL License.
@@ -33027,16 +32953,16 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * Widget base class a widget is a control that has a tooltip and some basic states.
      *
      * @class tinymce.ui.Widget
      * @extends tinymce.ui.Control
      */
-    define("tinymce/ui/Widget", [
+define("tinymce/ui/Widget", [
         "tinymce/ui/Control",
         "tinymce/ui/Tooltip"
-    ], function (Control, Tooltip) {
+], function(Control, Tooltip) {
         "use strict";
 
         var tooltip;
@@ -33051,7 +32977,7 @@
              * @setting {Boolean} autofocus True if the control should be focused when rendered.
              * @setting {String} text Text to display inside widget.
              */
-            init: function (settings) {
+		init: function(settings) {
                 var self = this;
 
                 self._super(settings);
@@ -33059,7 +32985,7 @@
                 self.canFocus = true;
 
                 if (settings.tooltip && Widget.tooltips !== false) {
-                    self.on('mouseenter', function (e) {
+				self.on('mouseenter', function(e) {
                         var tooltip = self.tooltip().moveTo(-0xFFFF);
 
                         if (e.control == self) {
@@ -33075,7 +33001,7 @@
                         }
                     });
 
-                    self.on('mouseleave mousedown click', function () {
+				self.on('mouseleave mousedown click', function() {
                         self.tooltip().hide();
                     });
                 }
@@ -33089,7 +33015,7 @@
              * @method tooltip
              * @return {tinymce.ui.Tooltip} Tooltip instance.
              */
-            tooltip: function () {
+		tooltip: function() {
                 if (!tooltip) {
                     tooltip = new Tooltip({type: 'tooltip'});
                     tooltip.renderTo();
@@ -33103,7 +33029,7 @@
              *
              * @method postRender
              */
-            postRender: function () {
+		postRender: function() {
                 var self = this, settings = self.settings;
 
                 self._super();
@@ -33118,7 +33044,7 @@
                 }
             },
 
-            bindStates: function () {
+		bindStates: function() {
                 var self = this;
 
                 function disable(state) {
@@ -33131,11 +33057,11 @@
                     self.classes.toggle('active', state);
                 }
 
-                self.state.on('change:disabled', function (e) {
+			self.state.on('change:disabled', function(e) {
                     disable(e.value);
                 });
 
-                self.state.on('change:active', function (e) {
+			self.state.on('change:active', function(e) {
                     active(e.value);
                 });
 
@@ -33156,7 +33082,7 @@
              * @method remove
              * @return {tinymce.ui.Control} Current control instance.
              */
-            remove: function () {
+		remove: function() {
                 this._super();
 
                 if (tooltip) {
@@ -33167,11 +33093,11 @@
         });
 
         return Widget;
-    });
+});
 
 // Included from: js/tinymce/classes/ui/Button.js
 
-    /**
+/**
      * Button.js
      *
      * Released under LGPL License.
@@ -33181,7 +33107,7 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This class is used to create buttons. You can create them directly or through the Factory.
      *
      * @example
@@ -33195,9 +33121,9 @@
      * @class tinymce.ui.Button
      * @extends tinymce.ui.Widget
      */
-    define("tinymce/ui/Button", [
+define("tinymce/ui/Button", [
         "tinymce/ui/Widget"
-    ], function (Widget) {
+], function(Widget) {
         "use strict";
 
         return Widget.extend({
@@ -33215,7 +33141,7 @@
              * @setting {String} image Image to use for icon.
              * @setting {String} icon Icon to use for button.
              */
-            init: function (settings) {
+		init: function(settings) {
                 var self = this, size;
 
                 self._super(settings);
@@ -33223,11 +33149,11 @@
 
                 size = self.settings.size;
 
-                self.on('click mousedown', function (e) {
+			self.on('click mousedown', function(e) {
                     e.preventDefault();
                 });
 
-                self.on('touchstart', function (e) {
+			self.on('touchstart', function(e) {
                     self.fire('click', e);
                     e.preventDefault();
                 });
@@ -33252,7 +33178,7 @@
              * @param {String} [icon] New icon identifier.
              * @return {String|tinymce.ui.MenuButton} Current icon or current MenuButton instance.
              */
-            icon: function (icon) {
+		icon: function(icon) {
                 if (!arguments.length) {
                     return this.state.get('icon');
                 }
@@ -33267,7 +33193,7 @@
              *
              * @method repaint
              */
-            repaint: function () {
+		repaint: function() {
                 var btnElm = this.getEl().firstChild,
                     btnStyle;
 
@@ -33285,7 +33211,7 @@
              * @method renderHtml
              * @return {String} HTML representing the control.
              */
-            renderHtml: function () {
+		renderHtml: function() {
                 var self = this, id = self._id, prefix = self.classPrefix;
                 var icon = self.state.get('icon'), image, text = self.state.get('text');
 
@@ -33319,7 +33245,7 @@
                 );
             },
 
-            bindStates: function () {
+		bindStates: function() {
                 var self = this;
 
                 function setButtonText(text) {
@@ -33334,11 +33260,11 @@
                     self.classes.toggle('btn-has-text', !!text);
                 }
 
-                self.state.on('change:text', function (e) {
+			self.state.on('change:text', function(e) {
                     setButtonText(e.value);
                 });
 
-                self.state.on('change:icon', function (e) {
+			self.state.on('change:icon', function(e) {
                     var icon = e.value, prefix = self.classPrefix;
 
                     self.settings.icon = icon;
@@ -33363,11 +33289,11 @@
                 return self._super();
             }
         });
-    });
+});
 
 // Included from: js/tinymce/classes/ui/ButtonGroup.js
 
-    /**
+/**
      * ButtonGroup.js
      *
      * Released under LGPL License.
@@ -33377,7 +33303,7 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This control enables you to put multiple buttons into a group. This is
      * useful when you want to combine similar toolbar buttons into a group.
      *
@@ -33395,9 +33321,9 @@
      * @class tinymce.ui.ButtonGroup
      * @extends tinymce.ui.Container
      */
-    define("tinymce/ui/ButtonGroup", [
+define("tinymce/ui/ButtonGroup", [
         "tinymce/ui/Container"
-    ], function (Container) {
+], function(Container) {
         "use strict";
 
         return Container.extend({
@@ -33412,7 +33338,7 @@
              * @method renderHtml
              * @return {String} HTML representing the control.
              */
-            renderHtml: function () {
+		renderHtml: function() {
                 var self = this, layout = self._layout;
 
                 self.classes.add('btn-group');
@@ -33428,11 +33354,11 @@
                 );
             }
         });
-    });
+});
 
 // Included from: js/tinymce/classes/ui/Checkbox.js
 
-    /**
+/**
      * Checkbox.js
      *
      * Released under LGPL License.
@@ -33442,7 +33368,7 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This control creates a custom checkbox.
      *
      * @example
@@ -33457,9 +33383,9 @@
      * @class tinymce.ui.Checkbox
      * @extends tinymce.ui.Widget
      */
-    define("tinymce/ui/Checkbox", [
+define("tinymce/ui/Checkbox", [
         "tinymce/ui/Widget"
-    ], function (Widget) {
+], function(Widget) {
         "use strict";
 
         return Widget.extend({
@@ -33476,16 +33402,16 @@
              * @param {Object} settings Name/value object with settings.
              * @setting {Boolean} checked True if the checkbox should be checked by default.
              */
-            init: function (settings) {
+		init: function(settings) {
                 var self = this;
 
                 self._super(settings);
 
-                self.on('click mousedown', function (e) {
+			self.on('click mousedown', function(e) {
                     e.preventDefault();
                 });
 
-                self.on('click', function (e) {
+			self.on('click', function(e) {
                     e.preventDefault();
 
                     if (!self.disabled()) {
@@ -33503,7 +33429,7 @@
              * @param {Boolean} [state] State to be set.
              * @return {Boolean|tinymce.ui.Checkbox} True/false or checkbox if it's a set operation.
              */
-            checked: function (state) {
+		checked: function(state) {
                 if (!arguments.length) {
                     return this.state.get('checked');
                 }
@@ -33520,7 +33446,7 @@
              * @param {Boolean} [state] State to be set.
              * @return {Boolean|tinymce.ui.Checkbox} True/false or checkbox if it's a set operation.
              */
-            value: function (state) {
+		value: function(state) {
                 if (!arguments.length) {
                     return this.checked();
                 }
@@ -33534,7 +33460,7 @@
              * @method renderHtml
              * @return {String} HTML representing the control.
              */
-            renderHtml: function () {
+		renderHtml: function() {
                 var self = this, id = self._id, prefix = self.classPrefix;
 
                 return (
@@ -33545,7 +33471,7 @@
                 );
             },
 
-            bindStates: function () {
+		bindStates: function() {
                 var self = this;
 
                 function checked(state) {
@@ -33553,16 +33479,16 @@
                     self.aria('checked', state);
                 }
 
-                self.state.on('change:text', function (e) {
+			self.state.on('change:text', function(e) {
                     self.getEl('al').firstChild.data = self.translate(e.value);
                 });
 
-                self.state.on('change:checked change:value', function (e) {
+			self.state.on('change:checked change:value', function(e) {
                     self.fire('change');
                     checked(e.value);
                 });
 
-                self.state.on('change:icon', function (e) {
+			self.state.on('change:icon', function(e) {
                     var icon = e.value, prefix = self.classPrefix;
 
                     if (typeof icon == 'undefined') {
@@ -33593,11 +33519,11 @@
                 return self._super();
             }
         });
-    });
+});
 
 // Included from: js/tinymce/classes/ui/ComboBox.js
 
-    /**
+/**
      * ComboBox.js
      *
      * Released under LGPL License.
@@ -33607,7 +33533,7 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This class creates a combobox control. Select box that you select a value from or
      * type a value into.
      *
@@ -33615,12 +33541,12 @@
      * @class tinymce.ui.ComboBox
      * @extends tinymce.ui.Widget
      */
-    define("tinymce/ui/ComboBox", [
+define("tinymce/ui/ComboBox", [
         "tinymce/ui/Widget",
         "tinymce/ui/Factory",
         "tinymce/ui/DomUtils",
         "tinymce/dom/DomQuery"
-    ], function (Widget, Factory, DomUtils, $) {
+], function(Widget, Factory, DomUtils, $) {
         "use strict";
 
         return Widget.extend({
@@ -33631,7 +33557,7 @@
              * @param {Object} settings Name/value object with settings.
              * @setting {String} placeholder Placeholder text to display.
              */
-            init: function (settings) {
+		init: function(settings) {
                 var self = this;
 
                 self._super(settings);
@@ -33647,7 +33573,7 @@
                     settings.icon = 'caret';
                 }
 
-                self.on('click', function (e) {
+			self.on('click', function(e) {
                     var elm = e.target, root = self.getEl();
 
                     if (!$.contains(root, elm) && elm != root) {
@@ -33672,9 +33598,9 @@
                 });
 
                 // TODO: Rework this
-                self.on('keydown', function (e) {
+			self.on('keydown', function(e) {
                     if (e.target.nodeName == "INPUT" && e.keyCode == 13) {
-                        self.parents().reverse().each(function (ctrl) {
+					self.parents().reverse().each(function(ctrl) {
                             var stateValue = self.state.get('value'), inputValue = self.getEl('inp').value;
 
                             e.preventDefault();
@@ -33693,14 +33619,14 @@
                     }
                 });
 
-                self.on('keyup', function (e) {
+			self.on('keyup', function(e) {
                     if (e.target.nodeName == "INPUT") {
                         self.state.set('value', e.target.value);
                     }
                 });
             },
 
-            showMenu: function () {
+		showMenu: function() {
                 var self = this, settings = self.settings, menu;
 
                 if (!self.menu) {
@@ -33719,23 +33645,23 @@
                     self.menu = Factory.create(menu).parent(self).renderTo(self.getContainerElm());
                     self.fire('createmenu');
                     self.menu.reflow();
-                    self.menu.on('cancel', function (e) {
+				self.menu.on('cancel', function(e) {
                         if (e.control === self.menu) {
                             self.focus();
                         }
                     });
 
-                    self.menu.on('show hide', function (e) {
-                        e.control.items().each(function (ctrl) {
+				self.menu.on('show hide', function(e) {
+					e.control.items().each(function(ctrl) {
                             ctrl.active(ctrl.value() == self.value());
                         });
                     }).fire('show');
 
-                    self.menu.on('select', function (e) {
+				self.menu.on('select', function(e) {
                         self.value(e.control.value());
                     });
 
-                    self.on('focusin', function (e) {
+				self.on('focusin', function(e) {
                         if (e.target.tagName.toUpperCase() == 'INPUT') {
                             self.menu.hide();
                         }
@@ -33754,7 +33680,7 @@
              *
              * @method focus
              */
-            focus: function () {
+		focus: function() {
                 this.getEl('inp').focus();
             },
 
@@ -33763,7 +33689,7 @@
              *
              * @method repaint
              */
-            repaint: function () {
+		repaint: function() {
                 var self = this, elm = self.getEl(), openElm = self.getEl('open'), rect = self.layoutRect();
                 var width, lineHeight;
 
@@ -33795,10 +33721,10 @@
              * @method postRender
              * @return {tinymce.ui.ComboBox} Current combobox instance.
              */
-            postRender: function () {
+		postRender: function() {
                 var self = this;
 
-                $(this.getEl('inp')).on('change', function (e) {
+			$(this.getEl('inp')).on('change', function(e) {
                     self.state.set('value', e.target.value);
                     self.fire('change', e);
                 });
@@ -33812,7 +33738,7 @@
              * @method renderHtml
              * @return {String} HTML representing the control.
              */
-            renderHtml: function () {
+		renderHtml: function() {
                 var self = this, id = self._id, settings = self.settings, prefix = self.classPrefix;
                 var value = self.state.get('value') || '';
                 var icon, text, openBtnHtml = '', extraAttrs = '';
@@ -33867,7 +33793,7 @@
                 );
             },
 
-            value: function (value) {
+		value: function(value) {
                 if (arguments.length) {
                     this.state.set('value', value);
                     return this;
@@ -33881,32 +33807,32 @@
                 return this.state.get('value');
             },
 
-            bindStates: function () {
+		bindStates: function() {
                 var self = this;
 
-                self.state.on('change:value', function (e) {
+			self.state.on('change:value', function(e) {
                     if (self.getEl('inp').value != e.value) {
                         self.getEl('inp').value = e.value;
                     }
                 });
 
-                self.state.on('change:disabled', function (e) {
+			self.state.on('change:disabled', function(e) {
                     self.getEl('inp').disabled = e.value;
                 });
 
                 return self._super();
             },
 
-            remove: function () {
+		remove: function() {
                 $(this.getEl('inp')).off();
                 this._super();
             }
         });
-    });
+});
 
 // Included from: js/tinymce/classes/ui/ColorBox.js
 
-    /**
+/**
      * ColorBox.js
      *
      * Released under LGPL License.
@@ -33916,7 +33842,7 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This widget lets you enter colors and browse for colors by pressing the color button. It also displays
      * a preview of the current color.
      *
@@ -33924,9 +33850,9 @@
      * @class tinymce.ui.ColorBox
      * @extends tinymce.ui.ComboBox
      */
-    define("tinymce/ui/ColorBox", [
+define("tinymce/ui/ColorBox", [
         "tinymce/ui/ComboBox"
-    ], function (ComboBox) {
+], function(ComboBox) {
         "use strict";
 
         return ComboBox.extend({
@@ -33936,7 +33862,7 @@
              * @constructor
              * @param {Object} settings Name/value object with settings.
              */
-            init: function (settings) {
+		init: function(settings) {
                 var self = this;
 
                 settings.spellcheck = false;
@@ -33948,12 +33874,12 @@
                 self._super(settings);
 
                 self.classes.add('colorbox');
-                self.on('change keyup postrender', function () {
+			self.on('change keyup postrender', function() {
                     self.repaintColor(self.value());
                 });
             },
 
-            repaintColor: function (value) {
+		repaintColor: function(value) {
                 var elm = this.getEl().getElementsByTagName('i')[0];
 
                 if (elm) {
@@ -33965,10 +33891,10 @@
                 }
             },
 
-            bindStates: function () {
+		bindStates: function() {
                 var self = this;
 
-                self.state.on('change:value', function (e) {
+			self.state.on('change:value', function(e) {
                     if (self._rendered) {
                         self.repaintColor(e.value);
                     }
@@ -33977,11 +33903,11 @@
                 return self._super();
             }
         });
-    });
+});
 
 // Included from: js/tinymce/classes/ui/PanelButton.js
 
-    /**
+/**
      * PanelButton.js
      *
      * Released under LGPL License.
@@ -33991,16 +33917,16 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * Creates a new panel button.
      *
      * @class tinymce.ui.PanelButton
      * @extends tinymce.ui.Button
      */
-    define("tinymce/ui/PanelButton", [
+define("tinymce/ui/PanelButton", [
         "tinymce/ui/Button",
         "tinymce/ui/FloatPanel"
-    ], function (Button, FloatPanel) {
+], function(Button, FloatPanel) {
         "use strict";
 
         return Button.extend({
@@ -34009,7 +33935,7 @@
              *
              * @method showPanel
              */
-            showPanel: function () {
+		showPanel: function() {
                 var self = this, settings = self.settings;
 
                 self.active(true);
@@ -34031,9 +33957,9 @@
                     panelSettings.autohide = true;
                     panelSettings.ariaRoot = true;
 
-                    self.panel = new FloatPanel(panelSettings).on('hide', function () {
+				self.panel = new FloatPanel(panelSettings).on('hide', function() {
                         self.active(false);
-                    }).on('cancel', function (e) {
+				}).on('cancel', function(e) {
                         e.stopPropagation();
                         self.focus();
                         self.hidePanel();
@@ -34053,7 +33979,7 @@
              *
              * @method hidePanel
              */
-            hidePanel: function () {
+		hidePanel: function() {
                 var self = this;
 
                 if (self.panel) {
@@ -34066,12 +33992,12 @@
              *
              * @method postRender
              */
-            postRender: function () {
+		postRender: function() {
                 var self = this;
 
                 self.aria('haspopup', true);
 
-                self.on('click', function (e) {
+			self.on('click', function(e) {
                     if (e.control === self) {
                         if (self.panel && self.panel.visible()) {
                             self.hidePanel();
@@ -34085,7 +34011,7 @@
                 return self._super();
             },
 
-            remove: function () {
+		remove: function() {
                 if (this.panel) {
                     this.panel.remove();
                     this.panel = null;
@@ -34094,11 +34020,11 @@
                 return this._super();
             }
         });
-    });
+});
 
 // Included from: js/tinymce/classes/ui/ColorButton.js
 
-    /**
+/**
      * ColorButton.js
      *
      * Released under LGPL License.
@@ -34108,7 +34034,7 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This class creates a color button control. This is a split button in which the main
      * button has a visual representation of the currently selected color. When clicked
      * the caret button displays a color picker, allowing the user to select a new color.
@@ -34117,10 +34043,10 @@
      * @class tinymce.ui.ColorButton
      * @extends tinymce.ui.PanelButton
      */
-    define("tinymce/ui/ColorButton", [
+define("tinymce/ui/ColorButton", [
         "tinymce/ui/PanelButton",
         "tinymce/dom/DOMUtils"
-    ], function (PanelButton, DomUtils) {
+], function(PanelButton, DomUtils) {
         "use strict";
 
         var DOM = DomUtils.DOM;
@@ -34132,7 +34058,7 @@
              * @constructor
              * @param {Object} settings Name/value object with settings.
              */
-            init: function (settings) {
+		init: function(settings) {
                 this._super(settings);
                 this.classes.add('colorbutton');
             },
@@ -34144,7 +34070,7 @@
              * @param {String} [color] Color to set.
              * @return {String|tinymce.ui.ColorButton} Current color or current instance.
              */
-            color: function (color) {
+		color: function(color) {
                 if (color) {
                     this._color = color;
                     this.getEl('preview').style.backgroundColor = color;
@@ -34160,7 +34086,7 @@
              * @method resetColor
              * @return {tinymce.ui.ColorButton} Current instance.
              */
-            resetColor: function () {
+		resetColor: function() {
                 this._color = null;
                 this.getEl('preview').style.backgroundColor = null;
                 return this;
@@ -34172,7 +34098,7 @@
              * @method renderHtml
              * @return {String} HTML representing the control.
              */
-            renderHtml: function () {
+		renderHtml: function() {
                 var self = this, id = self._id, prefix = self.classPrefix, text = self.state.get('text');
                 var icon = self.settings.icon ? prefix + 'ico ' + prefix + 'i-' + self.settings.icon : '';
                 var image = self.settings.image ? ' style="background-image: url(\'' + self.settings.image + '\')"' : '';
@@ -34196,10 +34122,10 @@
              *
              * @method postRender
              */
-            postRender: function () {
+		postRender: function() {
                 var self = this, onClickHandler = self.settings.onclick;
 
-                self.on('click', function (e) {
+			self.on('click', function(e) {
                     if (e.aria && e.aria.key == 'down') {
                         return;
                     }
@@ -34215,11 +34141,11 @@
                 return self._super();
             }
         });
-    });
+});
 
 // Included from: js/tinymce/classes/util/Color.js
 
-    /**
+/**
      * Color.js
      *
      * Released under LGPL License.
@@ -34229,7 +34155,7 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This class lets you parse/serialize colors and convert rgb/hsb.
      *
      * @class tinymce.util.Color
@@ -34239,7 +34165,7 @@
      *
      * console.log(white.toHex(), red.toHsv());
      */
-    define("tinymce/util/Color", [], function () {
+define("tinymce/util/Color", [], function() {
         var min = Math.min, max = Math.max, round = Math.round;
 
         /**
@@ -34453,11 +34379,11 @@
         }
 
         return Color;
-    });
+});
 
 // Included from: js/tinymce/classes/ui/ColorPicker.js
 
-    /**
+/**
      * ColorPicker.js
      *
      * Released under LGPL License.
@@ -34467,19 +34393,19 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * Color picker widget lets you select colors.
      *
      * @-x-less ColorPicker.less
      * @class tinymce.ui.ColorPicker
      * @extends tinymce.ui.Widget
      */
-    define("tinymce/ui/ColorPicker", [
+define("tinymce/ui/ColorPicker", [
         "tinymce/ui/Widget",
         "tinymce/ui/DragHelper",
         "tinymce/ui/DomUtils",
         "tinymce/util/Color"
-    ], function (Widget, DragHelper, DomUtils, Color) {
+], function(Widget, DragHelper, DomUtils, Color) {
         "use strict";
 
         return Widget.extend({
@@ -34494,11 +34420,11 @@
              * @param {Object} settings Name/value object with settings.
              * @setting {String} color Initial color value.
              */
-            init: function (settings) {
+		init: function(settings) {
                 this._super(settings);
             },
 
-            postRender: function () {
+		postRender: function() {
                 var self = this, color = self.color(), hsv, hueRootElm, huePointElm, svRootElm, svPointElm;
 
                 hueRootElm = self.getEl('h');
@@ -34560,7 +34486,7 @@
                     self.fire('change');
                 }
 
-                self._repaint = function () {
+			self._repaint = function() {
                     hsv = color.toHsv();
                     updateColor(hsv);
                 };
@@ -34580,11 +34506,11 @@
                 self._repaint();
             },
 
-            rgb: function () {
+		rgb: function() {
                 return this.color().toRgb();
             },
 
-            value: function (value) {
+		value: function(value) {
                 var self = this;
 
                 if (arguments.length) {
@@ -34598,7 +34524,7 @@
                 }
             },
 
-            color: function () {
+		color: function() {
                 if (!this._color) {
                     this._color = new Color();
                 }
@@ -34612,7 +34538,7 @@
              * @method renderHtml
              * @return {String} HTML representing the control.
              */
-            renderHtml: function () {
+		renderHtml: function() {
                 var self = this, id = self._id, prefix = self.classPrefix, hueHtml;
                 var stops = '#ff0000,#ff0080,#ff00ff,#8000ff,#0000ff,#0080ff,#00ffff,#00ff80,#00ff00,#80ff00,#ffff00,#ff8000,#ff0000';
 
@@ -34662,11 +34588,11 @@
                 );
             }
         });
-    });
+});
 
 // Included from: js/tinymce/classes/ui/Path.js
 
-    /**
+/**
      * Path.js
      *
      * Released under LGPL License.
@@ -34676,16 +34602,16 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * Creates a new path control.
      *
      * @-x-less Path.less
      * @class tinymce.ui.Path
      * @extends tinymce.ui.Widget
      */
-    define("tinymce/ui/Path", [
+define("tinymce/ui/Path", [
         "tinymce/ui/Widget"
-    ], function (Widget) {
+], function(Widget) {
         "use strict";
 
         return Widget.extend({
@@ -34696,7 +34622,7 @@
              * @param {Object} settings Name/value object with settings.
              * @setting {String} delimiter Delimiter to display between row in path.
              */
-            init: function (settings) {
+		init: function(settings) {
                 var self = this;
 
                 if (!settings.delimiter) {
@@ -34707,7 +34633,7 @@
                 self.classes.add('path');
                 self.canFocus = true;
 
-                self.on('click', function (e) {
+			self.on('click', function(e) {
                     var index, target = e.target;
 
                     if ((index = target.getAttribute('data-index'))) {
@@ -34724,7 +34650,7 @@
              * @method focus
              * @return {tinymce.ui.Control} Current control instance.
              */
-            focus: function () {
+		focus: function() {
                 var self = this;
 
                 self.getEl().firstChild.focus();
@@ -34738,7 +34664,7 @@
              * @method row
              * @param {Array} row Array with row name is rendered to path.
              */
-            row: function (row) {
+		row: function(row) {
                 if (!arguments.length) {
                     return this.state.get('row');
                 }
@@ -34754,7 +34680,7 @@
              * @method renderHtml
              * @return {String} HTML representing the control.
              */
-            renderHtml: function () {
+		renderHtml: function() {
                 var self = this;
 
                 return (
@@ -34764,17 +34690,17 @@
                 );
             },
 
-            bindStates: function () {
+		bindStates: function() {
                 var self = this;
 
-                self.state.on('change:row', function (e) {
+			self.state.on('change:row', function(e) {
                     self.innerHtml(self._getDataPathHtml(e.value));
                 });
 
                 return self._super();
             },
 
-            _getDataPathHtml: function (data) {
+		_getDataPathHtml: function(data) {
                 var self = this, parts = data || [], i, l, html = '', prefix = self.classPrefix;
 
                 for (i = 0, l = parts.length; i < l; i++) {
@@ -34792,11 +34718,11 @@
                 return html;
             }
         });
-    });
+});
 
 // Included from: js/tinymce/classes/ui/ElementPath.js
 
-    /**
+/**
      * ElementPath.js
      *
      * Released under LGPL License.
@@ -34806,16 +34732,16 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This control creates an path for the current selections parent elements in TinyMCE.
      *
      * @class tinymce.ui.ElementPath
      * @extends tinymce.ui.Path
      */
-    define("tinymce/ui/ElementPath", [
+define("tinymce/ui/ElementPath", [
         "tinymce/ui/Path",
         "tinymce/EditorManager"
-    ], function (Path, EditorManager) {
+], function(Path, EditorManager) {
         return Path.extend({
             /**
              * Post render method. Called after the control has been rendered to the target.
@@ -34823,7 +34749,7 @@
              * @method postRender
              * @return {tinymce.ui.ElementPath} Current combobox instance.
              */
-            postRender: function () {
+		postRender: function() {
                 var self = this, editor = EditorManager.activeEditor;
 
                 function isHidden(elm) {
@@ -34841,13 +34767,13 @@
                 }
 
                 if (editor.settings.elementpath !== false) {
-                    self.on('select', function (e) {
+				self.on('select', function(e) {
                         editor.focus();
                         editor.selection.select(this.row()[e.index].element);
                         editor.nodeChanged();
                     });
 
-                    editor.on('nodeChange', function (e) {
+				editor.on('nodeChange', function(e) {
                         var outParents = [], parents = e.parents, i = parents.length;
 
                         while (i--) {
@@ -34874,11 +34800,11 @@
                 return self._super();
             }
         });
-    });
+});
 
 // Included from: js/tinymce/classes/ui/FormItem.js
 
-    /**
+/**
      * FormItem.js
      *
      * Released under LGPL License.
@@ -34888,7 +34814,7 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This class is a container created by the form element with
      * a label and control item.
      *
@@ -34896,9 +34822,9 @@
      * @extends tinymce.ui.Container
      * @setting {String} label Label to display for the form item.
      */
-    define("tinymce/ui/FormItem", [
+define("tinymce/ui/FormItem", [
         "tinymce/ui/Container"
-    ], function (Container) {
+], function(Container) {
         "use strict";
 
         return Container.extend({
@@ -34916,7 +34842,7 @@
              * @method renderHtml
              * @return {String} HTML representing the control.
              */
-            renderHtml: function () {
+		renderHtml: function() {
                 var self = this, layout = self._layout, prefix = self.classPrefix;
 
                 self.classes.add('formitem');
@@ -34933,11 +34859,11 @@
                 );
             }
         });
-    });
+});
 
 // Included from: js/tinymce/classes/ui/Form.js
 
-    /**
+/**
      * Form.js
      *
      * Released under LGPL License.
@@ -34947,7 +34873,7 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This class creates a form container. A form container has the ability
      * to automatically wrap items in tinymce.ui.FormItem instances.
      *
@@ -34964,11 +34890,11 @@
      * @class tinymce.ui.Form
      * @extends tinymce.ui.Container
      */
-    define("tinymce/ui/Form", [
+define("tinymce/ui/Form", [
         "tinymce/ui/Container",
         "tinymce/ui/FormItem",
         "tinymce/util/Tools"
-    ], function (Container, FormItem, Tools) {
+], function(Container, FormItem, Tools) {
         "use strict";
 
         return Container.extend({
@@ -34982,7 +34908,7 @@
                 labelGap: 30,
                 spacing: 10,
                 callbacks: {
-                    submit: function () {
+				submit: function() {
                         this.submit();
                     }
                 }
@@ -34993,7 +34919,7 @@
              *
              * @method preRender
              */
-            preRender: function () {
+		preRender: function() {
                 var self = this, items = self.items();
 
                 if (!self.settings.formItemDefaults) {
@@ -35005,7 +34931,7 @@
                 }
 
                 // Wrap any labeled items in FormItems
-                items.each(function (ctrl) {
+			items.each(function(ctrl) {
                     var formItem, label = ctrl.settings.label;
 
                     if (label) {
@@ -35039,7 +34965,7 @@
              * @method submit
              * @return {Object} Event arguments object.
              */
-            submit: function () {
+		submit: function() {
                 return this.fire('submit', {data: this.toJSON()});
             },
 
@@ -35049,14 +34975,14 @@
              * @method postRender
              * @return {tinymce.ui.ComboBox} Current combobox instance.
              */
-            postRender: function () {
+		postRender: function() {
                 var self = this;
 
                 self._super();
                 self.fromJSON(self.settings.data);
             },
 
-            bindStates: function () {
+		bindStates: function() {
                 var self = this;
 
                 self._super();
@@ -35074,7 +35000,7 @@
                         items = self.items();
                     }
 
-                    items.filter('formitem').each(function (item) {
+				items.filter('formitem').each(function(item) {
                         var labelCtrl = item.items()[0], labelWidth = labelCtrl.getEl().clientWidth;
 
                         maxLabelWidth = labelWidth > maxLabelWidth ? labelWidth : maxLabelWidth;
@@ -35093,11 +35019,11 @@
                 recalcLabels();
             }
         });
-    });
+});
 
 // Included from: js/tinymce/classes/ui/FieldSet.js
 
-    /**
+/**
      * FieldSet.js
      *
      * Released under LGPL License.
@@ -35107,16 +35033,16 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This class creates fieldset containers.
      *
      * @-x-less FieldSet.less
      * @class tinymce.ui.FieldSet
      * @extends tinymce.ui.Form
      */
-    define("tinymce/ui/FieldSet", [
+define("tinymce/ui/FieldSet", [
         "tinymce/ui/Form"
-    ], function (Form) {
+], function(Form) {
         "use strict";
 
         return Form.extend({
@@ -35138,7 +35064,7 @@
              * @method renderHtml
              * @return {String} HTML representing the control.
              */
-            renderHtml: function () {
+		renderHtml: function() {
                 var self = this, layout = self._layout, prefix = self.classPrefix;
 
                 self.preRender();
@@ -35155,11 +35081,11 @@
                 );
             }
         });
-    });
+});
 
 // Included from: js/tinymce/classes/ui/FilePicker.js
 
-    /**
+/**
      * FilePicker.js
      *
      * Released under LGPL License.
@@ -35169,18 +35095,18 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /*global tinymce:true */
+/*global tinymce:true */
 
-    /**
+/**
      * This class creates a file picker control.
      *
      * @class tinymce.ui.FilePicker
      * @extends tinymce.ui.ComboBox
      */
-    define("tinymce/ui/FilePicker", [
+define("tinymce/ui/FilePicker", [
         "tinymce/ui/ComboBox",
         "tinymce/util/Tools"
-    ], function (ComboBox, Tools) {
+], function(ComboBox, Tools) {
         "use strict";
 
         return ComboBox.extend({
@@ -35190,7 +35116,7 @@
              * @constructor
              * @param {Object} settings Name/value object with settings.
              */
-            init: function (settings) {
+		init: function(settings) {
                 var self = this, editor = tinymce.activeEditor, editorSettings = editor.settings;
                 var actionCallback, fileBrowserCallback, fileBrowserCallbackTypes;
 
@@ -35204,7 +35130,7 @@
                 if (!fileBrowserCallbackTypes || fileBrowserCallbackTypes[settings.filetype]) {
                     fileBrowserCallback = editorSettings.file_picker_callback;
                     if (fileBrowserCallback && (!fileBrowserCallbackTypes || fileBrowserCallbackTypes[settings.filetype])) {
-                        actionCallback = function () {
+					actionCallback = function() {
                             var meta = self.fire('beforecall').meta;
 
                             meta = Tools.extend({filetype: settings.filetype}, meta);
@@ -35212,7 +35138,7 @@
                             // file_picker_callback(callback, currentValue, metaData)
                             fileBrowserCallback.call(
                                 editor,
-                                function (value, meta) {
+							function(value, meta) {
                                     self.value(value).fire('change', {meta: meta});
                                 },
                                 self.value(),
@@ -35223,7 +35149,7 @@
                         // Legacy callback: file_picker_callback(id, currentValue, filetype, window)
                         fileBrowserCallback = editorSettings.file_browser_callback;
                         if (fileBrowserCallback && (!fileBrowserCallbackTypes || fileBrowserCallbackTypes[settings.filetype])) {
-                            actionCallback = function () {
+						actionCallback = function() {
                                 fileBrowserCallback(
                                     self.getEl('inp').id,
                                     self.value(),
@@ -35243,11 +35169,11 @@
                 self._super(settings);
             }
         });
-    });
+});
 
 // Included from: js/tinymce/classes/ui/FitLayout.js
 
-    /**
+/**
      * FitLayout.js
      *
      * Released under LGPL License.
@@ -35257,7 +35183,7 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This layout manager will resize the control to be the size of it's parent container.
      * In other words width: 100% and height: 100%.
      *
@@ -35265,9 +35191,9 @@
      * @class tinymce.ui.FitLayout
      * @extends tinymce.ui.AbsoluteLayout
      */
-    define("tinymce/ui/FitLayout", [
+define("tinymce/ui/FitLayout", [
         "tinymce/ui/AbsoluteLayout"
-    ], function (AbsoluteLayout) {
+], function(AbsoluteLayout) {
         "use strict";
 
         return AbsoluteLayout.extend({
@@ -35277,10 +35203,10 @@
              * @method recalc
              * @param {tinymce.ui.Container} container Container instance to recalc.
              */
-            recalc: function (container) {
+		recalc: function(container) {
                 var contLayoutRect = container.layoutRect(), paddingBox = container.paddingBox;
 
-                container.items().filter(':visible').each(function (ctrl) {
+			container.items().filter(':visible').each(function(ctrl) {
                     ctrl.layoutRect({
                         x: paddingBox.left,
                         y: paddingBox.top,
@@ -35294,11 +35220,11 @@
                 });
             }
         });
-    });
+});
 
 // Included from: js/tinymce/classes/ui/FlexLayout.js
 
-    /**
+/**
      * FlexLayout.js
      *
      * Released under LGPL License.
@@ -35308,7 +35234,7 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This layout manager works similar to the CSS flex box.
      *
      * @setting {String} direction row|row-reverse|column|column-reverse
@@ -35319,9 +35245,9 @@
      * @class tinymce.ui.FlexLayout
      * @extends tinymce.ui.AbsoluteLayout
      */
-    define("tinymce/ui/FlexLayout", [
+define("tinymce/ui/FlexLayout", [
         "tinymce/ui/AbsoluteLayout"
-    ], function (AbsoluteLayout) {
+], function(AbsoluteLayout) {
         "use strict";
 
         return AbsoluteLayout.extend({
@@ -35331,7 +35257,7 @@
              * @method recalc
              * @param {tinymce.ui.Container} container Container instance to recalc.
              */
-            recalc: function (container) {
+		recalc: function(container) {
                 // A ton of variables, needs to be in the same scope for performance
                 var i, l, items, contLayoutRect, contPaddingBox, contSettings, align, pack, spacing, totalFlex, availableSpace, direction;
                 var ctrl, ctrlLayoutRect, ctrlSettings, flex, maxSizeItems = [], size, maxSize, ratio, rect, pos, maxAlignEndPos;
@@ -35543,11 +35469,11 @@
                 }
             }
         });
-    });
+});
 
 // Included from: js/tinymce/classes/ui/FlowLayout.js
 
-    /**
+/**
      * FlowLayout.js
      *
      * Released under LGPL License.
@@ -35557,16 +35483,16 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This layout manager will place the controls by using the browsers native layout.
      *
      * @-x-less FlowLayout.less
      * @class tinymce.ui.FlowLayout
      * @extends tinymce.ui.Layout
      */
-    define("tinymce/ui/FlowLayout", [
+define("tinymce/ui/FlowLayout", [
         "tinymce/ui/Layout"
-    ], function (Layout) {
+], function(Layout) {
         return Layout.extend({
             Defaults: {
                 containerClass: 'flow-layout',
@@ -35580,23 +35506,23 @@
              * @method recalc
              * @param {tinymce.ui.Container} container Container instance to recalc.
              */
-            recalc: function (container) {
-                container.items().filter(':visible').each(function (ctrl) {
+		recalc: function(container) {
+			container.items().filter(':visible').each(function(ctrl) {
                     if (ctrl.recalc) {
                         ctrl.recalc();
                     }
                 });
             },
 
-            isNative: function () {
+		isNative: function() {
                 return true;
             }
         });
-    });
+});
 
 // Included from: js/tinymce/classes/ui/FormatControls.js
 
-    /**
+/**
      * FormatControls.js
      *
      * Released under LGPL License.
@@ -35606,23 +35532,23 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * Internal class containing all TinyMCE specific control types such as
      * format listboxes, fontlist boxes, toolbar buttons etc.
      *
      * @class tinymce.ui.FormatControls
      */
-    define("tinymce/ui/FormatControls", [
+define("tinymce/ui/FormatControls", [
         "tinymce/ui/Control",
         "tinymce/ui/Widget",
         "tinymce/ui/FloatPanel",
         "tinymce/util/Tools",
         "tinymce/EditorManager",
         "tinymce/Env"
-    ], function (Control, Widget, FloatPanel, Tools, EditorManager, Env) {
+], function(Control, Widget, FloatPanel, Tools, EditorManager, Env) {
         var each = Tools.each;
 
-        EditorManager.on('AddEditor', function (e) {
+	EditorManager.on('AddEditor', function(e) {
             if (e.editor.rtl) {
                 Control.rtl = true;
             }
@@ -35630,7 +35556,7 @@
             registerControls(e.editor);
         });
 
-        Control.translate = function (text) {
+	Control.translate = function(text) {
             return EditorManager.translate(text);
         };
 
@@ -35640,15 +35566,15 @@
             var formatMenu;
 
             function createListBoxChangeHandler(items, formatName) {
-                return function () {
+			return function() {
                     var self = this;
 
-                    editor.on('nodeChange', function (e) {
+				editor.on('nodeChange', function(e) {
                         var formatter = editor.formatter;
                         var value = null;
 
-                        each(e.parents, function (node) {
-                            each(items, function (item) {
+					each(e.parents, function(node) {
+						each(items, function(item) {
                                 if (formatName) {
                                     if (formatter.matchNode(node, formatName, {value: item.value})) {
                                         value = item.value;
@@ -35685,34 +35611,20 @@
                 return formats;
             }
 
-            function createFormatMenu(menuFormats) {
+		function createFormatMenu() {
                 var count = 0, newFormats = [];
 
                 var defaultStyleFormats = [
-                    {
-                        title: 'Headings', items: [
+				{title: 'Headings', items: [
                         {title: 'Heading 1', format: 'h1'},
                         {title: 'Heading 2', format: 'h2'},
                         {title: 'Heading 3', format: 'h3'},
                         {title: 'Heading 4', format: 'h4'},
-                        {title: 'Heading 5', format: 'h5'}
-                    ]
-                    },
+					{title: 'Heading 5', format: 'h5'},
+					{title: 'Heading 6', format: 'h6'}
+				]},
 
-                    {
-                        title: 'Size', items: [
-                        {title: 'Tiny', format: 'profireader_article_text_size_tiny'},
-                        {title: 'Little', format: 'profireader_article_text_size_little'},
-                        {title: 'Small', format: 'profireader_article_text_size_small'},
-                        {title: 'Normal', format: 'profireader_article_text_size_normal'},
-                        {title: 'Big', format: 'profireader_article_text_size_big'},
-                        {title: 'Large', format: 'profireader_article_text_size_large'},
-                        {title: 'Huge', format: 'profireader_article_text_size_huge'}
-                    ]
-                    },
-
-                    {
-                        title: 'Script', items: [
+				{title: 'Inline', items: [
                         {title: 'Bold', icon: 'bold', format: 'bold'},
                         {title: 'Italic', icon: 'italic', format: 'italic'},
                         {title: 'Underline', icon: 'underline', format: 'underline'},
@@ -35720,26 +35632,21 @@
                         {title: 'Superscript', icon: 'superscript', format: 'superscript'},
                         {title: 'Subscript', icon: 'subscript', format: 'subscript'},
                         {title: 'Code', icon: 'code', format: 'code'}
-                    ]
-                    },
+				]},
 
-                    {
-                        title: 'Blocks', items: [
+				{title: 'Blocks', items: [
                         {title: 'Paragraph', format: 'p'},
                         {title: 'Blockquote', format: 'blockquote'},
                         {title: 'Div', format: 'div'},
                         {title: 'Pre', format: 'pre'}
-                    ]
-                    },
+				]},
 
-                    {
-                        title: 'Alignment', items: [
+				{title: 'Alignment', items: [
                         {title: 'Left', icon: 'alignleft', format: 'alignleft'},
                         {title: 'Center', icon: 'aligncenter', format: 'aligncenter'},
                         {title: 'Right', icon: 'alignright', format: 'alignright'},
                         {title: 'Justify', icon: 'alignjustify', format: 'alignjustify'}
-                    ]
-                    }
+				]}
                 ];
 
                 function createMenu(formats) {
@@ -35749,7 +35656,7 @@
                         return;
                     }
 
-                    each(formats, function (format) {
+				each(formats, function(format) {
                         var menuItem = {
                             text: format.title,
                             icon: format.icon
@@ -35778,12 +35685,6 @@
                 function createStylesMenu() {
                     var menu;
 
-                    if (menuFormats) {
-                        menu = createMenu(menuFormats);
-                    }
-
-                    else {
-
                         if (editor.settings.style_formats_merge) {
                             if (editor.settings.style_formats) {
                                 menu = createMenu(defaultStyleFormats.concat(editor.settings.style_formats));
@@ -35793,13 +35694,12 @@
                         } else {
                             menu = createMenu(editor.settings.style_formats || defaultStyleFormats);
                         }
-                    }
 
                     return menu;
                 }
 
-                editor.on('init', function () {
-                    each(newFormats, function (format) {
+			editor.on('init', function() {
+				each(newFormats, function(format) {
                         editor.formatter.register(format.name, format);
                     });
                 });
@@ -35807,22 +35707,22 @@
                 return {
                     type: 'menu',
                     items: createStylesMenu(),
-                    onPostRender: function (e) {
+				onPostRender: function(e) {
                         editor.fire('renderFormatsMenu', {control: e.control});
                     },
                     itemDefaults: {
                         preview: true,
 
-                        textStyle: function () {
+					textStyle: function() {
                             if (this.settings.format) {
                                 return editor.formatter.getCssText(this.settings.format);
                             }
                         },
 
-                        onPostRender: function () {
+					onPostRender: function() {
                             var self = this;
 
-                            self.parent().on('show', function () {
+						self.parent().on('show', function() {
                                 var formatName, command;
 
                                 formatName = self.settings.format;
@@ -35838,7 +35738,7 @@
                             });
                         },
 
-                        onclick: function () {
+					onclick: function() {
                             if (this.settings.format) {
                                 toggleFormat(this.settings.format);
                             }
@@ -35858,12 +35758,12 @@
 
                 // TODO: Fix this
                 if (editor.formatter) {
-                    editor.formatter.formatChanged(name, function (state) {
+				editor.formatter.formatChanged(name, function(state) {
                         self.active(state);
                     });
                 } else {
-                    editor.on('init', function () {
-                        editor.formatter.formatChanged(name, function (state) {
+				editor.on('init', function() {
+					editor.formatter.formatChanged(name, function(state) {
                             self.active(state);
                         });
                     });
@@ -35878,13 +35778,13 @@
                 strikethrough: 'Strikethrough',
                 subscript: 'Subscript',
                 superscript: 'Superscript'
-            }, function (text, name) {
+		}, function(text, name) {
                 editor.addButton(name, {
                     tooltip: text,
-                    onPostRender: function () {
+				onPostRender: function() {
                         initOnPostRender();
                     },
-                    onclick: function () {
+				onclick: function() {
                         toggleFormat(name);
                     }
                 });
@@ -35902,7 +35802,7 @@
                 removeformat: ['Clear formatting', 'RemoveFormat'],
                 visualaid: ['Visual aids', 'mceToggleVisualAid'],
                 newdocument: ['New document', 'mceNewDocument']
-            }, function (item, name) {
+		}, function(item, name) {
                 editor.addButton(name, {
                     tooltip: item[0],
                     cmd: item[1]
@@ -35921,18 +35821,18 @@
                 alignright: ['Align right', 'JustifyRight'],
                 alignjustify: ['Justify', 'JustifyFull'],
                 alignnone: ['No alignment', 'JustifyNone']
-            }, function (item, name) {
+		}, function(item, name) {
                 editor.addButton(name, {
                     tooltip: item[0],
                     cmd: item[1],
-                    onPostRender: function () {
+				onPostRender: function() {
                         initOnPostRender();
                     }
                 });
             });
 
             function toggleUndoRedoState(type) {
-                return function () {
+			return function() {
                     var self = this;
 
                     type = type == 'redo' ? 'hasRedo' : 'hasUndo';
@@ -35942,7 +35842,7 @@
                     }
 
                     self.disabled(!checkState());
-                    editor.on('Undo Redo AddUndo TypingUndo ClearUndos', function () {
+				editor.on('Undo Redo AddUndo TypingUndo ClearUndos', function() {
                         self.disabled(!checkState());
                     });
                 };
@@ -35951,7 +35851,7 @@
             function toggleVisualAidState() {
                 var self = this;
 
-                editor.on('VisualAid', function (e) {
+			editor.on('VisualAid', function(e) {
                     self.active(e.hasVisual);
                 });
 
@@ -36017,7 +35917,7 @@
                 subscript: ['Subscript', 'Subscript'],
                 superscript: ['Superscript', 'Superscript'],
                 removeformat: ['Clear formatting', 'RemoveFormat']
-            }, function (item, name) {
+		}, function(item, name) {
                 editor.addMenuItem(name, {
                     text: item[0],
                     icon: name,
@@ -36026,7 +35926,7 @@
                 });
             });
 
-            editor.on('mousedown', function () {
+		editor.on('mousedown', function() {
                 FloatPanel.hideAll();
             });
 
@@ -36040,40 +35940,13 @@
                 }
             }
 
-
             editor.addButton('styleselect', {
                 type: 'menubutton',
                 text: 'Formats',
                 menu: formatMenu
             });
 
-            if (editor.settings['pr_formats']) {
-                $.each(editor.settings['pr_formats'], function (button_name, menu) {
-
-                    if (menu.length === 1) {
-                        var custom_menu = createFormatMenu(menu[0]['items']);
-                        custom_menu = custom_menu;
-                    }
-                    else {
-                        var custom_menu = createFormatMenu(menu);
-                    }
-
-                    editor.addButton(button_name, {
-                        type: 'menubutton',
-                        text: button_name,
-                        menu: custom_menu
-                    });
-                });
-
-            }
-
-            //
-            //debugger;
-            //$.each(editor.settings['pr_formats'], function (button_name, menu) {
-            //
-            //});
-
-            editor.addButton('formatselect', function () {
+		editor.addButton('formatselect', function() {
                 var items = [], blocks = createFormats(editor.settings.block_formats ||
                     'Paragraph=p;' +
                     'Heading 1=h1;' +
@@ -36085,11 +35958,11 @@
                     'Preformatted=pre'
                 );
 
-                each(blocks, function (block) {
+			each(blocks, function(block) {
                     items.push({
                         text: block[0],
                         value: block[1],
-                        textStyle: function () {
+					textStyle: function() {
                             return editor.formatter.getCssText(block[1]);
                         }
                     });
@@ -36105,7 +35978,7 @@
                 };
             });
 
-            editor.addButton('fontselect', function () {
+		editor.addButton('fontselect', function() {
                 var defaultFontsFormats =
                     'Andale Mono=andale mono,monospace;' +
                     'Arial=arial,helvetica,sans-serif;' +
@@ -36127,7 +36000,7 @@
 
                 var items = [], fonts = createFormats(editor.settings.font_formats || defaultFontsFormats);
 
-                each(fonts, function (font) {
+			each(fonts, function(font) {
                     items.push({
                         text: {raw: font[0]},
                         value: font[1],
@@ -36142,7 +36015,7 @@
                     values: items,
                     fixedWidth: true,
                     onPostRender: createListBoxChangeHandler(items, 'fontname'),
-                    onselect: function (e) {
+				onselect: function(e) {
                         if (e.control.settings.value) {
                             editor.execCommand('FontName', false, e.control.settings.value);
                         }
@@ -36150,11 +36023,11 @@
                 };
             });
 
-            editor.addButton('fontsizeselect', function () {
+		editor.addButton('fontsizeselect', function() {
                 var items = [], defaultFontsizeFormats = '8pt 10pt 12pt 14pt 18pt 24pt 36pt';
                 var fontsize_formats = editor.settings.fontsize_formats || defaultFontsizeFormats;
 
-                each(fontsize_formats.split(' '), function (item) {
+			each(fontsize_formats.split(' '), function(item) {
                     var text = item, value = item;
                     // Allow text=value font sizes.
                     var values = item.split('=');
@@ -36172,7 +36045,7 @@
                     values: items,
                     fixedWidth: true,
                     onPostRender: createListBoxChangeHandler(items, 'fontsize'),
-                    onclick: function (e) {
+				onclick: function(e) {
                         if (e.control.settings.value) {
                             editor.execCommand('FontSize', false, e.control.settings.value);
                         }
@@ -36185,11 +36058,11 @@
                 menu: formatMenu
             });
         }
-    });
+});
 
 // Included from: js/tinymce/classes/ui/GridLayout.js
 
-    /**
+/**
      * GridLayout.js
      *
      * Released under LGPL License.
@@ -36199,7 +36072,7 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This layout manager places controls in a grid.
      *
      * @setting {Number} spacing Spacing between controls.
@@ -36213,9 +36086,9 @@
      * @class tinymce.ui.GridLayout
      * @extends tinymce.ui.AbsoluteLayout
      */
-    define("tinymce/ui/GridLayout", [
+define("tinymce/ui/GridLayout", [
         "tinymce/ui/AbsoluteLayout"
-    ], function (AbsoluteLayout) {
+], function(AbsoluteLayout) {
         "use strict";
 
         return AbsoluteLayout.extend({
@@ -36225,7 +36098,7 @@
              * @method recalc
              * @param {tinymce.ui.Container} container Container instance to recalc.
              */
-            recalc: function (container) {
+		recalc: function(container) {
                 var settings = container.settings, rows, cols, items, contLayoutRect, width, height, rect,
                     ctrlLayoutRect, ctrl, x, y, posX, posY, ctrlSettings, contPaddingBox, align, spacingH, spacingV, alignH, alignV, maxX, maxY,
                     colWidths = [], rowHeights = [], ctrlMinWidth, ctrlMinHeight, availableWidth, availableHeight, reverseRows, idx;
@@ -36421,11 +36294,11 @@
                 }
             }
         });
-    });
+});
 
 // Included from: js/tinymce/classes/ui/Iframe.js
 
-    /**
+/**
      * Iframe.js
      *
      * Released under LGPL License.
@@ -36435,9 +36308,9 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /*jshint scripturl:true */
+/*jshint scripturl:true */
 
-    /**
+/**
      * This class creates an iframe.
      *
      * @setting {String} url Url to open in the iframe.
@@ -36446,9 +36319,9 @@
      * @class tinymce.ui.Iframe
      * @extends tinymce.ui.Widget
      */
-    define("tinymce/ui/Iframe", [
+define("tinymce/ui/Iframe", [
         "tinymce/ui/Widget"
-    ], function (Widget) {
+], function(Widget) {
         "use strict";
 
         return Widget.extend({
@@ -36458,7 +36331,7 @@
              * @method renderHtml
              * @return {String} HTML representing the control.
              */
-            renderHtml: function () {
+		renderHtml: function() {
                 var self = this;
 
                 self.classes.add('iframe');
@@ -36477,7 +36350,7 @@
              * @method src
              * @param {String} src Source URL for iframe.
              */
-            src: function (src) {
+		src: function(src) {
                 this.getEl().src = src;
             },
 
@@ -36489,12 +36362,12 @@
              * @param {function} callback Optional callback to execute when the iframe body is filled with contents.
              * @return {tinymce.ui.Iframe} Current iframe control.
              */
-            html: function (html, callback) {
+		html: function(html, callback) {
                 var self = this, body = this.getEl().contentWindow.document.body;
 
                 // Wait for iframe to initialize IE 10 takes time
                 if (!body) {
-                    setTimeout(function () {
+				setTimeout(function() {
                         self.html(html);
                     }, 0);
                 } else {
@@ -36508,11 +36381,11 @@
                 return this;
             }
         });
-    });
+});
 
 // Included from: js/tinymce/classes/ui/Label.js
 
-    /**
+/**
      * Label.js
      *
      * Released under LGPL License.
@@ -36522,7 +36395,7 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This class creates a label element. A label is a simple text control
      * that can be bound to other controls.
      *
@@ -36530,10 +36403,10 @@
      * @class tinymce.ui.Label
      * @extends tinymce.ui.Widget
      */
-    define("tinymce/ui/Label", [
+define("tinymce/ui/Label", [
         "tinymce/ui/Widget",
         "tinymce/ui/DomUtils"
-    ], function (Widget, DomUtils) {
+], function(Widget, DomUtils) {
         "use strict";
 
         return Widget.extend({
@@ -36544,7 +36417,7 @@
              * @param {Object} settings Name/value object with settings.
              * @param {Boolean} multiline Multiline label.
              */
-            init: function (settings) {
+		init: function(settings) {
                 var self = this;
 
                 self._super(settings);
@@ -36568,7 +36441,7 @@
              * @method initLayoutRect
              * @return {Object} Layout rect instance.
              */
-            initLayoutRect: function () {
+		initLayoutRect: function() {
                 var self = this, layoutRect = self._super();
 
                 if (self.settings.multiline) {
@@ -36592,7 +36465,7 @@
              *
              * @method repaint
              */
-            repaint: function () {
+		repaint: function() {
                 var self = this;
 
                 if (!self.settings.multiline) {
@@ -36608,7 +36481,7 @@
              * @method renderHtml
              * @return {String} HTML representing the control.
              */
-            renderHtml: function () {
+		renderHtml: function() {
                 var self = this, forId = self.settings.forId;
 
                 return (
@@ -36618,21 +36491,21 @@
                 );
             },
 
-            bindStates: function () {
+		bindStates: function() {
                 var self = this;
 
-                self.state.on('change:text', function (e) {
+			self.state.on('change:text', function(e) {
                     self.innerHtml(self.encode(e.value));
                 });
 
                 return self._super();
             }
         });
-    });
+});
 
 // Included from: js/tinymce/classes/ui/Toolbar.js
 
-    /**
+/**
      * Toolbar.js
      *
      * Released under LGPL License.
@@ -36642,15 +36515,15 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * Creates a new toolbar.
      *
      * @class tinymce.ui.Toolbar
      * @extends tinymce.ui.Container
      */
-    define("tinymce/ui/Toolbar", [
+define("tinymce/ui/Toolbar", [
         "tinymce/ui/Container"
-    ], function (Container) {
+], function(Container) {
         "use strict";
 
         return Container.extend({
@@ -36665,7 +36538,7 @@
              * @constructor
              * @param {Object} settings Name/value object with settings.
              */
-            init: function (settings) {
+		init: function(settings) {
                 var self = this;
 
                 self._super(settings);
@@ -36677,21 +36550,21 @@
              *
              * @method postRender
              */
-            postRender: function () {
+		postRender: function() {
                 var self = this;
 
-                self.items().each(function (ctrl) {
+			self.items().each(function(ctrl) {
                     ctrl.classes.add('toolbar-item');
                 });
 
                 return self._super();
             }
         });
-    });
+});
 
 // Included from: js/tinymce/classes/ui/MenuBar.js
 
-    /**
+/**
      * MenuBar.js
      *
      * Released under LGPL License.
@@ -36701,16 +36574,16 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * Creates a new menubar.
      *
      * @-x-less MenuBar.less
      * @class tinymce.ui.MenuBar
      * @extends tinymce.ui.Container
      */
-    define("tinymce/ui/MenuBar", [
+define("tinymce/ui/MenuBar", [
         "tinymce/ui/Toolbar"
-    ], function (Toolbar) {
+], function(Toolbar) {
         "use strict";
 
         return Toolbar.extend({
@@ -36723,11 +36596,11 @@
                 }
             }
         });
-    });
+});
 
 // Included from: js/tinymce/classes/ui/MenuButton.js
 
-    /**
+/**
      * MenuButton.js
      *
      * Released under LGPL License.
@@ -36737,18 +36610,18 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * Creates a new menu button.
      *
      * @-x-less MenuButton.less
      * @class tinymce.ui.MenuButton
      * @extends tinymce.ui.Button
      */
-    define("tinymce/ui/MenuButton", [
+define("tinymce/ui/MenuButton", [
         "tinymce/ui/Button",
         "tinymce/ui/Factory",
         "tinymce/ui/MenuBar"
-    ], function (Button, Factory, MenuBar) {
+], function(Button, Factory, MenuBar) {
         "use strict";
 
         // TODO: Maybe add as some global function
@@ -36771,7 +36644,7 @@
              * @constructor
              * @param {Object} settings Name/value object with settings.
              */
-            init: function (settings) {
+		init: function(settings) {
                 var self = this;
 
                 self._renderOpen = true;
@@ -36795,7 +36668,7 @@
              *
              * @method showMenu
              */
-            showMenu: function () {
+		showMenu: function() {
                 var self = this, menu;
 
                 if (self.menu && self.menu.visible()) {
@@ -36823,7 +36696,7 @@
 
                     self.fire('createmenu');
                     self.menu.reflow();
-                    self.menu.on('cancel', function (e) {
+				self.menu.on('cancel', function(e) {
                         if (e.control.parent() === self.menu) {
                             e.stopPropagation();
                             self.focus();
@@ -36832,11 +36705,11 @@
                     });
 
                     // Move focus to button when a menu item is selected/clicked
-                    self.menu.on('select', function () {
+				self.menu.on('select', function() {
                         self.focus();
                     });
 
-                    self.menu.on('show hide', function (e) {
+				self.menu.on('show hide', function(e) {
                         if (e.control == self.menu) {
                             self.activeMenu(e.type == 'show');
                         }
@@ -36855,11 +36728,11 @@
              *
              * @method hideMenu
              */
-            hideMenu: function () {
+		hideMenu: function() {
                 var self = this;
 
                 if (self.menu) {
-                    self.menu.items().each(function (item) {
+				self.menu.items().each(function(item) {
                         if (item.hideMenu) {
                             item.hideMenu();
                         }
@@ -36874,7 +36747,7 @@
              *
              * @private
              */
-            activeMenu: function (state) {
+		activeMenu: function(state) {
                 this.classes.toggle('active', state);
             },
 
@@ -36884,7 +36757,7 @@
              * @method renderHtml
              * @return {String} HTML representing the control.
              */
-            renderHtml: function () {
+		renderHtml: function() {
                 var self = this, id = self._id, prefix = self.classPrefix;
                 var icon = self.settings.icon, image, text = self.state.get('text');
 
@@ -36922,10 +36795,10 @@
              *
              * @method postRender
              */
-            postRender: function () {
+		postRender: function() {
                 var self = this;
 
-                self.on('click', function (e) {
+			self.on('click', function(e) {
                     if (e.control === self && isChildOf(e.target, self.getEl())) {
                         self.showMenu();
 
@@ -36935,11 +36808,11 @@
                     }
                 });
 
-                self.on('mouseenter', function (e) {
+			self.on('mouseenter', function(e) {
                     var overCtrl = e.control, parent = self.parent(), hasVisibleSiblingMenu;
 
                     if (overCtrl && parent && overCtrl instanceof MenuButton && overCtrl.parent() == parent) {
-                        parent.items().filter('MenuButton').each(function (ctrl) {
+					parent.items().filter('MenuButton').each(function(ctrl) {
                             if (ctrl.hideMenu && ctrl != overCtrl) {
                                 if (ctrl.menu && ctrl.menu.visible()) {
                                     hasVisibleSiblingMenu = true;
@@ -36959,10 +36832,10 @@
                 return self._super();
             },
 
-            bindStates: function () {
+		bindStates: function() {
                 var self = this;
 
-                self.state.on('change:menu', function () {
+			self.state.on('change:menu', function() {
                     if (self.menu) {
                         self.menu.remove();
                     }
@@ -36978,7 +36851,7 @@
              *
              * @method remove
              */
-            remove: function () {
+		remove: function() {
                 this._super();
 
                 if (this.menu) {
@@ -36988,11 +36861,11 @@
         });
 
         return MenuButton;
-    });
+});
 
 // Included from: js/tinymce/classes/ui/MenuItem.js
 
-    /**
+/**
      * MenuItem.js
      *
      * Released under LGPL License.
@@ -37002,18 +36875,18 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * Creates a new menu item.
      *
      * @-x-less MenuItem.less
      * @class tinymce.ui.MenuItem
      * @extends tinymce.ui.Control
      */
-    define("tinymce/ui/MenuItem", [
+define("tinymce/ui/MenuItem", [
         "tinymce/ui/Widget",
         "tinymce/ui/Factory",
         "tinymce/Env"
-    ], function (Widget, Factory, Env) {
+], function(Widget, Factory, Env) {
         "use strict";
 
         return Widget.extend({
@@ -37031,7 +36904,7 @@
              * @setting {Array} menu Submenu array with items.
              * @setting {String} shortcut Shortcut to display for menu item. Example: Ctrl+X
              */
-            init: function (settings) {
+		init: function(settings) {
                 var self = this, text;
 
                 self._super(settings);
@@ -37065,7 +36938,7 @@
                     self.classes.add('menu-item-normal');
                 }
 
-                self.on('mousedown', function (e) {
+			self.on('mousedown', function(e) {
                     e.preventDefault();
                 });
 
@@ -37080,7 +36953,7 @@
              * @method hasMenus
              * @return {Boolean} True/false state if it has submenu.
              */
-            hasMenus: function () {
+		hasMenus: function() {
                 return !!this.settings.menu;
             },
 
@@ -37089,10 +36962,10 @@
              *
              * @method showMenu
              */
-            showMenu: function () {
+		showMenu: function() {
                 var self = this, settings = self.settings, menu, parent = self.parent();
 
-                parent.items().each(function (ctrl) {
+			parent.items().each(function(ctrl) {
                     if (ctrl !== self) {
                         ctrl.hideMenu();
                     }
@@ -37120,18 +36993,18 @@
 
                         menu = self.menu = Factory.create(menu).parent(self).renderTo();
                         menu.reflow();
-                        menu.on('cancel', function (e) {
+					menu.on('cancel', function(e) {
                             e.stopPropagation();
                             self.focus();
                             menu.hide();
                         });
-                        menu.on('show hide', function (e) {
-                            e.control.items().each(function (ctrl) {
+					menu.on('show hide', function(e) {
+						e.control.items().each(function(ctrl) {
                                 ctrl.active(ctrl.settings.selected);
                             });
                         }).fire('show');
 
-                        menu.on('hide', function (e) {
+					menu.on('hide', function(e) {
                             if (e.control === menu) {
                                 self.classes.remove('selected');
                             }
@@ -37168,11 +37041,11 @@
              *
              * @method hideMenu
              */
-            hideMenu: function () {
+		hideMenu: function() {
                 var self = this;
 
                 if (self.menu) {
-                    self.menu.items().each(function (item) {
+				self.menu.items().each(function(item) {
                         if (item.hideMenu) {
                             item.hideMenu();
                         }
@@ -37191,7 +37064,7 @@
              * @method renderHtml
              * @return {String} HTML representing the control.
              */
-            renderHtml: function () {
+		renderHtml: function() {
                 var self = this, id = self._id, settings = self.settings, prefix = self.classPrefix, text = self.encode(self.state.get('text'));
                 var icon = self.settings.icon, image = '', shortcut = settings.shortcut;
 
@@ -37255,7 +37128,7 @@
              *
              * @method postRender
              */
-            postRender: function () {
+		postRender: function() {
                 var self = this, settings = self.settings;
 
                 var textStyle = settings.textStyle;
@@ -37270,7 +37143,7 @@
                     }
                 }
 
-                self.on('mouseenter click', function (e) {
+			self.on('mouseenter click', function(e) {
                     if (e.control === self) {
                         if (!settings.menu && e.type === 'click') {
                             self.fire('select');
@@ -37290,7 +37163,7 @@
                 return self;
             },
 
-            active: function (state) {
+		active: function(state) {
                 if (typeof state != "undefined") {
                     this.aria('checked', state);
                 }
@@ -37303,7 +37176,7 @@
              *
              * @method remove
              */
-            remove: function () {
+		remove: function() {
                 this._super();
 
                 if (this.menu) {
@@ -37311,11 +37184,11 @@
                 }
             }
         });
-    });
+});
 
 // Included from: js/tinymce/classes/ui/Menu.js
 
-    /**
+/**
      * Menu.js
      *
      * Released under LGPL License.
@@ -37325,18 +37198,18 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * Creates a new menu.
      *
      * @-x-less Menu.less
      * @class tinymce.ui.Menu
      * @extends tinymce.ui.FloatPanel
      */
-    define("tinymce/ui/Menu", [
+define("tinymce/ui/Menu", [
         "tinymce/ui/FloatPanel",
         "tinymce/ui/MenuItem",
         "tinymce/util/Tools"
-    ], function (FloatPanel, MenuItem, Tools) {
+], function(FloatPanel, MenuItem, Tools) {
         "use strict";
 
         var Menu = FloatPanel.extend({
@@ -37355,7 +37228,7 @@
              * @constructor
              * @param {Object} settings Name/value object with settings.
              */
-            init: function (settings) {
+		init: function(settings) {
                 var self = this;
 
                 settings.autohide = true;
@@ -37378,7 +37251,7 @@
              *
              * @method repaint
              */
-            repaint: function () {
+		repaint: function() {
                 this.classes.toggle('menu-align', true);
 
                 this._super();
@@ -37394,7 +37267,7 @@
              *
              * @method cancel
              */
-            cancel: function () {
+		cancel: function() {
                 var self = this;
 
                 self.hideAll();
@@ -37406,7 +37279,7 @@
              *
              * @method hideAll
              */
-            hideAll: function () {
+		hideAll: function() {
                 var self = this;
 
                 this.find('menuitem').exec('hideMenu');
@@ -37419,10 +37292,10 @@
              *
              * @method preRender
              */
-            preRender: function () {
+		preRender: function() {
                 var self = this;
 
-                self.items().each(function (ctrl) {
+			self.items().each(function(ctrl) {
                     var settings = ctrl.settings;
 
                     if (settings.icon || settings.image || settings.selectable) {
@@ -37436,11 +37309,11 @@
         });
 
         return Menu;
-    });
+});
 
 // Included from: js/tinymce/classes/ui/ListBox.js
 
-    /**
+/**
      * ListBox.js
      *
      * Released under LGPL License.
@@ -37450,17 +37323,17 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * Creates a new list box control.
      *
      * @-x-less ListBox.less
      * @class tinymce.ui.ListBox
      * @extends tinymce.ui.MenuButton
      */
-    define("tinymce/ui/ListBox", [
+define("tinymce/ui/ListBox", [
         "tinymce/ui/MenuButton",
         "tinymce/ui/Menu"
-    ], function (MenuButton, Menu) {
+], function(MenuButton, Menu) {
         "use strict";
 
         return MenuButton.extend({
@@ -37471,7 +37344,7 @@
              * @param {Object} settings Name/value object with settings.
              * @setting {Array} values Array with values to add to list box.
              */
-            init: function (settings) {
+		init: function(settings) {
                 var self = this, values, selected, selectedText, lastItemCtrl;
 
                 function setSelected(menuValues) {
@@ -37516,7 +37389,7 @@
 
                 self.classes.add('listbox');
 
-                self.on('select', function (e) {
+			self.on('select', function(e) {
                     var ctrl = e.control;
 
                     if (lastItemCtrl) {
@@ -37540,12 +37413,12 @@
              * @param {String} [value] Value to be set.
              * @return {Boolean/tinymce.ui.ListBox} Value or self if it's a set operation.
              */
-            bindStates: function () {
+		bindStates: function() {
                 var self = this;
 
                 function activateMenuItemsByValue(menu, value) {
                     if (menu instanceof Menu) {
-                        menu.items().each(function (ctrl) {
+					menu.items().each(function(ctrl) {
                             if (!ctrl.hasMenus()) {
                                 ctrl.active(ctrl.value() === value);
                             }
@@ -37574,11 +37447,11 @@
                     }
                 }
 
-                self.on('show', function (e) {
+			self.on('show', function(e) {
                     activateMenuItemsByValue(e.control, self.value());
                 });
 
-                self.state.on('change:value', function (e) {
+			self.state.on('change:value', function(e) {
                     var selectedItem = getSelectedItem(self.state.get('menu'), e.value);
 
                     if (selectedItem) {
@@ -37591,11 +37464,11 @@
                 return self._super();
             }
         });
-    });
+});
 
 // Included from: js/tinymce/classes/ui/Radio.js
 
-    /**
+/**
      * Radio.js
      *
      * Released under LGPL License.
@@ -37605,16 +37478,16 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * Creates a new radio button.
      *
      * @-x-less Radio.less
      * @class tinymce.ui.Radio
      * @extends tinymce.ui.Checkbox
      */
-    define("tinymce/ui/Radio", [
+define("tinymce/ui/Radio", [
         "tinymce/ui/Checkbox"
-    ], function (Checkbox) {
+], function(Checkbox) {
         "use strict";
 
         return Checkbox.extend({
@@ -37623,11 +37496,11 @@
                 role: "radio"
             }
         });
-    });
+});
 
 // Included from: js/tinymce/classes/ui/Rect.js
 
-    /**
+/**
      * Rect.js
      *
      * Released under LGPL License.
@@ -37637,12 +37510,13 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * Contains various tools for rect/position calculation.
      *
      * @class tinymce.ui.Rect
      */
-    define("tinymce/ui/Rect", [], function () {
+define("tinymce/ui/Rect", [
+], function() {
         "use strict";
 
         var min = Math.min, max = Math.max, round = Math.round;
@@ -37815,11 +37689,11 @@
             intersect: intersect,
             clamp: clamp
         };
-    });
+});
 
 // Included from: js/tinymce/classes/ui/ResizeHandle.js
 
-    /**
+/**
      * ResizeHandle.js
      *
      * Released under LGPL License.
@@ -37829,17 +37703,17 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * Renders a resize handle that fires ResizeStart, Resize and ResizeEnd events.
      *
      * @-x-less ResizeHandle.less
      * @class tinymce.ui.ResizeHandle
      * @extends tinymce.ui.Widget
      */
-    define("tinymce/ui/ResizeHandle", [
+define("tinymce/ui/ResizeHandle", [
         "tinymce/ui/Widget",
         "tinymce/ui/DragHelper"
-    ], function (Widget, DragHelper) {
+], function(Widget, DragHelper) {
         "use strict";
 
         return Widget.extend({
@@ -37849,7 +37723,7 @@
              * @method renderHtml
              * @return {String} HTML representing the control.
              */
-            renderHtml: function () {
+		renderHtml: function() {
                 var self = this, prefix = self.classPrefix;
 
                 self.classes.add('resizehandle');
@@ -37872,17 +37746,17 @@
              *
              * @method postRender
              */
-            postRender: function () {
+		postRender: function() {
                 var self = this;
 
                 self._super();
 
                 self.resizeDragHelper = new DragHelper(this._id, {
-                    start: function () {
+				start: function() {
                         self.fire('ResizeStart');
                     },
 
-                    drag: function (e) {
+				drag: function(e) {
                         if (self.settings.direction != "both") {
                             e.deltaX = 0;
                         }
@@ -37890,13 +37764,13 @@
                         self.fire('Resize', e);
                     },
 
-                    stop: function () {
+				stop: function() {
                         self.fire('ResizeEnd');
                     }
                 });
             },
 
-            remove: function () {
+		remove: function() {
                 if (this.resizeDragHelper) {
                     this.resizeDragHelper.destroy();
                 }
@@ -37904,11 +37778,11 @@
                 return this._super();
             }
         });
-    });
+});
 
 // Included from: js/tinymce/classes/ui/Slider.js
 
-    /**
+/**
      * Slider.js
      *
      * Released under LGPL License.
@@ -37918,18 +37792,18 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * Slider control.
      *
      * @-x-less Slider.less
      * @class tinymce.ui.Slider
      * @extends tinymce.ui.Widget
      */
-    define("tinymce/ui/Slider", [
+define("tinymce/ui/Slider", [
         "tinymce/ui/Widget",
         "tinymce/ui/DragHelper",
         "tinymce/ui/DomUtils"
-    ], function (Widget, DragHelper, DomUtils) {
+], function(Widget, DragHelper, DomUtils) {
         "use strict";
 
         function constrain(value, minVal, maxVal) {
@@ -37965,11 +37839,11 @@
         }
 
         return Widget.extend({
-            init: function (settings) {
+		init: function(settings) {
                 var self = this;
 
                 if (!settings.previewFilter) {
-                    settings.previewFilter = function (value) {
+				settings.previewFilter = function(value) {
                         return Math.round(value * 100) / 100.0;
                     };
                 }
@@ -37986,7 +37860,7 @@
                 self._initValue = self.state.get('value');
             },
 
-            renderHtml: function () {
+		renderHtml: function() {
                 var self = this, id = self._id, prefix = self.classPrefix;
 
                 return (
@@ -37996,11 +37870,11 @@
                 );
             },
 
-            reset: function () {
+		reset: function() {
                 this.value(this._initValue).repaint();
             },
 
-            postRender: function () {
+		postRender: function() {
                 var self = this, startPos, startHandlePos, handlePos = 0, value, minValue, maxValue, maxHandlePos;
                 var screenCordName, stylePosName, sizeName, shortSizeName;
 
@@ -38025,14 +37899,14 @@
                 self._dragHelper = new DragHelper(self._id, {
                     handle: self._id + "-handle",
 
-                    start: function (e) {
+				start: function(e) {
                         startPos = e[screenCordName];
                         startHandlePos = parseInt(self.getEl('handle').style[stylePosName], 10);
                         maxHandlePos = (self.layoutRect()[shortSizeName] || 100) - DomUtils.getSize(self.getEl('handle'))[sizeName];
                         self.fire('dragstart', {value: value});
                     },
 
-                    drag: function (e) {
+				drag: function(e) {
                         var delta = e[screenCordName] - startPos, handleEl = self.getEl('handle');
 
                         handlePos = constrain(startHandlePos + delta, 0, maxHandlePos);
@@ -38046,33 +37920,33 @@
                         self.fire('drag', {value: value});
                     },
 
-                    stop: function () {
+				stop: function() {
                         self.tooltip().hide();
                         self.fire('dragend', {value: value});
                     }
                 });
             },
 
-            repaint: function () {
+		repaint: function() {
                 this._super();
                 updateSliderHandle(this, this.value());
             },
 
-            bindStates: function () {
+		bindStates: function() {
                 var self = this;
 
-                self.state.on('change:value', function (e) {
+			self.state.on('change:value', function(e) {
                     updateSliderHandle(self, e.value);
                 });
 
                 return self._super();
             }
         });
-    });
+});
 
 // Included from: js/tinymce/classes/ui/Spacer.js
 
-    /**
+/**
      * Spacer.js
      *
      * Released under LGPL License.
@@ -38082,16 +37956,16 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * Creates a spacer. This control is used in flex layouts for example.
      *
      * @-x-less Spacer.less
      * @class tinymce.ui.Spacer
      * @extends tinymce.ui.Widget
      */
-    define("tinymce/ui/Spacer", [
+define("tinymce/ui/Spacer", [
         "tinymce/ui/Widget"
-    ], function (Widget) {
+], function(Widget) {
         "use strict";
 
         return Widget.extend({
@@ -38101,7 +37975,7 @@
              * @method renderHtml
              * @return {String} HTML representing the control.
              */
-            renderHtml: function () {
+		renderHtml: function() {
                 var self = this;
 
                 self.classes.add('spacer');
@@ -38110,11 +37984,11 @@
                 return '<div id="' + self._id + '" class="' + self.classes + '"></div>';
             }
         });
-    });
+});
 
 // Included from: js/tinymce/classes/ui/SplitButton.js
 
-    /**
+/**
      * SplitButton.js
      *
      * Released under LGPL License.
@@ -38124,18 +37998,18 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * Creates a split button.
      *
      * @-x-less SplitButton.less
      * @class tinymce.ui.SplitButton
      * @extends tinymce.ui.Button
      */
-    define("tinymce/ui/SplitButton", [
+define("tinymce/ui/SplitButton", [
         "tinymce/ui/MenuButton",
         "tinymce/ui/DomUtils",
         "tinymce/dom/DomQuery"
-    ], function (MenuButton, DomUtils, $) {
+], function(MenuButton, DomUtils, $) {
         return MenuButton.extend({
             Defaults: {
                 classes: "widget btn splitbtn",
@@ -38147,7 +38021,7 @@
              *
              * @method repaint
              */
-            repaint: function () {
+		repaint: function() {
                 var self = this, elm = self.getEl(), rect = self.layoutRect(), mainButtonElm, menuButtonElm;
 
                 self._super();
@@ -38172,7 +38046,7 @@
              *
              * @private
              */
-            activeMenu: function (state) {
+		activeMenu: function(state) {
                 var self = this;
 
                 $(self.getEl().lastChild).toggleClass(self.classPrefix + 'active', state);
@@ -38184,7 +38058,7 @@
              * @method renderHtml
              * @return {String} HTML representing the control.
              */
-            renderHtml: function () {
+		renderHtml: function() {
                 var self = this, id = self._id, prefix = self.classPrefix, image;
                 var icon = self.state.get('icon'), text = self.state.get('text');
 
@@ -38224,10 +38098,10 @@
              *
              * @method postRender
              */
-            postRender: function () {
+		postRender: function() {
                 var self = this, onClickHandler = self.settings.onclick;
 
-                self.on('click', function (e) {
+			self.on('click', function(e) {
                     var node = e.target;
 
                     if (e.control == this) {
@@ -38253,11 +38127,11 @@
                 return self._super();
             }
         });
-    });
+});
 
 // Included from: js/tinymce/classes/ui/StackLayout.js
 
-    /**
+/**
      * StackLayout.js
      *
      * Released under LGPL License.
@@ -38267,16 +38141,16 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This layout uses the browsers layout when the items are blocks.
      *
      * @-x-less StackLayout.less
      * @class tinymce.ui.StackLayout
      * @extends tinymce.ui.FlowLayout
      */
-    define("tinymce/ui/StackLayout", [
+define("tinymce/ui/StackLayout", [
         "tinymce/ui/FlowLayout"
-    ], function (FlowLayout) {
+], function(FlowLayout) {
         "use strict";
 
         return FlowLayout.extend({
@@ -38286,15 +38160,15 @@
                 endClass: 'break'
             },
 
-            isNative: function () {
+		isNative: function() {
                 return true;
             }
         });
-    });
+});
 
 // Included from: js/tinymce/classes/ui/TabPanel.js
 
-    /**
+/**
      * TabPanel.js
      *
      * Released under LGPL License.
@@ -38304,7 +38178,7 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * Creates a tab panel control.
      *
      * @-x-less TabPanel.less
@@ -38313,11 +38187,11 @@
      *
      * @setting {Number} activeTab Active tab index.
      */
-    define("tinymce/ui/TabPanel", [
+define("tinymce/ui/TabPanel", [
         "tinymce/ui/Panel",
         "tinymce/dom/DomQuery",
         "tinymce/ui/DomUtils"
-    ], function (Panel, $, DomUtils) {
+], function(Panel, $, DomUtils) {
         "use strict";
 
         return Panel.extend({
@@ -38334,7 +38208,7 @@
              * @method activateTab
              * @param {Number} idx Index of the tab to activate.
              */
-            activateTab: function (idx) {
+		activateTab: function(idx) {
                 var activeTabElm;
 
                 if (this.activeTabId) {
@@ -38352,7 +38226,7 @@
                 this.items()[idx].show().fire('showtab');
                 this.reflow();
 
-                this.items().each(function (item, i) {
+			this.items().each(function(item, i) {
                     if (idx != i) {
                         item.hide();
                     }
@@ -38365,13 +38239,13 @@
              * @method renderHtml
              * @return {String} HTML representing the control.
              */
-            renderHtml: function () {
+		renderHtml: function() {
                 var self = this, layout = self._layout, tabsHtml = '', prefix = self.classPrefix;
 
                 self.preRender();
                 layout.preRender(self);
 
-                self.items().each(function (ctrl, i) {
+			self.items().each(function(ctrl, i) {
                     var id = self._id + '-t' + i;
 
                     ctrl.aria('role', 'tabpanel');
@@ -38402,7 +38276,7 @@
              *
              * @method postRender
              */
-            postRender: function () {
+		postRender: function() {
                 var self = this;
 
                 self._super();
@@ -38410,7 +38284,7 @@
                 self.settings.activeTab = self.settings.activeTab || 0;
                 self.activateTab(self.settings.activeTab);
 
-                this.on('click', function (e) {
+			this.on('click', function(e) {
                     var targetParent = e.target.parentNode;
 
                     if (e.target.parentNode.id == self._id + '-head') {
@@ -38433,19 +38307,19 @@
              * @method initLayoutRect
              * @return {Object} Layout rect instance.
              */
-            initLayoutRect: function () {
+		initLayoutRect: function() {
                 var self = this, rect, minW, minH;
 
                 minW = DomUtils.getSize(self.getEl('head')).width;
                 minW = minW < 0 ? 0 : minW;
                 minH = 0;
 
-                self.items().each(function (item) {
+			self.items().each(function(item) {
                     minW = Math.max(minW, item.layoutRect().minW);
                     minH = Math.max(minH, item.layoutRect().minH);
                 });
 
-                self.items().each(function (ctrl) {
+			self.items().each(function(ctrl) {
                     ctrl.settings.x = 0;
                     ctrl.settings.y = 0;
                     ctrl.settings.w = minW;
@@ -38471,11 +38345,11 @@
                 return rect;
             }
         });
-    });
+});
 
 // Included from: js/tinymce/classes/ui/TextBox.js
 
-    /**
+/**
      * TextBox.js
      *
      * Released under LGPL License.
@@ -38485,16 +38359,16 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * Creates a new textbox.
      *
      * @-x-less TextBox.less
      * @class tinymce.ui.TextBox
      * @extends tinymce.ui.Widget
      */
-    define("tinymce/ui/TextBox", [
+define("tinymce/ui/TextBox", [
         "tinymce/ui/Widget"
-    ], function (Widget) {
+], function(Widget) {
         "use strict";
 
         return Widget.extend({
@@ -38507,7 +38381,7 @@
              * @setting {Number} maxLength Max length for the textbox.
              * @setting {Number} size Size of the textbox in characters.
              */
-            init: function (settings) {
+		init: function(settings) {
                 var self = this;
 
                 self._super(settings);
@@ -38517,14 +38391,14 @@
                 if (settings.multiline) {
                     self.classes.add('multiline');
                 } else {
-                    self.on('keydown', function (e) {
+				self.on('keydown', function(e) {
                         var rootControl;
 
                         if (e.keyCode == 13) {
                             e.preventDefault();
 
                             // Find root control that we can do toJSON on
-                            self.parents().reverse().each(function (ctrl) {
+						self.parents().reverse().each(function(ctrl) {
                                 if (ctrl.toJSON) {
                                     rootControl = ctrl;
                                     return false;
@@ -38536,7 +38410,7 @@
                         }
                     });
 
-                    self.on('keyup', function (e) {
+				self.on('keyup', function(e) {
                         self.state.set('value', e.target.value);
                     });
                 }
@@ -38547,7 +38421,7 @@
              *
              * @method repaint
              */
-            repaint: function () {
+		repaint: function() {
                 var self = this, style, rect, borderBox, borderW = 0, borderH = 0, lastRepaintRect;
 
                 style = self.getEl().style;
@@ -38596,7 +38470,7 @@
              * @method renderHtml
              * @return {String} HTML representing the control.
              */
-            renderHtml: function () {
+		renderHtml: function() {
                 var self = this, id = self._id, settings = self.settings, value = self.encode(self.state.get('value'), false), extraAttrs = '';
 
                 if ("spellcheck" in settings) {
@@ -38631,7 +38505,7 @@
                 return '<input id="' + id + '" class="' + self.classes + '" value="' + value + '" hidefocus="1"' + extraAttrs + ' />';
             },
 
-            value: function (value) {
+		value: function(value) {
                 if (arguments.length) {
                     this.state.set('value', value);
                     return this;
@@ -38650,43 +38524,43 @@
              *
              * @method postRender
              */
-            postRender: function () {
+		postRender: function() {
                 var self = this;
 
                 self._super();
 
-                self.$el.on('change', function (e) {
+			self.$el.on('change', function(e) {
                     self.state.set('value', e.target.value);
                     self.fire('change', e);
                 });
             },
 
-            bindStates: function () {
+		bindStates: function() {
                 var self = this;
 
-                self.state.on('change:value', function (e) {
+			self.state.on('change:value', function(e) {
                     if (self.getEl().value != e.value) {
                         self.getEl().value = e.value;
                     }
                 });
 
-                self.state.on('change:disabled', function (e) {
+			self.state.on('change:disabled', function(e) {
                     self.getEl().disabled = e.value;
                 });
 
                 return self._super();
             },
 
-            remove: function () {
+		remove: function() {
                 this.$el.off();
                 this._super();
             }
         });
-    });
+});
 
 // Included from: js/tinymce/classes/ui/Throbber.js
 
-    /**
+/**
      * Throbber.js
      *
      * Released under LGPL License.
@@ -38696,16 +38570,16 @@
      * Contributing: http://www.tinymce.com/contributing
      */
 
-    /**
+/**
      * This class enables you to display a Throbber for any element.
      *
      * @-x-less Throbber.less
      * @class tinymce.ui.Throbber
      */
-    define("tinymce/ui/Throbber", [
+define("tinymce/ui/Throbber", [
         "tinymce/dom/DomQuery",
         "tinymce/ui/Control"
-    ], function ($, Control) {
+], function($, Control) {
         "use strict";
 
         /**
@@ -38715,7 +38589,7 @@
          * @param {Element} elm DOM Html element to display throbber in.
          * @param {Boolean} inline Optional true/false state if the throbber should be appended to end of element for infinite scroll.
          */
-        return function (elm, inline) {
+	return function(elm, inline) {
             var self = this, state, classPrefix = Control.classPrefix;
 
             /**
@@ -38726,12 +38600,12 @@
              * @param {function} [callback] Optional callback to execute when the throbber is shown.
              * @return {tinymce.ui.Throbber} Current throbber instance.
              */
-            self.show = function (time, callback) {
+		self.show = function(time, callback) {
                 self.hide();
 
                 state = true;
 
-                window.setTimeout(function () {
+			window.setTimeout(function() {
                     if (state) {
                         $(elm).append(
                             '<div class="' + classPrefix + 'throbber' + (inline ? ' ' + classPrefix + 'throbber-inline' : '') + '"></div>'
@@ -38752,7 +38626,7 @@
              * @method hide
              * @return {tinymce.ui.Throbber} Current throbber instance.
              */
-            self.hide = function () {
+		self.hide = function() {
                 var child = elm.lastChild;
 
                 if (child && child.className.indexOf('throbber') != -1) {
@@ -38764,7 +38638,7 @@
                 return self;
             };
         };
-    });
+});
 
 expose(["tinymce/dom/EventUtils","tinymce/dom/Sizzle","tinymce/Env","tinymce/util/Tools","tinymce/dom/DomQuery","tinymce/html/Styles","tinymce/dom/TreeWalker","tinymce/html/Entities","tinymce/dom/DOMUtils","tinymce/dom/ScriptLoader","tinymce/AddOnManager","tinymce/dom/RangeUtils","tinymce/html/Node","tinymce/html/Schema","tinymce/html/SaxParser","tinymce/html/DomParser","tinymce/html/Writer","tinymce/html/Serializer","tinymce/dom/Serializer","tinymce/util/VK","tinymce/dom/ControlSelection","tinymce/dom/BookmarkManager","tinymce/dom/Selection","tinymce/Formatter","tinymce/UndoManager","tinymce/EditorCommands","tinymce/util/URI","tinymce/util/Class","tinymce/util/EventDispatcher","tinymce/util/Observable","tinymce/ui/Selector","tinymce/ui/Collection","tinymce/ui/ReflowQueue","tinymce/ui/Control","tinymce/ui/Factory","tinymce/ui/KeyboardNavigation","tinymce/ui/Container","tinymce/ui/DragHelper","tinymce/ui/Scrollable","tinymce/ui/Panel","tinymce/ui/Movable","tinymce/ui/Resizable","tinymce/ui/FloatPanel","tinymce/ui/Window","tinymce/ui/MessageBox","tinymce/WindowManager","tinymce/EditorObservable","tinymce/Shortcuts","tinymce/util/Promise","tinymce/Editor","tinymce/util/I18n","tinymce/FocusManager","tinymce/EditorManager","tinymce/util/XHR","tinymce/util/JSON","tinymce/util/JSONRequest","tinymce/util/JSONP","tinymce/util/LocalStorage","tinymce/Compat","tinymce/ui/Layout","tinymce/ui/AbsoluteLayout","tinymce/ui/Tooltip","tinymce/ui/Widget","tinymce/ui/Button","tinymce/ui/ButtonGroup","tinymce/ui/Checkbox","tinymce/ui/ComboBox","tinymce/ui/ColorBox","tinymce/ui/PanelButton","tinymce/ui/ColorButton","tinymce/util/Color","tinymce/ui/ColorPicker","tinymce/ui/Path","tinymce/ui/ElementPath","tinymce/ui/FormItem","tinymce/ui/Form","tinymce/ui/FieldSet","tinymce/ui/FilePicker","tinymce/ui/FitLayout","tinymce/ui/FlexLayout","tinymce/ui/FlowLayout","tinymce/ui/FormatControls","tinymce/ui/GridLayout","tinymce/ui/Iframe","tinymce/ui/Label","tinymce/ui/Toolbar","tinymce/ui/MenuBar","tinymce/ui/MenuButton","tinymce/ui/MenuItem","tinymce/ui/Menu","tinymce/ui/ListBox","tinymce/ui/Radio","tinymce/ui/Rect","tinymce/ui/ResizeHandle","tinymce/ui/Slider","tinymce/ui/Spacer","tinymce/ui/SplitButton","tinymce/ui/StackLayout","tinymce/ui/TabPanel","tinymce/ui/TextBox","tinymce/ui/Throbber"]);
 })(this);
